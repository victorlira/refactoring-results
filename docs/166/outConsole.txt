Running soot scenario spark;spark.webserver.MatcherFilter;doFilter(ServletRequest, ServletResponse, FilterChain);0de6842695fde634bdff38d3eab77b7802c8ffb3
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/spark/0de6842695fde634bdff38d3eab77b7802c8ffb3/original-without-dependencies/spark-core-0.9.9.7-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,50100
Time to perform Confluence 1 Inter 1,22600
Configure Soot Confluence 2 Inter 0,12100
Time to perform Confluence 2 Inter 0,59400
Visited methods: 100
Depth limit: 5
CONFLICTS: [SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,specialinvoke $stack2.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1),687,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, specialinvoke $stack2.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1), 687))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack3 = l0.<java.lang.String: char[] value>,687,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack3 = l0.<java.lang.String: char[] value>, 687)) => Node(<java.lang.String: int codePointAt(int)>,$stack4 = lengthof $stack3,687,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack4 = lengthof $stack3, 687)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack41 = l12 + l5,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.Character: int toChars(int,char[],int)>,l2 := @parameter2: int,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.Character: void toSurrogates(int,char[],int)>,l2 := @parameter2: int,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626) => (<java.lang.Character: int toChars(int,char[],int)>, staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2), 5141)) => Node(<java.lang.Character: void toSurrogates(int,char[],int)>,$stack3 = l2 + 1,5178,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626) => (<java.lang.Character: int toChars(int,char[],int)>, staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2), 5141) => (<java.lang.Character: void toSurrogates(int,char[],int)>, $stack3 = l2 + 1, 5178))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack41 = l12 + l5,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.Character: int toChars(int,char[],int)>,l2 := @parameter2: int,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.Character: void toSurrogates(int,char[],int)>,l2 := @parameter2: int,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626) => (<java.lang.Character: int toChars(int,char[],int)>, staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2), 5141)) => Node(<java.lang.Character: void toSurrogates(int,char[],int)>,$stack3 = l2 + 1,5178,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626) => (<java.lang.Character: int toChars(int,char[],int)>, staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2), 5141) => (<java.lang.Character: void toSurrogates(int,char[],int)>, $stack3 = l2 + 1, 5178)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.route.RouteMatch: java.lang.Object target>,61,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(),94,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filter = (spark.Filter) filterTarget,99,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filter = (spark.Filter) filterTarget, 99))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.route.RouteMatch: java.lang.Object target>,61,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(),94,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filter = (spark.Filter) filterTarget,99,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filter = (spark.Filter) filterTarget, 99)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String requestURI>,77,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j),411,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j), 411)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack30 = (java.lang.String) $stack29,411,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack30 = (java.lang.String) $stack29, 411))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j),411,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j), 411)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + 1,2584,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l2,2604,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l12 = l2, 2604))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack5 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack5 = l0.<java.lang.String: char[] value>, 689)) => Node(<java.lang.String: int codePointAt(int)>,$stack6 = lengthof $stack5,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack6 = lengthof $stack5, 689)) => Node(<java.lang.String: int codePointAt(int)>,$stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6),689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.Character: int toLowerCase(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack72 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l5), 2576)) => Node(<java.lang.Character: int toLowerCase(int)>,$stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0),6338,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack72 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l5), 2576) => (<java.lang.Character: int toLowerCase(int)>, $stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0), 6338))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack16 = l0.<java.lang.String: char[] value>,2572,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack16 = l0.<java.lang.String: char[] value>, 2572)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4 = $stack16[l2],2572,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4 = $stack16[l2], 2572)) => Node(<java.lang.Character: char toLowerCase(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack17 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l4), 2581)) => Node(<java.lang.Character: int toLowerCase(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack72 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l5), 2576)) => Node(<java.lang.Character: int toLowerCase(int)>,$stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0),6338,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack72 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l5), 2576) => (<java.lang.Character: int toLowerCase(int)>, $stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0), 6338)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String requestURI>,77,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack25 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(i),386,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack25 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(i), 386))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack24 = virtualinvoke matchedPart.<java.lang.String: java.lang.String toLowerCase()>(),386,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack24 = virtualinvoke matchedPart.<java.lang.String: java.lang.String toLowerCase()>(), 386)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack38 = $stack37 - l11,2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack38 = $stack37 - l11, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(l1, l2, $stack6),207,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(l1, l2, $stack6), 207))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(l1, l2, $stack6),207,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(l1, l2, $stack6), 207)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack15 = l0.<java.lang.String: char[] value>,2567,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack15 = l0.<java.lang.String: char[] value>, 2567)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l3 = lengthof $stack15,2567,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l3 = lengthof $stack15, 2567)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String requestURI>,77,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,nbrOfRequestParts = interfaceinvoke request.<java.util.List: int size()>(),395,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, nbrOfRequestParts = interfaceinvoke request.<java.util.List: int size()>(), 395))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,nbrOfRequestParts = interfaceinvoke request.<java.util.List: int size()>(),395,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, nbrOfRequestParts = interfaceinvoke request.<java.util.List: int size()>(), 395)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filter = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest),132,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filter = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 132)) => Node(<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>,delegate := @parameter0: spark.Request,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke req.<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>(request), 101)) => Node(<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>,this.<spark.webserver.RequestWrapper: spark.Request delegate> = delegate,33,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke req.<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>(request), 101) => (<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>, this.<spark.webserver.RequestWrapper: spark.Request delegate> = delegate, 33))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest),96,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>,delegate := @parameter0: spark.Request,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke req.<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>(request), 101)) => Node(<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>,this.<spark.webserver.RequestWrapper: spark.Request delegate> = delegate,33,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke req.<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>(request), 101) => (<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>, this.<spark.webserver.RequestWrapper: spark.Request delegate> = delegate, 33)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack7 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack7 = l0.<java.lang.String: char[] value>, 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l0 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l4 = l0[l1#2],4937,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689) => (<java.lang.Character: int codePointAtImpl(char[],int,int)>, l4 = l0[l1#2], 4937))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack7 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack7 = l0.<java.lang.String: char[] value>, 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l0 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l4 = l0[l1#2],4937,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689) => (<java.lang.Character: int codePointAtImpl(char[],int,int)>, l4 = l0[l1#2], 4937)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String requestURI>,77,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack7 = interfaceinvoke request.<java.util.List: int size()>(),379,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack7 = interfaceinvoke request.<java.util.List: int size()>(), 379))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack7 = interfaceinvoke request.<java.util.List: int size()>(),379,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack7 = interfaceinvoke request.<java.util.List: int size()>(), 379)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack16 = l0.<java.lang.String: char[] value>,2572,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack16 = l0.<java.lang.String: char[] value>, 2572))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack16 = l0.<java.lang.String: char[] value>,2572,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack16 = l0.<java.lang.String: char[] value>, 2572)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4 = $stack16[l2],2572,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4 = $stack16[l2], 2572)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyAfterFilter#53 = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(response#51, httpRequest),161,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyAfterFilter#53 = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(response#51, httpRequest), 161))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyAfterFilter#53 = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(response#51, httpRequest),161,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyAfterFilter#53 = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(response#51, httpRequest), 161)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request),29,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request),29,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest),96,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest),96,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String requestURI>,77,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String requestURI>,77,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,route := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0),2422,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>("/"),34,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,l3 = pathArray,36,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, l3 = pathArray, 36)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,l4 = lengthof l3,36,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, l4 = lengthof l3, 36))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,route := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>("/"),34,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,l3 = pathArray,36,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, l3 = pathArray, 36)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,l4 = lengthof l3,36,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, l4 = lengthof l3, 36)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String requestURI>,77,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j),411,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j), 411)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack30 = (java.lang.String) $stack29,411,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack30 = (java.lang.String) $stack29, 411)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,splatParam = $stack20,407,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, splatParam = $stack20, 407)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,virtualinvoke splatParam.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/"),410,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, virtualinvoke splatParam.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('/'), 410))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j),411,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j), 411)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack30 = (java.lang.String) $stack29,411,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack30 = (java.lang.String) $stack29, 411)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,splatParam = $stack20,407,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, splatParam = $stack20, 407)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,virtualinvoke splatParam.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/"),410,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, virtualinvoke splatParam.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('/'), 410)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack38 = $stack37 - l11,2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack38 = $stack37 - l11, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack10 = lengthof l1,198,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack10 = lengthof l1, 198))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack10 = lengthof l1,198,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack10 = lengthof l1, 198)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack7 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack7 = l0.<java.lang.String: char[] value>, 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l0 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l3 = l0[l1],4935,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack7 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack7 = l0.<java.lang.String: char[] value>, 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l0 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l3 = l0[l1],4935,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack39 = l12 + l5,2636,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack39 = l12 + l5, 2636)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(l4#4, 0, l14, 0, $stack39),2636,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(l4#4, 0, l14, 0, $stack39), 2636))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack28,2642,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack39 = l12 + l5,2636,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack39 = l12 + l5, 2636)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack16 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),403,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack16 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 403)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack16,403,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack16, 403)) => Node(<spark.utils.SparkUtils: boolean isSplat(java.lang.String)>,routePart := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack17 = staticinvoke <spark.utils.SparkUtils: boolean isSplat(java.lang.String)>(matchedPart), 405)) => Node(<spark.utils.SparkUtils: boolean isSplat(java.lang.String)>,$stack1 = virtualinvoke routePart.<java.lang.String: boolean equals(java.lang.Object)>("*"),49,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack17 = staticinvoke <spark.utils.SparkUtils: boolean isSplat(java.lang.String)>(matchedPart), 405)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack17 = staticinvoke <spark.utils.SparkUtils: boolean isSplat(java.lang.String)>(matchedPart),405,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack17 = staticinvoke <spark.utils.SparkUtils: boolean isSplat(java.lang.String)>(matchedPart), 405))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack16 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),403,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack16 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 403)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack16,403,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack16, 403)) => Node(<spark.utils.SparkUtils: boolean isSplat(java.lang.String)>,routePart := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack17 = staticinvoke <spark.utils.SparkUtils: boolean isSplat(java.lang.String)>(matchedPart), 405)) => Node(<spark.utils.SparkUtils: boolean isSplat(java.lang.String)>,$stack1 = virtualinvoke routePart.<java.lang.String: boolean equals(java.lang.Object)>("*"),49,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack17 = staticinvoke <spark.utils.SparkUtils: boolean isSplat(java.lang.String)>(matchedPart), 405)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack17 = staticinvoke <spark.utils.SparkUtils: boolean isSplat(java.lang.String)>(matchedPart),405,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack17 = staticinvoke <spark.utils.SparkUtils: boolean isSplat(java.lang.String)>(matchedPart), 405)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack15 = l0.<java.lang.String: char[] value>,2567,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack15 = l0.<java.lang.String: char[] value>, 2567)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l3 = lengthof $stack15,2567,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l3 = lengthof $stack15, 2567)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack20, 0, l4#4, 0, l2),2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack20, 0, l4#4, 0, l2), 2595))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack20, 0, l4#4, 0, l2),2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack20, 0, l4#4, 0, l2), 2595)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack15 = l0.<java.lang.String: char[] value>,2567,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack15 = l0.<java.lang.String: char[] value>, 2567))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack15 = l0.<java.lang.String: char[] value>,2567,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack15 = l0.<java.lang.String: char[] value>, 2567)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack53 = l12 + l5,2644,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack53 = l12 + l5, 2644))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack53 = l12 + l5,2644,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack53 = l12 + l5, 2644)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack5 = virtualinvoke match.<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>(), 94)) => Node(<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>,$stack1 = this.<spark.route.RouteMatch: spark.route.HttpMethod httpMethod>,54,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack5 = virtualinvoke match.<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>(), 94))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack5 = virtualinvoke match.<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>(), 94)) => Node(<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>,$stack1 = this.<spark.route.RouteMatch: spark.route.HttpMethod httpMethod>,54,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack5 = virtualinvoke match.<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>(), 94)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,route := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0),2422,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>("/"),34,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,l3 = pathArray,36,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, l3 = pathArray, 36)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,p = l3[l5],41,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, p = l3[l5], 41)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,interfaceinvoke path.<java.util.List: boolean add(java.lang.Object)>(p),38,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, interfaceinvoke path.<java.util.List: boolean add(java.lang.Object)>(p), 38))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,route := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>("/"),34,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,l3 = pathArray,36,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, l3 = pathArray, 36)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,p = l3[l5],41,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, p = l3[l5], 41)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,interfaceinvoke path.<java.util.List: boolean add(java.lang.Object)>(p),38,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, interfaceinvoke path.<java.util.List: boolean add(java.lang.Object)>(p), 38)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack7 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack7 = l0.<java.lang.String: char[] value>, 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l0 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l3 = l0[l1],4935,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,$stack5 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l3),4936,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689) => (<java.lang.Character: int codePointAtImpl(char[],int,int)>, $stack5 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l3), 4936))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack7 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack7 = l0.<java.lang.String: char[] value>, 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l0 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l3 = l0[l1],4935,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,$stack5 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l3),4936,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689) => (<java.lang.Character: int codePointAtImpl(char[],int,int)>, $stack5 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l3), 4936)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,nbrOfMatchedParts = interfaceinvoke matched.<java.util.List: int size()>(),396,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, nbrOfMatchedParts = interfaceinvoke matched.<java.util.List: int size()>(), 396)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack25 = nbrOfMatchedParts - 1,402,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack25 = nbrOfMatchedParts - 1, 402))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,nbrOfMatchedParts = interfaceinvoke matched.<java.util.List: int size()>(),396,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, nbrOfMatchedParts = interfaceinvoke matched.<java.util.List: int size()>(), 396)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack25 = nbrOfMatchedParts - 1,402,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack25 = nbrOfMatchedParts - 1, 402)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack38 = $stack37 - l11,2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack38 = $stack37 - l11, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack4 = lengthof l1,204,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack4 = lengthof l1, 204)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack5 = $stack4 - l3,204,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack5 = $stack4 - l3, 204))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack4 = lengthof l1,204,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack4 = lengthof l1, 204)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack5 = $stack4 - l3,204,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack5 = $stack4 - l3, 204)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,route := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0),2422,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>("/"),34,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,l3 = pathArray,36,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, l3 = pathArray, 36)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,p = l3[l5],41,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, p = l3[l5], 41)) => Node(<java.lang.String: int length()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, $stack9 = virtualinvoke p.<java.lang.String: int length()>(), 37)) => Node(<java.lang.String: int length()>,$stack1 = l0.<java.lang.String: char[] value>,623,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, $stack9 = virtualinvoke p.<java.lang.String: int length()>(), 37) => (<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,route := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>("/"),34,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,l3 = pathArray,36,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, l3 = pathArray, 36)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,p = l3[l5],41,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, p = l3[l5], 41)) => Node(<java.lang.String: int length()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, $stack9 = virtualinvoke p.<java.lang.String: int length()>(), 37)) => Node(<java.lang.String: int length()>,$stack1 = l0.<java.lang.String: char[] value>,623,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, $stack9 = virtualinvoke p.<java.lang.String: int length()>(), 37) => (<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack7 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack7 = l0.<java.lang.String: char[] value>, 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l0 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l4 = l0[l1#2],4937,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689) => (<java.lang.Character: int codePointAtImpl(char[],int,int)>, l4 = l0[l1#2], 4937)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,$stack8 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(l3, l4),4939,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack7 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack7 = l0.<java.lang.String: char[] value>, 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l0 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l4 = l0[l1#2],4937,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689) => (<java.lang.Character: int codePointAtImpl(char[],int,int)>, l4 = l0[l1#2], 4937)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,$stack8 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(l3, l4),4939,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyAfterFilter#53 = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(response#51, httpRequest),161,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyAfterFilter#53 = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(response#51, httpRequest), 161)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,virtualinvoke req.<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>(bodyAfterFilter#53),164,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke req.<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>(bodyAfterFilter#53), 164))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyAfterFilter#53 = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(response#51, httpRequest),161,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyAfterFilter#53 = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(response#51, httpRequest), 161)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,virtualinvoke req.<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>(bodyAfterFilter#53),164,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke req.<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>(bodyAfterFilter#53), 164)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack5 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack5 = l0.<java.lang.String: char[] value>, 689))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack5 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack5 = l0.<java.lang.String: char[] value>, 689)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack9 = interfaceinvoke matched.<java.util.List: int size()>(),389,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack9 = interfaceinvoke matched.<java.util.List: int size()>(), 389))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack9 = interfaceinvoke matched.<java.util.List: int size()>(),389,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack9 = interfaceinvoke matched.<java.util.List: int size()>(), 389)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack7 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack7 = l0.<java.lang.String: char[] value>, 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l0 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l4 = l0[l1#2],4937,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689) => (<java.lang.Character: int codePointAtImpl(char[],int,int)>, l4 = l0[l1#2], 4937)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,$stack7 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(l4),4938,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689) => (<java.lang.Character: int codePointAtImpl(char[],int,int)>, $stack7 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(l4), 4938))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack7 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack7 = l0.<java.lang.String: char[] value>, 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l0 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l4 = l0[l1#2],4937,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689) => (<java.lang.Character: int codePointAtImpl(char[],int,int)>, l4 = l0[l1#2], 4937)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,$stack7 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(l4),4938,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689) => (<java.lang.Character: int codePointAtImpl(char[],int,int)>, $stack7 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(l4), 4938)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack16 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),403,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack16 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 403)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack16,403,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack16, 403))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack16 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),403,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack16 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 403)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack16,403,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack16, 403)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack16 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),403,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack16 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 403)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack16,403,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack16, 403)) => Node(<spark.utils.SparkUtils: boolean isSplat(java.lang.String)>,routePart := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack17 = staticinvoke <spark.utils.SparkUtils: boolean isSplat(java.lang.String)>(matchedPart), 405)) => Node(<spark.utils.SparkUtils: boolean isSplat(java.lang.String)>,$stack1 = virtualinvoke routePart.<java.lang.String: boolean equals(java.lang.Object)>("*"),49,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack17 = staticinvoke <spark.utils.SparkUtils: boolean isSplat(java.lang.String)>(matchedPart), 405))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack16 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),403,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack16 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 403)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack16,403,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack16, 403)) => Node(<spark.utils.SparkUtils: boolean isSplat(java.lang.String)>,routePart := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack17 = staticinvoke <spark.utils.SparkUtils: boolean isSplat(java.lang.String)>(matchedPart), 405)) => Node(<spark.utils.SparkUtils: boolean isSplat(java.lang.String)>,$stack1 = virtualinvoke routePart.<java.lang.String: boolean equals(java.lang.Object)>("*"),49,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack17 = staticinvoke <spark.utils.SparkUtils: boolean isSplat(java.lang.String)>(matchedPart), 405)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack31 = l12 + l5,2640,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack31 = l12 + l5, 2640)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack33 = $stack31 + l14#27,2640,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack33 = $stack31 + l14#27, 2640))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack31 = l12 + l5,2640,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack31 = l12 + l5, 2640)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack25 = (char) l10,2606,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack25 = (char) l10, 2606))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack25 = (char) l10,2606,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack25 = (char) l10, 2606)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,route := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0),2422,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>("/"),34,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,l3 = pathArray,36,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, l3 = pathArray, 36)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,p = l3[l5],41,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, p = l3[l5], 41)) => Node(<java.lang.String: int length()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, $stack9 = virtualinvoke p.<java.lang.String: int length()>(), 37)) => Node(<java.lang.String: int length()>,$stack1 = l0.<java.lang.String: char[] value>,623,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, $stack9 = virtualinvoke p.<java.lang.String: int length()>(), 37) => (<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)) => Node(<java.lang.String: int length()>,$stack2 = lengthof $stack1,623,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, $stack9 = virtualinvoke p.<java.lang.String: int length()>(), 37)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,$stack9 = virtualinvoke p.<java.lang.String: int length()>(),37,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, $stack9 = virtualinvoke p.<java.lang.String: int length()>(), 37))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,route := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>("/"),34,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,l3 = pathArray,36,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, l3 = pathArray, 36)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,p = l3[l5],41,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, p = l3[l5], 41)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,$stack9 = virtualinvoke p.<java.lang.String: int length()>(),37,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, $stack9 = virtualinvoke p.<java.lang.String: int length()>(), 37)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<spark.utils.SparkUtils: boolean isParam(java.lang.String)>,routePart := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack12 = staticinvoke <spark.utils.SparkUtils: boolean isParam(java.lang.String)>(matchedPart), 381)) => Node(<spark.utils.SparkUtils: boolean isParam(java.lang.String)>,$stack1 = virtualinvoke routePart.<java.lang.String: boolean startsWith(java.lang.String)>(":"),45,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack12 = staticinvoke <spark.utils.SparkUtils: boolean isParam(java.lang.String)>(matchedPart), 381)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack12 = staticinvoke <spark.utils.SparkUtils: boolean isParam(java.lang.String)>(matchedPart),381,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack12 = staticinvoke <spark.utils.SparkUtils: boolean isParam(java.lang.String)>(matchedPart), 381))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack12 = staticinvoke <spark.utils.SparkUtils: boolean isParam(java.lang.String)>(matchedPart),381,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack12 = staticinvoke <spark.utils.SparkUtils: boolean isParam(java.lang.String)>(matchedPart), 381)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String requestURI>,77,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<spark.utils.SparkUtils: boolean isParam(java.lang.String)>,routePart := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack12 = staticinvoke <spark.utils.SparkUtils: boolean isParam(java.lang.String)>(matchedPart), 381)) => Node(<spark.utils.SparkUtils: boolean isParam(java.lang.String)>,$stack1 = virtualinvoke routePart.<java.lang.String: boolean startsWith(java.lang.String)>(":"),45,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack12 = staticinvoke <spark.utils.SparkUtils: boolean isParam(java.lang.String)>(matchedPart), 381))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<spark.utils.SparkUtils: boolean isParam(java.lang.String)>,routePart := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack12 = staticinvoke <spark.utils.SparkUtils: boolean isParam(java.lang.String)>(matchedPart), 381)) => Node(<spark.utils.SparkUtils: boolean isParam(java.lang.String)>,$stack1 = virtualinvoke routePart.<java.lang.String: boolean startsWith(java.lang.String)>(":"),45,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack12 = staticinvoke <spark.utils.SparkUtils: boolean isParam(java.lang.String)>(matchedPart), 381)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack28 = l13 - l11,2642,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack28 = l13 - l11, 2642))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack28,2642,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack38 = $stack37 - l11,2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack38 = $stack37 - l11, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList),101,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList),101,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,this.<spark.Request: java.util.List splat> = $stack11,101,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, this.<spark.Request: java.util.List splat> = $stack11, 101)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack43 = interfaceinvoke httpMethod.<java.util.Iterator: boolean hasNext()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack43 = interfaceinvoke httpMethod.<java.util.Iterator: boolean hasNext()>(), 93))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack43 = interfaceinvoke httpMethod.<java.util.Iterator: boolean hasNext()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack43 = interfaceinvoke httpMethod.<java.util.Iterator: boolean hasNext()>(), 93)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String requestURI>,77,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j),411,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j), 411)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack30 = (java.lang.String) $stack29,411,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack30 = (java.lang.String) $stack29, 411)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,splatParam = $stack20,407,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, splatParam = $stack20, 407))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack21 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(i),407,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack21 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(i), 407)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack22 = (java.lang.String) $stack21,407,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack22 = (java.lang.String) $stack21, 407)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,specialinvoke $stack20.<java.lang.StringBuilder: void <init>(java.lang.String)>($stack22),407,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, specialinvoke $stack20.<java.lang.StringBuilder: void <init>(java.lang.String)>($stack22), 407)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,route := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0),2422,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,route := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0),2422,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack5 = virtualinvoke match.<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>(), 94)) => Node(<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>,$stack1 = this.<spark.route.RouteMatch: spark.route.HttpMethod httpMethod>,54,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack5 = virtualinvoke match.<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>(), 94)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack5 = virtualinvoke match.<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>(),94,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack5 = virtualinvoke match.<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>(), 94)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,this.<spark.Request: spark.route.HttpMethod httpMethod> = $stack5,94,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, this.<spark.Request: spark.route.HttpMethod httpMethod> = $stack5, 94))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack5 = virtualinvoke match.<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>(), 94)) => Node(<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>,$stack1 = this.<spark.route.RouteMatch: spark.route.HttpMethod httpMethod>,54,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack5 = virtualinvoke match.<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>(), 94)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack5 = virtualinvoke match.<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>(),94,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack5 = virtualinvoke match.<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>(), 94)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l1 := @parameter1: int,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l1#2 = l1 + 1,4942,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689) => (<java.lang.Character: int codePointAtImpl(char[],int,int)>, l1#2 = l1 + 1, 4942))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack5 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack5 = l0.<java.lang.String: char[] value>, 689)) => Node(<java.lang.String: int codePointAt(int)>,$stack6 = lengthof $stack5,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack6 = lengthof $stack5, 689)) => Node(<java.lang.String: int codePointAt(int)>,$stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6),689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: int codePointAt(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l1 := @parameter1: int,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l1#2 = l1 + 1,4942,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689) => (<java.lang.Character: int codePointAtImpl(char[],int,int)>, l1#2 = l1 + 1, 4942)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack17 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("matchedPart: "),382,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack17 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('matchedPart: '), 382))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack20 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(i),385,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack20 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(i), 385)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack21 = (java.lang.String) $stack20,385,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack21 = (java.lang.String) $stack20, 385)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = "),382,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' = '), 382)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.route.RouteMatch: java.lang.Object target>,61,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(),94,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filter = (spark.Filter) filterTarget,99,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filter = (spark.Filter) filterTarget, 99)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,virtualinvoke filter.<spark.Filter: void handle(spark.Request,spark.Response)>(req, res),104,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke filter.<spark.Filter: void handle(spark.Request,spark.Response)>(req, res), 104))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.route.RouteMatch: java.lang.Object target>,61,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(),94,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filter = (spark.Filter) filterTarget,99,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filter = (spark.Filter) filterTarget, 99)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,virtualinvoke filter.<spark.Filter: void handle(spark.Request,spark.Response)>(req, res),104,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke filter.<spark.Filter: void handle(spark.Request,spark.Response)>(req, res), 104)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack17 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("matchedPart: "),382,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack17 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('matchedPart: '), 382)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(matchedPart),382,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(matchedPart), 382)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = "),382,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' = '), 382)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack22 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack21),385,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack22 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack21), 385))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack20 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(i),385,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack20 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(i), 385)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack62 = (char) l10,2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack62 = (char) l10, 2616))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack23 = l3 + l5,2647,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack23 = l3 + l5, 2647))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack23 = l3 + l5,2647,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack23 = l3 + l5, 2647)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,route := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0),2422,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>("/"),34,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,l3 = pathArray,36,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, l3 = pathArray, 36)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,p = l3[l5],41,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, p = l3[l5], 41))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,route := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>("/"),34,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,l3 = pathArray,36,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, l3 = pathArray, 36)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,p = l3[l5],41,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, p = l3[l5], 41)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String requestURI>,77,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j),411,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j), 411)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack30 = (java.lang.String) $stack29,411,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack30 = (java.lang.String) $stack29, 411)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,splatParam = $stack20,407,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, splatParam = $stack20, 407)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack23 = virtualinvoke splatParam.<java.lang.StringBuilder: java.lang.String toString()>(),414,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack23 = virtualinvoke splatParam.<java.lang.StringBuilder: java.lang.String toString()>(), 414))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j),411,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j), 411)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack30 = (java.lang.String) $stack29,411,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack30 = (java.lang.String) $stack29, 411)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,splatParam = $stack20,407,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, splatParam = $stack20, 407)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack23 = virtualinvoke splatParam.<java.lang.StringBuilder: java.lang.String toString()>(),414,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack23 = virtualinvoke splatParam.<java.lang.StringBuilder: java.lang.String toString()>(), 414)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList),100,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,this.<spark.Request: java.util.Map params> = $stack10,100,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, this.<spark.Request: java.util.Map params> = $stack10, 100))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList),100,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,this.<spark.Request: java.util.Map params> = $stack10,100,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, this.<spark.Request: java.util.Map params> = $stack10, 100)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack52 = interfaceinvoke request#44.<java.util.Iterator: boolean hasNext()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack52 = interfaceinvoke request#44.<java.util.Iterator: boolean hasNext()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack52 == 0 goto (branch),158,SinkNode, path: )
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,nbrOfMatchedParts = interfaceinvoke matched.<java.util.List: int size()>(),396,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, nbrOfMatchedParts = interfaceinvoke matched.<java.util.List: int size()>(), 396))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,nbrOfMatchedParts = interfaceinvoke matched.<java.util.List: int size()>(),396,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, nbrOfMatchedParts = interfaceinvoke matched.<java.util.List: int size()>(), 396)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack38 = $stack37 - l11,2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack38 = $stack37 - l11, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack36 = lengthof l4#4,2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack36 = lengthof l4#4, 2635))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack36 = lengthof l4#4,2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack36 = lengthof l4#4, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack38 = $stack37 - l11,2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack38 = $stack37 - l11, 2635)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.route.RouteMatch: java.lang.Object target>,61,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(),94,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack98 = filterTarget instanceof spark.Filter,95,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack98 = filterTarget instanceof spark.Filter, 95)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack98 == 0 goto (branch),95,SinkNode, path: )
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.route.RouteMatch: java.lang.Object target>,61,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(),94,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack98 = filterTarget instanceof spark.Filter,95,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack98 = filterTarget instanceof spark.Filter, 95)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,route := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0),2422,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>("/"),34,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,route := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>("/"),34,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.route.RouteMatch: java.lang.Object target>,61,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.route.RouteMatch: java.lang.Object target>,61,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack41 = l12 + l5,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.Character: int toChars(int,char[],int)>,l2 := @parameter2: int,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.Character: int toChars(int,char[],int)>,staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2),5141,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626) => (<java.lang.Character: int toChars(int,char[],int)>, staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2), 5141))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.Character: int toChars(int,char[],int)>,l1 := @parameter1: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.Character: int toChars(int,char[],int)>,staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2),5141,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626) => (<java.lang.Character: int toChars(int,char[],int)>, staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2), 5141))]
Confluence interference in <spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
Confluence flows from execution of lines 91 and 80 to line 79, defined in $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher> and uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>() and used in httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>()
Caused by line 91 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)
Caused by line 80 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)
Caused by line 79 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack4 = lengthof $stack3, 687)
Confluence interference in <spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
Confluence flows from execution of lines 81 and 80 to line 79, defined in acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept") and uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>() and used in httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>()
Caused by line 81 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)
Caused by line 80 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)
Caused by line 79 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626) => (<java.lang.Character: int toChars(int,char[],int)>, staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2), 5141) => (<java.lang.Character: void toSurrogates(int,char[],int)>, $stack3 = l2 + 1, 5178)
Confluence interference in <spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
Confluence flows from execution of lines 91 and 80 to line 99, defined in $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher> and uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>() and used in filter = (spark.Filter) filterTarget
Caused by line 91 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)
Caused by line 80 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)
Caused by line 99 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filter = (spark.Filter) filterTarget, 99)
Confluence interference in <spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
Confluence flows from execution of lines 81 and 80 to line 96, defined in acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept") and uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>() and used in request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest)
Caused by line 81 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)
Caused by line 80 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)
Caused by line 96 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j), 411)
Confluence interference in <spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
Confluence flows from execution of lines 156 and 80 to line 79, defined in $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher> and uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>() and used in httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>()
Caused by line 156 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)
Caused by line 80 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)
Caused by line 79 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(l1, l2, $stack6), 207)
Confluence interference in <spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
Confluence flows from execution of lines 117 and 80 to line 101, defined in $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher> and uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>() and used in virtualinvoke req.<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>(request)
Caused by line 117 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)
Caused by line 80 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)
Caused by line 101 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke req.<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>(request), 101) => (<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>, this.<spark.webserver.RequestWrapper: spark.Request delegate> = delegate, 33)
Confluence interference in <spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
Confluence flows from execution of lines 156 and 80 to line 161, defined in $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher> and uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>() and used in bodyAfterFilter#53 = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(response#51, httpRequest)
Caused by line 156 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)
Caused by line 80 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)
Caused by line 161 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyAfterFilter#53 = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(response#51, httpRequest), 161)
Confluence interference in <spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
Confluence flows from execution of lines 91 and 80 to line 127, defined in $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher> and uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>() and used in filterMatch = (spark.route.RouteMatch) $stack96
Caused by line 91 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)
Caused by line 80 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)
Caused by line 127 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)
Confluence interference in <spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
Confluence flows from execution of lines 156 and 80 to line 164, defined in $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher> and uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>() and used in virtualinvoke req.<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>(bodyAfterFilter#53)
Caused by line 156 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)
Caused by line 80 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)
Caused by line 164 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke req.<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>(bodyAfterFilter#53), 164)
Confluence interference in <spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
Confluence flows from execution of lines 91 and 80 to line 93, defined in $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher> and uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>() and used in $stack43 = interfaceinvoke httpMethod.<java.util.Iterator: boolean hasNext()>()
Caused by line 91 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)
Caused by line 80 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)
Caused by line 93 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack43 = interfaceinvoke httpMethod.<java.util.Iterator: boolean hasNext()>(), 93)
Confluence interference in <spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
Confluence flows from execution of lines 91 and 80 to line 104, defined in $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher> and uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>() and used in virtualinvoke filter.<spark.Filter: void handle(spark.Request,spark.Response)>(req, res)
Caused by line 91 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)
Caused by line 80 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)
Caused by line 104 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke filter.<spark.Filter: void handle(spark.Request,spark.Response)>(req, res), 104)
Confluence interference in <spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
Confluence flows from execution of lines 156 and 80 to line 190, defined in $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher> and uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>() and used in response#51 = (spark.route.RouteMatch) $stack63
Caused by line 156 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)
Caused by line 80 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)
Caused by line 190 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)
Confluence interference in <spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
Confluence flows from execution of lines 81 and 80 to line 158, defined in acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept") and uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>() and used in request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>()
Caused by line 81 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)
Caused by line 80 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)
Caused by line 158 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)
Confluence interference in <spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
Confluence flows from execution of lines 91 and 80 to line 95, defined in $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher> and uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>() and used in $stack98 = filterTarget instanceof spark.Filter
Caused by line 91 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)
Caused by line 80 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)
Caused by line 95 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack98 = filterTarget instanceof spark.Filter, 95)
Confluence interference in <spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
Confluence flows from execution of lines 156 and 80 to line 94, defined in $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher> and uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>() and used in filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>()
Caused by line 156 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)
Caused by line 80 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)
Caused by line 94 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)
 Analysis results
----------------------------
 Number of conflicts: 77
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/spark/0de6842695fde634bdff38d3eab77b7802c8ffb3/original-without-dependencies/spark-core-0.9.9.7-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,51600
Runtime: 0.03s
Time to perform OA Inter 0,64400
OA Inter Visited methods: 66
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/spark/0de6842695fde634bdff38d3eab77b7802c8ffb3/original-without-dependencies/spark-core-0.9.9.7-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,39400
Time to perform DFP Inter 0,81000
Depth limit: 5
CONFLICTS: []
Visited methods: 50
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/spark/0de6842695fde634bdff38d3eab77b7802c8ffb3/original-without-dependencies/spark-core-0.9.9.7-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,40000
Time to perform DFP Inter 0,85300
Depth limit: 5
CONFLICTS: DF interference in <spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
Data flows from execution of line 80 to 91, defined in uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>() and propagated in matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType)
Caused by line 80 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)
Caused by line 91 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)
DF interference in <spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
Data flows from execution of line 80 to 156, defined in uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>() and propagated in matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType)
Caused by line 80 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)
Caused by line 156 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)
DF interference in <spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
Data flows from execution of line 80 to 117, defined in uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>() and propagated in filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType)
Caused by line 80 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)
Caused by line 117 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)
DF interference in <spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
Empty list for reporting data flow! Error: head of empty list
[List(Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117))), List(Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack93 = interfaceinvoke $stack92.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack91, uri, acceptType),124,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack93 = interfaceinvoke $stack92.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack91, uri, acceptType), 124)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack93 == null goto $stack94 = null,124,SinkNode, path: )), List(Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91))), List(Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)))]
Visited methods: 50
 Analysis results
----------------------------
 Number of conflicts: 4
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/spark/0de6842695fde634bdff38d3eab77b7802c8ffb3/original-without-dependencies/spark-core-0.9.9.7-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,40900
Time to perform PDG 0,61600
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/spark/0de6842695fde634bdff38d3eab77b7802c8ffb3/original-without-dependencies/spark-core-0.9.9.7-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,48200
Time to perform PDG 0,68800
CONFLICTS: [List(Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(),121,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 121)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack70 = filterTarget instanceof spark.Route,130,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack70 = filterTarget instanceof spark.Route, 130)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack70 == 0 goto (branch),130,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#20 = (spark.Route) filterTarget,131,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#20 = (spark.Route) filterTarget, 131)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#19 = virtualinvoke response#20.<spark.Route: java.lang.String render(java.lang.Object)>(element),139,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#19 = virtualinvoke response#20.<spark.Route: java.lang.String render(java.lang.Object)>(element), 139)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if request#19 == null goto $stack71 = staticinvoke <java.lang.System: long currentTimeMillis()>(),141,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = request#19,142,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = request#19, 142))), List(Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(),121,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 121)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack70 = filterTarget instanceof spark.Route,130,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack70 = filterTarget instanceof spark.Route, 130)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack70 == 0 goto (branch),130,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#20 = (spark.Route) filterTarget,131,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#20 = (spark.Route) filterTarget, 131)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#19 = virtualinvoke response#20.<spark.Route: java.lang.String render(java.lang.Object)>(element),139,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#19 = virtualinvoke response#20.<spark.Route: java.lang.String render(java.lang.Object)>(element), 139))), List(Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(),121,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 121)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if filterTarget == null goto $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,127,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#19 = null,129,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = request#19, 142))), List(Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91))), List(Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117))), List(Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(),121,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 121)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack70 = filterTarget instanceof spark.Route,130,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack70 = filterTarget instanceof spark.Route, 130)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack70 == 0 goto (branch),130,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#20 = (spark.Route) filterTarget,131,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#20 = (spark.Route) filterTarget, 131)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,element = virtualinvoke response#20.<spark.Route: java.lang.Object handle(spark.Request,spark.Response)>(req, res),138,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, element = virtualinvoke response#20.<spark.Route: java.lang.Object handle(spark.Request,spark.Response)>(req, res), 138))), List(Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(),121,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 121)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack70 = filterTarget instanceof spark.Route,130,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack70 = filterTarget instanceof spark.Route, 130)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack70 == 0 goto (branch),130,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#20 = (spark.Route) filterTarget,131,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#20 = (spark.Route) filterTarget, 131)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#19 = virtualinvoke response#20.<spark.Route: java.lang.String render(java.lang.Object)>(element),139,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#19 = virtualinvoke response#20.<spark.Route: java.lang.String render(java.lang.Object)>(element), 139)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if request#19 == null goto $stack71 = staticinvoke <java.lang.System: long currentTimeMillis()>(),141,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = request#19,142,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = request#19, 142)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = bodyAfterFilter,172,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = bodyAfterFilter, 172)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if bodyContent == null goto $stack61 = 0,188,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack61 = 0,191,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet#59 = $stack61, 188)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet#59 = $stack61,188,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet#59 = $stack61, 188)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if matchSet#59 != 0 goto (branch),190,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack58 == 0 goto (branch),200,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if matchSet#59 == 0 goto (branch),200,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack53 = interfaceinvoke httpResponse.<javax.servlet.http.HttpServletResponse: boolean isCommitted()>(),202,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack53 = interfaceinvoke httpResponse.<javax.servlet.http.HttpServletResponse: boolean isCommitted()>(), 202)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack53 != 0 goto return,202,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,interfaceinvoke httpResponse.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>("Content-Type", acceptType),203,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, interfaceinvoke httpResponse.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>('Content-Type', acceptType), 203))), List(Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if filterMatch == null goto $stack47 = <spark.route.HttpMethod: spark.route.HttpMethod head>,120,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack47 = <spark.route.HttpMethod: spark.route.HttpMethod head>,122,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if httpMethod#10 != $stack47 goto (branch),122,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if bodyContent != null goto (branch),141,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack92 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,124,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack92 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 124)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack93 = interfaceinvoke $stack92.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack91, uri, acceptType),124,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack93 = interfaceinvoke $stack92.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack91, uri, acceptType), 124))), List(Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)))]
 Analysis results
----------------------------
 Number of conflicts: 9
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
