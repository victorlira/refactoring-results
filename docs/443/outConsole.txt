Running soot scenario datasift-java;org.datasift.streamconsumer.HttpMultiThread;run();22b7bbde53faf387e103eaa31078f6ba9960bc68
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/datasift-java/22b7bbde53faf387e103eaa31078f6ba9960bc68/original-without-dependencies/datasift-java-1.3.2.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,71200
An error occurred in getInvokeExpr with args: specialinvoke $stack4.<java.lang.StringBuffer: void <init>()>() -> java.lang.NullPointerException
An error occurred in getInvokeExpr with args: specialinvoke $stack8.<java.lang.StringBuffer: void <init>()>() -> java.lang.NullPointerException
Time to perform Confluence 1 Inter 9,64100
Configure Soot Confluence 2 Inter 0,16900
An error occurred in getInvokeExpr with args: specialinvoke $stack4.<java.lang.StringBuffer: void <init>()>() -> java.lang.NullPointerException
An error occurred in getInvokeExpr with args: specialinvoke $stack8.<java.lang.StringBuffer: void <init>()>() -> java.lang.NullPointerException
Time to perform Confluence 2 Inter 3,09700
Visited methods: 216
Depth limit: 5
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/datasift-java/22b7bbde53faf387e103eaa31078f6ba9960bc68/original-without-dependencies/datasift-java-1.3.2.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,70200
Runtime: 0.065s
Time to perform OA Inter 1,05700
OA Inter Visited methods: 53
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/datasift-java/22b7bbde53faf387e103eaa31078f6ba9960bc68/original-without-dependencies/datasift-java-1.3.2.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,60200
An error occurred in getInvokeExpr with args: specialinvoke $stack4.<java.lang.StringBuffer: void <init>()>() -> java.lang.NullPointerException
An error occurred in getInvokeExpr with args: specialinvoke $stack8.<java.lang.StringBuffer: void <init>()>() -> java.lang.NullPointerException
Time to perform DFP Inter 3,14800
Depth limit: 5
CONFLICTS: DF interference in <org.datasift.streamconsumer.HttpMultiThread: void run()>
Data flows from execution of line 143 to 207, defined in $stack74 = new java.io.BufferedReader and propagated in virtualinvoke reader#7.<java.io.BufferedReader: void close()>()
Caused by line 143 flow: path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack74.<java.io.BufferedReader: void <init>(java.io.Reader)>($stack75), 143)
Caused by line 207 flow: path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, virtualinvoke reader#7.<java.io.BufferedReader: void close()>(), 207)
DF interference in <org.datasift.streamconsumer.HttpMultiThread: void run()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.datasift.streamconsumer.HttpMultiThread: void run()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.datasift.streamconsumer.HttpMultiThread: void run()>
Data flows from execution of line 143 to 207, defined in reader#7 = $stack74 and propagated in virtualinvoke reader#7.<java.io.BufferedReader: void close()>()
Caused by line 143 flow: path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reader#7 = $stack74, 143)
Caused by line 207 flow: path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, virtualinvoke reader#7.<java.io.BufferedReader: void close()>(), 207)
[List(Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack74 = new java.io.BufferedReader,142,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack74.<java.io.BufferedReader: void <init>(java.io.Reader)>($stack75), 143)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reader#7 = $stack74,143,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reader#7 = $stack74, 143)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,virtualinvoke reader#7.<java.io.BufferedReader: void close()>(),207,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, virtualinvoke reader#7.<java.io.BufferedReader: void close()>(), 207))), List(Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack74 = new java.io.BufferedReader,142,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack74.<java.io.BufferedReader: void <init>(java.io.Reader)>($stack75), 143)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reader#7 = $stack74,143,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reader#7 = $stack74, 143)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if reader#7 == null goto $stack17 = virtualinvoke this.<org.datasift.streamconsumer.HttpMultiThread: int getConsumerState()>(),205,SinkNode, path: )), List(Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reader#7 = $stack74,143,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reader#7 = $stack74, 143)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,virtualinvoke reader#7.<java.io.BufferedReader: void close()>(),207,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, virtualinvoke reader#7.<java.io.BufferedReader: void close()>(), 207))), List(Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reader#7 = $stack74,143,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reader#7 = $stack74, 143)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if reader#7 == null goto $stack17 = virtualinvoke this.<org.datasift.streamconsumer.HttpMultiThread: int getConsumerState()>(),205,SinkNode, path: ))]
Visited methods: 108
 Analysis results
----------------------------
 Number of conflicts: 4
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/datasift-java/22b7bbde53faf387e103eaa31078f6ba9960bc68/original-without-dependencies/datasift-java-1.3.2.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,66500
Time to perform DFP Inter 1,63700
Depth limit: 5
CONFLICTS: []
Visited methods: 54
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/datasift-java/22b7bbde53faf387e103eaa31078f6ba9960bc68/original-without-dependencies/datasift-java-1.3.2.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,62700
Time to perform PDG 1,17400
CONFLICTS: [List(Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if statusCode < 400 goto (branch),138,SourceNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if statusCode >= 500 goto (branch),186,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if statusCode == 420 goto (branch),162,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reader#7 = $stack74,143,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reader#7 = $stack74, 143)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,virtualinvoke reader#7.<java.io.BufferedReader: void close()>(),207,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, virtualinvoke reader#7.<java.io.BufferedReader: void close()>(), 207))), List(Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack82 = virtualinvoke $stack81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connection refused: "),152,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack82 = virtualinvoke $stack81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Connection refused: '), 152)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack83 = virtualinvoke $stack82.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(statusCode),152,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack83 = virtualinvoke $stack82.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(statusCode), 152)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack84 = virtualinvoke $stack83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" "),152,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack84 = virtualinvoke $stack83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' '), 152)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack87 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack86),156,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack87 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack86), 156)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reason = virtualinvoke $stack87.<java.lang.StringBuilder: java.lang.String toString()>(),156,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reason = virtualinvoke $stack87.<java.lang.StringBuilder: java.lang.String toString()>(), 156)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reason = "Connection failed due to a network error",200,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack16 = virtualinvoke reason.<java.lang.String: int length()>(), 190)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack16 = virtualinvoke reason.<java.lang.String: int length()>(),190,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack16 = virtualinvoke reason.<java.lang.String: int length()>(), 190)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack16 != 0 goto (branch),190,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack27 != 2 goto (branch),191,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack29 = this.<org.datasift.streamconsumer.HttpMultiThread: boolean _auto_reconnect>,205,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack29 = this.<org.datasift.streamconsumer.HttpMultiThread: boolean _auto_reconnect>, 205)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack29 == 0 goto (branch),205,SinkNode, path: )), List(Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack74 = new java.io.BufferedReader,142,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack74.<java.io.BufferedReader: void <init>(java.io.Reader)>($stack75), 143)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reader#7 = $stack74,143,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reader#7 = $stack74, 143)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if reader#7 == null goto $stack17 = virtualinvoke this.<org.datasift.streamconsumer.HttpMultiThread: int getConsumerState()>(),205,SinkNode, path: )), List(Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack85 = interfaceinvoke response.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>(),155,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack85 = interfaceinvoke response.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>(), 155)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack86 = interfaceinvoke $stack85.<org.apache.http.StatusLine: java.lang.String getReasonPhrase()>(),156,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack86 = interfaceinvoke $stack85.<org.apache.http.StatusLine: java.lang.String getReasonPhrase()>(), 156)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack84 = virtualinvoke $stack83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" "),152,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack84 = virtualinvoke $stack83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' '), 152)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack87 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack86),156,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack87 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack86), 156)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reason = virtualinvoke $stack87.<java.lang.StringBuilder: java.lang.String toString()>(),156,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reason = virtualinvoke $stack87.<java.lang.StringBuilder: java.lang.String toString()>(), 156)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reason = "Connection failed due to a network error",200,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack16 = virtualinvoke reason.<java.lang.String: int length()>(), 190)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack16 = virtualinvoke reason.<java.lang.String: int length()>(),190,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack16 = virtualinvoke reason.<java.lang.String: int length()>(), 190)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack16 != 0 goto (branch),190,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack27 != 2 goto (branch),191,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack29 = this.<org.datasift.streamconsumer.HttpMultiThread: boolean _auto_reconnect>,205,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack29 = this.<org.datasift.streamconsumer.HttpMultiThread: boolean _auto_reconnect>, 205)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack29 == 0 goto (branch),205,SinkNode, path: )), List(Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reader#7 = $stack74,143,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reader#7 = $stack74, 143)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,virtualinvoke reader#7.<java.io.BufferedReader: void close()>(),207,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, virtualinvoke reader#7.<java.io.BufferedReader: void close()>(), 207))), List(Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack74 = new java.io.BufferedReader,142,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack74.<java.io.BufferedReader: void <init>(java.io.Reader)>($stack75), 143)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reader#7 = $stack74,143,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reader#7 = $stack74, 143)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,virtualinvoke reader#7.<java.io.BufferedReader: void close()>(),207,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, virtualinvoke reader#7.<java.io.BufferedReader: void close()>(), 207))), List(Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reader#7 = $stack74,143,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reader#7 = $stack74, 143)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if reader#7 == null goto $stack17 = virtualinvoke this.<org.datasift.streamconsumer.HttpMultiThread: int getConsumerState()>(),205,SinkNode, path: )), List(Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,data = $stack79,148,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, data = $stack79, 148)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reason = virtualinvoke data.<org.datasift.JSONdn: java.lang.String getStringVal(java.lang.String)>("message"),150,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reason = virtualinvoke data.<org.datasift.JSONdn: java.lang.String getStringVal(java.lang.String)>('message'), 150)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reason = "Connection failed due to a network error",200,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack16 = virtualinvoke reason.<java.lang.String: int length()>(), 190)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack16 = virtualinvoke reason.<java.lang.String: int length()>(),190,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack16 = virtualinvoke reason.<java.lang.String: int length()>(), 190)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack16 != 0 goto (branch),190,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack27 != 2 goto (branch),191,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack29 = this.<org.datasift.streamconsumer.HttpMultiThread: boolean _auto_reconnect>,205,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack29 = this.<org.datasift.streamconsumer.HttpMultiThread: boolean _auto_reconnect>, 205)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack29 == 0 goto (branch),205,SinkNode, path: )), List(Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack80 = virtualinvoke data.<org.datasift.JSONdn: boolean has(java.lang.String)>("message"),149,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack80 = virtualinvoke data.<org.datasift.JSONdn: boolean has(java.lang.String)>('message'), 149)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack80 == 0 goto $stack81 = new java.lang.StringBuilder,149,SourceNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack84 = virtualinvoke $stack83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" "),152,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack84 = virtualinvoke $stack83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' '), 152)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack87 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack86),156,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack87 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack86), 156)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reason = virtualinvoke $stack87.<java.lang.StringBuilder: java.lang.String toString()>(),156,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reason = virtualinvoke $stack87.<java.lang.StringBuilder: java.lang.String toString()>(), 156)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reason = "Connection failed due to a network error",200,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack16 = virtualinvoke reason.<java.lang.String: int length()>(), 190)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack16 = virtualinvoke reason.<java.lang.String: int length()>(),190,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack16 = virtualinvoke reason.<java.lang.String: int length()>(), 190)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack16 != 0 goto (branch),190,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack27 != 2 goto (branch),191,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack29 = this.<org.datasift.streamconsumer.HttpMultiThread: boolean _auto_reconnect>,205,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack29 = this.<org.datasift.streamconsumer.HttpMultiThread: boolean _auto_reconnect>, 205)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack29 == 0 goto (branch),205,SinkNode, path: )), List(Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reason = virtualinvoke data.<org.datasift.JSONdn: java.lang.String getStringVal(java.lang.String)>("message"),150,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reason = virtualinvoke data.<org.datasift.JSONdn: java.lang.String getStringVal(java.lang.String)>('message'), 150)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reason = "Connection failed due to a network error",200,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack16 = virtualinvoke reason.<java.lang.String: int length()>(), 190)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack16 = virtualinvoke reason.<java.lang.String: int length()>(),190,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack16 = virtualinvoke reason.<java.lang.String: int length()>(), 190)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack16 != 0 goto (branch),190,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack27 != 2 goto (branch),191,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack29 = this.<org.datasift.streamconsumer.HttpMultiThread: boolean _auto_reconnect>,205,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack29 = this.<org.datasift.streamconsumer.HttpMultiThread: boolean _auto_reconnect>, 205)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack29 == 0 goto (branch),205,SinkNode, path: )), List(Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if statusCode < 400 goto (branch),138,SourceNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if statusCode >= 500 goto (branch),186,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if statusCode == 420 goto (branch),162,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,data = $stack79,148,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, data = $stack79, 148)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reason = virtualinvoke data.<org.datasift.JSONdn: java.lang.String getStringVal(java.lang.String)>("message"),150,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reason = virtualinvoke data.<org.datasift.JSONdn: java.lang.String getStringVal(java.lang.String)>('message'), 150)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reason = "Connection failed due to a network error",200,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack16 = virtualinvoke reason.<java.lang.String: int length()>(), 190)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack16 = virtualinvoke reason.<java.lang.String: int length()>(),190,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack16 = virtualinvoke reason.<java.lang.String: int length()>(), 190)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack16 != 0 goto (branch),190,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack27 != 2 goto (branch),191,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack29 = this.<org.datasift.streamconsumer.HttpMultiThread: boolean _auto_reconnect>,205,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack29 = this.<org.datasift.streamconsumer.HttpMultiThread: boolean _auto_reconnect>, 205)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack29 == 0 goto (branch),205,SinkNode, path: )), List(Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack86 = interfaceinvoke $stack85.<org.apache.http.StatusLine: java.lang.String getReasonPhrase()>(),156,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack86 = interfaceinvoke $stack85.<org.apache.http.StatusLine: java.lang.String getReasonPhrase()>(), 156)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack84 = virtualinvoke $stack83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" "),152,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack84 = virtualinvoke $stack83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' '), 152)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack87 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack86),156,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack87 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack86), 156)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reason = virtualinvoke $stack87.<java.lang.StringBuilder: java.lang.String toString()>(),156,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reason = virtualinvoke $stack87.<java.lang.StringBuilder: java.lang.String toString()>(), 156)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reason = "Connection failed due to a network error",200,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack16 = virtualinvoke reason.<java.lang.String: int length()>(), 190)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack16 = virtualinvoke reason.<java.lang.String: int length()>(),190,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack16 = virtualinvoke reason.<java.lang.String: int length()>(), 190)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack16 != 0 goto (branch),190,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack27 != 2 goto (branch),191,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack29 = this.<org.datasift.streamconsumer.HttpMultiThread: boolean _auto_reconnect>,205,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack29 = this.<org.datasift.streamconsumer.HttpMultiThread: boolean _auto_reconnect>, 205)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack29 == 0 goto (branch),205,SinkNode, path: ))]
 Analysis results
----------------------------
 Number of conflicts: 12
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/datasift-java/22b7bbde53faf387e103eaa31078f6ba9960bc68/original-without-dependencies/datasift-java-1.3.2.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,50800
Time to perform PDG 1,15900
CONFLICTS: [List(Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack29 == 0 goto (branch),205,SourceNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if reconnect_delay != 0 goto (branch),195,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if reconnect_delay >= 16 goto reason = "Connection failed due to a network error",197,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reconnect_delay = reconnect_delay + 1,198,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack105 = reconnect_delay * 1000, 103)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reconnect_delay = reconnect_delay * 2,165,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack105 = reconnect_delay * 1000, 103)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reconnect_delay = 1,196,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack105 = reconnect_delay * 1000, 103)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if reconnect_delay != 0 goto (branch),162,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reconnect_delay = 10,163,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack105 = reconnect_delay * 1000, 103)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if reconnect_delay >= 240 goto $stack61 = new java.lang.StringBuilder,164,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,virtualinvoke this.<org.datasift.streamconsumer.HttpMultiThread: void stopConsumer()>(),172,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, virtualinvoke this.<org.datasift.streamconsumer.HttpMultiThread: void stopConsumer()>(), 172)))]
 Analysis results
----------------------------
 Number of conflicts: 1
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
