[
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterizedType = (java.lang.reflect.ParameterizedType) $stack13,67,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack17 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),75,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack17 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 75)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack18 = $stack17[0],75,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack18 = $stack17[0], 75)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,genericArrayType#2 = (java.lang.Class) $stack18,75,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 2366)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 2366)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack23 = (java.lang.Class) type,98,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 2366)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 2366))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack23 = (java.lang.Class) type",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 98
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 98
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": 1443
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 640
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
					"line": 67
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 67
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 75
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 75
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 75
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 640
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l1 = l0.<java.lang.Class: java.lang.String name>",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.String getName()>",
					"line": 640
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentType#2 = (java.lang.reflect.WildcardType) type,110,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack10 = $stack9[0],111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 2366)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l0.<java.lang.Class: java.lang.String name> = $stack2,642,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, l0.<java.lang.Class: java.lang.String name> = $stack2, 642)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterizedType = (java.lang.reflect.ParameterizedType) $stack13,67,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),69,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 69)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack29 = $stack28[0],69,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack29 = $stack28[0], 69)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,genericArrayType = (java.lang.reflect.GenericArrayType) $stack29,69,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,type := @parameter0: java.lang.reflect.Type,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack15 = (java.lang.reflect.GenericArrayType) type,102,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack15 = (java.lang.reflect.GenericArrayType) type, 102)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(),102,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 2366)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 2366))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
					"line": 67
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 67
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 69
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 69
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 69
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 102
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 102
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": 1443
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 110
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 110
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0.<java.lang.Class: java.lang.String name> = $stack2",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.String getName()>",
					"line": 642
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterizedType = (java.lang.reflect.ParameterizedType) $stack13,67,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack17 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),75,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack17 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 75)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack18 = $stack17[0],75,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack18 = $stack17[0], 75)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,genericArrayType#2 = (java.lang.Class) $stack18,75,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 103
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
					"line": 67
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 67
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 75
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 75
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 75
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
					"line": 1235
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentType#2 = (java.lang.reflect.WildcardType) type,110,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack10 = $stack9[0],111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 2366)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 2366)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1807,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312) => (<java.lang.String: int lastIndexOf(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1807)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack3 = lengthof $stack2,1807,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312) => (<java.lang.String: int lastIndexOf(java.lang.String)>, $stack3 = lengthof $stack2, 1807)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack15 = (java.lang.reflect.GenericArrayType) type,102,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack15 = (java.lang.reflect.GenericArrayType) type, 102)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(),102,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1807,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312) => (<java.lang.String: int lastIndexOf(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1807)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack3 = lengthof $stack2,1807,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312) => (<java.lang.String: int lastIndexOf(java.lang.String)>, $stack3 = lengthof $stack2, 1807))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack15 = (java.lang.reflect.GenericArrayType) type",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 102
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 102
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 102
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1311
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int lastIndexOf(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int lastIndexOf(java.lang.String)>",
	"line": 1807
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int lastIndexOf(java.lang.String)>",
	"line": 1807
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 110
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 110
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1311
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int lastIndexOf(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int lastIndexOf(java.lang.String)>",
	"line": 1807
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int lastIndexOf(java.lang.String)>",
	"line": 1807
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack3 = lengthof $stack2",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: int lastIndexOf(java.lang.String)>",
					"line": 1807
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack34 = virtualinvoke propertyType.<java.lang.Class: java.lang.Class getComponentType()>(),64,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack34 = virtualinvoke propertyType.<java.lang.Class: java.lang.Class getComponentType()>(), 64)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack34 = virtualinvoke propertyType.<java.lang.Class: java.lang.Class getComponentType()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
					"line": 64
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 64
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1306
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
					"line": 70
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1306
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.String getSimpleName()>",
					"line": 1306
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,$stack4 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>(),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack4 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>(), 326)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,$stack5 = virtualinvoke $stack4.<java.lang.Package: java.lang.String getName()>(),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack5 = virtualinvoke $stack4.<java.lang.Package: java.lang.String getName()>(), 326)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,$stack6 = virtualinvoke $stack5.<java.lang.String: int length()>(),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack6 = virtualinvoke $stack5.<java.lang.String: int length()>(), 326)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,$stack7 = $stack6 + 1,326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack7 = $stack6 + 1, 326)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7), 326)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l5 = l0.<java.lang.String: char[] value>,2070,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, l5 = l0.<java.lang.String: char[] value>, 2070)) SINK=>BASE: Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>(),325,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>(), 325)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7), 326)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l5 = l0.<java.lang.String: char[] value>,2070,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, l5 = l0.<java.lang.String: char[] value>, 2070))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.util.ClassUtil",
					"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
					"line": 325
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 325
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1933
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2070
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack4 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.util.ClassUtil",
					"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
					"line": 326
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2070
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l5 = l0.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String replace(char,char)>",
					"line": 2070
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterizedType = (java.lang.reflect.ParameterizedType) $stack13,67,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack17 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),75,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack17 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 75)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack18 = $stack17[0],75,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack18 = $stack17[0], 75)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,genericArrayType#2 = (java.lang.Class) $stack18,75,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(),1309,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack4 = lengthof $stack3,1929,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack4 = lengthof $stack3, 1929)) => Node(<java.lang.String: java.lang.String substring(int)>,l2 = $stack4 - l1,1929,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, l2 = $stack4 - l1, 1929)) => Node(<java.lang.String: java.lang.String substring(int)>,specialinvoke $stack7.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2),1931,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, specialinvoke $stack7.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2), 1931)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack15 = (java.lang.reflect.GenericArrayType) type,102,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack15 = (java.lang.reflect.GenericArrayType) type, 102)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(),102,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(),1309,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack4 = lengthof $stack3,1929,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack4 = lengthof $stack3, 1929)) => Node(<java.lang.String: java.lang.String substring(int)>,l2 = $stack4 - l1,1929,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, l2 = $stack4 - l1, 1929)) => Node(<java.lang.String: java.lang.String substring(int)>,specialinvoke $stack7.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2),1931,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, specialinvoke $stack7.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2), 1931))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack15 = (java.lang.reflect.GenericArrayType) type",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 102
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 102
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 102
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1309
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1929
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1929
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1929
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1931
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
					"line": 67
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 67
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 75
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 75
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 75
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1309
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1929
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1929
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1929
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1931
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke $stack7.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String substring(int)>",
					"line": 1931
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getSimpleName()>(),1307,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getSimpleName()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack21 = new java.lang.StringBuilder,1307,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, specialinvoke $stack21.<java.lang.StringBuilder: void <init>()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,specialinvoke $stack21.<java.lang.StringBuilder: void <init>()>(),1307,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, specialinvoke $stack21.<java.lang.StringBuilder: void <init>()>(), 1307))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 103
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1307
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1307
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1307
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1307
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 103
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1307
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.String getSimpleName()>",
					"line": 1307
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(),1309,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(),1309,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 103
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1309
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 105
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1309
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.String getSimpleName()>",
					"line": 1309
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7), 326)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l5 = l0.<java.lang.String: char[] value>,2070,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, l5 = l0.<java.lang.String: char[] value>, 2070)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l7#3 = l5[l4],2083,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, l7#3 = l5[l4], 2083)) => Node(<java.lang.String: java.lang.String replace(char,char)>,$stack13 = l7#3,2082,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, $stack13 = l7#3, 2082)) SINK=>BASE: Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>(),325,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>(), 325)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7), 326)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l5 = l0.<java.lang.String: char[] value>,2070,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, l5 = l0.<java.lang.String: char[] value>, 2070)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l7#3 = l5[l4],2083,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, l7#3 = l5[l4], 2083)) => Node(<java.lang.String: java.lang.String replace(char,char)>,$stack13 = l7#3,2082,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, $stack13 = l7#3, 2082))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.util.ClassUtil",
					"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
					"line": 325
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 325
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1933
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2070
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2083
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2082
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7)",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.util.ClassUtil",
					"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
					"line": 326
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2070
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2083
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2082
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack13 = l7#3",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String replace(char,char)>",
					"line": 2082
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack23 = (java.lang.Class) type,98,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)) => Node(<java.lang.Class: java.lang.Package getPackage()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack4 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>(), 326)) => Node(<java.lang.Class: java.lang.Package getPackage()>,$stack1 = staticinvoke <java.lang.Package: java.lang.Package getPackage(java.lang.Class)>(l0),796,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack4 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>(), 326)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack34 = virtualinvoke propertyType.<java.lang.Class: java.lang.Class getComponentType()>(),64,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack34 = virtualinvoke propertyType.<java.lang.Class: java.lang.Class getComponentType()>(), 64)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.Package getPackage()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack4 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>(), 326)) => Node(<java.lang.Class: java.lang.Package getPackage()>,$stack1 = staticinvoke <java.lang.Package: java.lang.Package getPackage(java.lang.Class)>(l0),796,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack4 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>(), 326))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack34 = virtualinvoke propertyType.<java.lang.Class: java.lang.Class getComponentType()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
					"line": 64
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 64
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Package getPackage()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Package getPackage()>",
	"line": 796
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack23 = (java.lang.Class) type",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 98
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 98
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Package getPackage()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Package getPackage()>",
	"line": 796
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = staticinvoke <java.lang.Package: java.lang.Package getPackage(java.lang.Class)>(l0)",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Package getPackage()>",
					"line": 796
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack29 = $stack28[0],69,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack29 = $stack28[0], 69)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,genericArrayType = (java.lang.reflect.GenericArrayType) $stack29,69,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,type := @parameter0: java.lang.reflect.Type,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentType#2 = (java.lang.reflect.WildcardType) type,110,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack10 = $stack9[0],111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 2366)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 2366)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>("."),1312,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack19 = $stack18 + 1,1312,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack19 = $stack18 + 1, 1312)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterizedType = (java.lang.reflect.ParameterizedType) $stack13,67,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),69,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 69)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack29 = $stack28[0],69,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack29 = $stack28[0], 69)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,genericArrayType = (java.lang.reflect.GenericArrayType) $stack29,69,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,type := @parameter0: java.lang.reflect.Type,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack15 = (java.lang.reflect.GenericArrayType) type,102,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack15 = (java.lang.reflect.GenericArrayType) type, 102)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(),102,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>("."),1312,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
					"line": 67
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 67
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 69
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 69
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 69
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 102
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 102
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1311
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1312
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack29 = $stack28[0]",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
					"line": 69
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 69
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 69
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 110
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1311
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1312
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1312
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack19 = $stack18 + 1",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.String getSimpleName()>",
					"line": 1312
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,genericArrayType#2 = (java.lang.Class) $stack18,75,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2371,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2371)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2371,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2371))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
					"line": 70
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2371
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "genericArrayType#2 = (java.lang.Class) $stack18",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
					"line": 75
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 75
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2371
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0)",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
					"line": 2371
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(), 100)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,type := @parameter0: java.lang.reflect.Type,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentType#2 = (java.lang.reflect.WildcardType) type,110,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack10 = $stack9[0],111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),852,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2910) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(), 852)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,genericArrayType = (java.lang.reflect.GenericArrayType) $stack29,69,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,type := @parameter0: java.lang.reflect.Type,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack15 = (java.lang.reflect.GenericArrayType) type,102,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack15 = (java.lang.reflect.GenericArrayType) type, 102)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(),102,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),852,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2910) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(), 852))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
					"line": 69
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 69
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 102
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 102
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 852
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 100
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 110
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 852
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
					"line": 852
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>,$stack2 = new java.lang.NullPointerException,55,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack9.<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>($stack10), 62) => (<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>, specialinvoke $stack2.<java.lang.NullPointerException: void <init>(java.lang.String)>('typeName must not be null.'), 55)) => Node(<java.lang.NullPointerException: void <init>(java.lang.String)>,l0 := @this: java.lang.NullPointerException,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack9.<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>($stack10), 62) => (<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>, specialinvoke $stack2.<java.lang.NullPointerException: void <init>(java.lang.String)>('typeName must not be null.'), 55)) => Node(<java.lang.NullPointerException: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1),70,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack9.<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>($stack10), 62) => (<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>, specialinvoke $stack2.<java.lang.NullPointerException: void <init>(java.lang.String)>('typeName must not be null.'), 55) => (<java.lang.NullPointerException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1), 70)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>,$stack2 = new java.lang.NullPointerException,55,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack9.<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>($stack10), 62) => (<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>, specialinvoke $stack2.<java.lang.NullPointerException: void <init>(java.lang.String)>('typeName must not be null.'), 55)) => Node(<java.lang.NullPointerException: void <init>(java.lang.String)>,l0 := @this: java.lang.NullPointerException,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack9.<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>($stack10), 62) => (<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>, specialinvoke $stack2.<java.lang.NullPointerException: void <init>(java.lang.String)>('typeName must not be null.'), 55)) => Node(<java.lang.NullPointerException: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1),70,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack9.<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>($stack10), 62) => (<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>, specialinvoke $stack2.<java.lang.NullPointerException: void <init>(java.lang.String)>('typeName must not be null.'), 55) => (<java.lang.NullPointerException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1), 70))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack2 = new java.lang.NullPointerException",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.TypeDescription",
					"method": "<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>",
					"line": 55
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.TypeDescription",
	"method": "<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>",
	"line": 55
},{
	"class": "java.lang.NullPointerException",
	"method": "<java.lang.NullPointerException: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.NullPointerException",
	"method": "<java.lang.NullPointerException: void <init>(java.lang.String)>",
	"line": 70
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack2 = new java.lang.NullPointerException",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.TypeDescription",
					"method": "<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>",
					"line": 55
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.TypeDescription",
	"method": "<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>",
	"line": 55
},{
	"class": "java.lang.NullPointerException",
	"method": "<java.lang.NullPointerException: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.NullPointerException",
	"method": "<java.lang.NullPointerException: void <init>(java.lang.String)>",
	"line": 70
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1)",
				"location": {
					"file": "",
					"class": "java.lang.NullPointerException",
					"method": "<java.lang.NullPointerException: void <init>(java.lang.String)>",
					"line": 70
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(), 100)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,type := @parameter0: java.lang.reflect.Type,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentType#2 = (java.lang.reflect.WildcardType) type,110,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack10 = $stack9[0],111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 2366)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 2366)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
					"line": 70
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1311
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 100
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 110
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1311
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.String getSimpleName()>",
					"line": 1311
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack23 = (java.lang.Class) type,98,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2381,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2381)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack23 = (java.lang.Class) type,98,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2381,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2381))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack23 = (java.lang.Class) type",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 98
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 98
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2381
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack23 = (java.lang.Class) type",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 98
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 98
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2381
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0)",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
					"line": 2381
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,genericArrayType#2 = (java.lang.Class) $stack18,75,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(),1309,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.String: char charAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>(method), 272) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>, $stack2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>($stack1), 242) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>, $stack7 = virtualinvoke name.<java.lang.String: char charAt(int)>($stack6), 259)) => Node(<java.lang.String: char charAt(int)>,$stack5 = l0.<java.lang.String: char[] value>,660,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>(method), 272) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>, $stack2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>($stack1), 242) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>, $stack7 = virtualinvoke name.<java.lang.String: char charAt(int)>($stack6), 259) => (<java.lang.String: char charAt(int)>, $stack5 = l0.<java.lang.String: char[] value>, 660)) => Node(<java.lang.String: char charAt(int)>,$stack6 = $stack5[l1],660,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>(method), 272) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>, $stack2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>($stack1), 242) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>, $stack7 = virtualinvoke name.<java.lang.String: char charAt(int)>($stack6), 259)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack23 = (java.lang.Class) type,98,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(),1309,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.String: char charAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>(method), 272) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>, $stack2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>($stack1), 242) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>, $stack7 = virtualinvoke name.<java.lang.String: char charAt(int)>($stack6), 259)) => Node(<java.lang.String: char charAt(int)>,$stack5 = l0.<java.lang.String: char[] value>,660,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>(method), 272) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>, $stack2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>($stack1), 242) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>, $stack7 = virtualinvoke name.<java.lang.String: char charAt(int)>($stack6), 259) => (<java.lang.String: char charAt(int)>, $stack5 = l0.<java.lang.String: char[] value>, 660))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack23 = (java.lang.Class) type",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 98
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 98
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1309
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: char charAt(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: char charAt(int)>",
	"line": 660
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "genericArrayType#2 = (java.lang.Class) $stack18",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
					"line": 75
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 75
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1309
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: char charAt(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: char charAt(int)>",
	"line": 660
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: char charAt(int)>",
	"line": 660
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack6 = $stack5[l1]",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: char charAt(int)>",
					"line": 660
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>(),325,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>(), 325)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7), 326)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l5 = l0.<java.lang.String: char[] value>,2070,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, l5 = l0.<java.lang.String: char[] value>, 2070)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l7#3 = l5[l4],2083,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, l7#3 = l5[l4], 2083)) SINK=>BASE: Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,$stack5 = virtualinvoke $stack4.<java.lang.Package: java.lang.String getName()>(),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack5 = virtualinvoke $stack4.<java.lang.Package: java.lang.String getName()>(), 326)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,$stack6 = virtualinvoke $stack5.<java.lang.String: int length()>(),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack6 = virtualinvoke $stack5.<java.lang.String: int length()>(), 326)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,$stack7 = $stack6 + 1,326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack7 = $stack6 + 1, 326)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7), 326)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l5 = l0.<java.lang.String: char[] value>,2070,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, l5 = l0.<java.lang.String: char[] value>, 2070)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l7#3 = l5[l4],2083,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, l7#3 = l5[l4], 2083))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack5 = virtualinvoke $stack4.<java.lang.Package: java.lang.String getName()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.util.ClassUtil",
					"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
					"line": 326
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2070
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2083
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.util.ClassUtil",
					"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
					"line": 325
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 325
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2070
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2083
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l7#3 = l5[l4]",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String replace(char,char)>",
					"line": 2083
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,genericArrayType#2 = (java.lang.Class) $stack18,75,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack20 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>(),80,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack20 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>(), 80)) => Node(<java.lang.String: boolean contains(java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80)) => Node(<java.lang.String: int indexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,$stack8 = l0.<java.lang.String: char[] value>,1718,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698) => (<java.lang.String: int indexOf(java.lang.String,int)>, $stack8 = l0.<java.lang.String: char[] value>, 1718)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,$stack9 = staticinvoke <java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>($stack8, 0, $stack7, $stack6, 0, $stack5, l2),1718,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack18 = $stack17[0],75,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack18 = $stack17[0], 75)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,genericArrayType#2 = (java.lang.Class) $stack18,75,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack20 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>(),80,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack20 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>(), 80)) => Node(<java.lang.String: boolean contains(java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80)) => Node(<java.lang.String: int indexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,$stack3 = l0.<java.lang.String: char[] value>,1718,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698) => (<java.lang.String: int indexOf(java.lang.String,int)>, $stack3 = l0.<java.lang.String: char[] value>, 1718))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack18 = $stack17[0]",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
					"line": 75
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 75
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 75
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 80
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean contains(java.lang.CharSequence)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": 1718
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "genericArrayType#2 = (java.lang.Class) $stack18",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
					"line": 75
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 75
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 80
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean contains(java.lang.CharSequence)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": 1718
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": 1718
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack9 = staticinvoke <java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>($stack8, 0, $stack7, $stack6, 0, $stack5, l2)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
					"line": 1718
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>,l8 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>(),51,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, l8 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>(), 51)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>,exception = l8[l10],55,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, exception = l8[l10], 55)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(),2378,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,staticinvoke <sun.reflect.misc.ReflectUtil: void checkProxyPackageAccess(java.lang.ClassLoader,java.lang.Class[])>(l1, $stack12),2378,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, staticinvoke <sun.reflect.misc.ReflectUtil: void checkProxyPackageAccess(java.lang.ClassLoader,java.lang.Class[])>(l1, $stack12), 2378)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentType#2 = (java.lang.reflect.WildcardType) type,110,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack10 = $stack9[0],111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(),2378,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 110
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 110
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2378
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l8 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>",
					"line": 51
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>",
	"line": 51
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>",
	"line": 55
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2378
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2378
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "staticinvoke <sun.reflect.misc.ReflectUtil: void checkProxyPackageAccess(java.lang.ClassLoader,java.lang.Class[])>(l1, $stack12)",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
					"line": 2378
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>,$stack2 = new java.lang.NullPointerException,55,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack9.<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>($stack10), 62) => (<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>, specialinvoke $stack2.<java.lang.NullPointerException: void <init>(java.lang.String)>('typeName must not be null.'), 55)) => Node(<java.lang.NullPointerException: void <init>(java.lang.String)>,l0 := @this: java.lang.NullPointerException,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack9.<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>($stack10), 62) => (<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>, specialinvoke $stack2.<java.lang.NullPointerException: void <init>(java.lang.String)>('typeName must not be null.'), 55)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack9.<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>($stack10), 62) => (<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>, specialinvoke $stack2.<java.lang.NullPointerException: void <init>(java.lang.String)>('typeName must not be null.'), 55) => (<java.lang.NullPointerException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1),62,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack9.<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>($stack10), 62) => (<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>, specialinvoke $stack2.<java.lang.NullPointerException: void <init>(java.lang.String)>('typeName must not be null.'), 55) => (<java.lang.NullPointerException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1), 70) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>,$stack2 = new java.lang.NullPointerException,55,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack9.<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>($stack10), 62) => (<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>, specialinvoke $stack2.<java.lang.NullPointerException: void <init>(java.lang.String)>('typeName must not be null.'), 55)) => Node(<java.lang.NullPointerException: void <init>(java.lang.String)>,l0 := @this: java.lang.NullPointerException,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack9.<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>($stack10), 62) => (<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>, specialinvoke $stack2.<java.lang.NullPointerException: void <init>(java.lang.String)>('typeName must not be null.'), 55)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack9.<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>($stack10), 62) => (<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>, specialinvoke $stack2.<java.lang.NullPointerException: void <init>(java.lang.String)>('typeName must not be null.'), 55) => (<java.lang.NullPointerException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1),62,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack9.<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>($stack10), 62) => (<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>, specialinvoke $stack2.<java.lang.NullPointerException: void <init>(java.lang.String)>('typeName must not be null.'), 55) => (<java.lang.NullPointerException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1), 70) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack2 = new java.lang.NullPointerException",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.TypeDescription",
					"method": "<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>",
					"line": 55
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.TypeDescription",
	"method": "<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>",
	"line": 55
},{
	"class": "java.lang.NullPointerException",
	"method": "<java.lang.NullPointerException: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.String)>",
	"line": 62
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack2 = new java.lang.NullPointerException",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.TypeDescription",
					"method": "<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>",
					"line": 55
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.TypeDescription",
	"method": "<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>",
	"line": 55
},{
	"class": "java.lang.NullPointerException",
	"method": "<java.lang.NullPointerException: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.String)>",
	"line": 62
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1)",
				"location": {
					"file": "",
					"class": "java.lang.RuntimeException",
					"method": "<java.lang.RuntimeException: void <init>(java.lang.String)>",
					"line": 62
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack23 = (java.lang.Class) type,98,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(),1309,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack4 = lengthof $stack3,1929,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack4 = lengthof $stack3, 1929)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack34 = virtualinvoke propertyType.<java.lang.Class: java.lang.Class getComponentType()>(),64,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack34 = virtualinvoke propertyType.<java.lang.Class: java.lang.Class getComponentType()>(), 64)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(),1309,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack4 = lengthof $stack3,1929,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack4 = lengthof $stack3, 1929))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack34 = virtualinvoke propertyType.<java.lang.Class: java.lang.Class getComponentType()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
					"line": 64
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 64
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1309
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1929
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1929
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack23 = (java.lang.Class) type",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 98
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 98
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1309
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1929
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1929
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack4 = lengthof $stack3",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String substring(int)>",
					"line": 1929
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,genericArrayType#2 = (java.lang.Class) $stack18,75,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,specialinvoke l1.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>($stack4, 1),1238,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324) => (<java.lang.Class: java.lang.Class getDeclaringClass()>, specialinvoke l1.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>($stack4, 1), 1238)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,specialinvoke l1.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>($stack4, 1),1238,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324) => (<java.lang.Class: java.lang.Class getDeclaringClass()>, specialinvoke l1.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>($stack4, 1), 1238))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 100
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1238
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "genericArrayType#2 = (java.lang.Class) $stack18",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
					"line": 75
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 75
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1238
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke l1.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>($stack4, 1)",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
					"line": 1238
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,$stack7 = $stack6 + 1,326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack7 = $stack6 + 1, 326)) => Node(<java.lang.String: java.lang.String substring(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,specialinvoke $stack8.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1),1927,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, specialinvoke $stack8.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1), 1927)) SINK=>BASE: Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,$stack5 = virtualinvoke $stack4.<java.lang.Package: java.lang.String getName()>(),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack5 = virtualinvoke $stack4.<java.lang.Package: java.lang.String getName()>(), 326)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,$stack6 = virtualinvoke $stack5.<java.lang.String: int length()>(),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack6 = virtualinvoke $stack5.<java.lang.String: int length()>(), 326)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,$stack7 = $stack6 + 1,326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack7 = $stack6 + 1, 326)) => Node(<java.lang.String: java.lang.String substring(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,specialinvoke $stack8.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1),1927,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, specialinvoke $stack8.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1), 1927))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack5 = virtualinvoke $stack4.<java.lang.Package: java.lang.String getName()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.util.ClassUtil",
					"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
					"line": 326
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1927
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack7 = $stack6 + 1",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.util.ClassUtil",
					"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
					"line": 326
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1927
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke $stack8.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String substring(int)>",
					"line": 1927
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack23 = (java.lang.Class) type,98,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0),2377,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0), 2377)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>(),61,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>(), 61)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack34 = virtualinvoke propertyType.<java.lang.Class: java.lang.Class getComponentType()>(),64,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack34 = virtualinvoke propertyType.<java.lang.Class: java.lang.Class getComponentType()>(), 64)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0),2377,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0), 2377))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
					"line": 61
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 61
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 64
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2377
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack23 = (java.lang.Class) type",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 98
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 98
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2377
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0)",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
					"line": 2377
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack23 = (java.lang.Class) type,98,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(),1309,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack10 = virtualinvoke l1.<java.lang.String: char charAt(int)>(l3),1335,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack10 = virtualinvoke l1.<java.lang.String: char charAt(int)>(l3), 1335)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack11 = staticinvoke <java.lang.Class: boolean isAsciiDigit(char)>($stack10),1335,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack11 = staticinvoke <java.lang.Class: boolean isAsciiDigit(char)>($stack10), 1335)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(),1309,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.String: char charAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>(method), 272) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>, $stack2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>($stack1), 242) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>, $stack7 = virtualinvoke name.<java.lang.String: char charAt(int)>($stack6), 259)) => Node(<java.lang.String: char charAt(int)>,$stack5 = l0.<java.lang.String: char[] value>,660,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>(method), 272) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>, $stack2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>($stack1), 242) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>, $stack7 = virtualinvoke name.<java.lang.String: char charAt(int)>($stack6), 259) => (<java.lang.String: char charAt(int)>, $stack5 = l0.<java.lang.String: char[] value>, 660)) => Node(<java.lang.String: char charAt(int)>,$stack6 = $stack5[l1],660,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>(method), 272) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>, $stack2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>($stack1), 242) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>, $stack7 = virtualinvoke name.<java.lang.String: char charAt(int)>($stack6), 259)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack10 = virtualinvoke l1.<java.lang.String: char charAt(int)>(l3),1335,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack10 = virtualinvoke l1.<java.lang.String: char charAt(int)>(l3), 1335))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 105
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1309
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: char charAt(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: char charAt(int)>",
	"line": 660
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: char charAt(int)>",
	"line": 660
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1335
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack23 = (java.lang.Class) type",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 98
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 98
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1309
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1335
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1335
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack11 = staticinvoke <java.lang.Class: boolean isAsciiDigit(char)>($stack10)",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.String getSimpleName()>",
					"line": 1335
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>,l8 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>(),51,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, l8 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>(), 51)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>,exception = l8[l10],55,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, exception = l8[l10], 55)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,$stack1 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>,689,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2363,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2363)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2363,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2363))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 103
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2363
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l8 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>",
					"line": 51
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>",
	"line": 51
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>",
	"line": 55
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.ClassLoader getClassLoader0()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.ClassLoader getClassLoader0()>",
	"line": 689
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2363
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
					"line": 2363
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>(),325,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>(), 325)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7), 326)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327)) => Node(<java.lang.String: java.lang.String replace(char,char)>,$stack8 = l0.<java.lang.String: char[] value>,2068,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, $stack8 = l0.<java.lang.String: char[] value>, 2068)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l3 = lengthof $stack8,2068,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, l3 = lengthof $stack8, 2068)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l6 = newarray (char)[l3],2078,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, l6 = newarray (char)[l3], 2078)) SINK=>BASE: Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,$stack5 = virtualinvoke $stack4.<java.lang.Package: java.lang.String getName()>(),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack5 = virtualinvoke $stack4.<java.lang.Package: java.lang.String getName()>(), 326)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,$stack6 = virtualinvoke $stack5.<java.lang.String: int length()>(),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack6 = virtualinvoke $stack5.<java.lang.String: int length()>(), 326)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,$stack7 = $stack6 + 1,326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack7 = $stack6 + 1, 326)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7), 326)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327)) => Node(<java.lang.String: java.lang.String replace(char,char)>,$stack8 = l0.<java.lang.String: char[] value>,2068,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, $stack8 = l0.<java.lang.String: char[] value>, 2068)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l3 = lengthof $stack8,2068,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, l3 = lengthof $stack8, 2068)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l6 = newarray (char)[l3],2078,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, l6 = newarray (char)[l3], 2078))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack5 = virtualinvoke $stack4.<java.lang.Package: java.lang.String getName()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.util.ClassUtil",
					"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
					"line": 326
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2068
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2068
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2078
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.util.ClassUtil",
					"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
					"line": 325
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 325
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2068
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2068
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2078
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l6 = newarray (char)[l3]",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String replace(char,char)>",
					"line": 2078
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(), 100)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,type := @parameter0: java.lang.reflect.Type,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentType#2 = (java.lang.reflect.WildcardType) type,110,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack10 = $stack9[0],111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,$stack1 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>,689,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2363,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2363)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4),2365,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4), 2365)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack15 = (java.lang.reflect.GenericArrayType) type,102,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack15 = (java.lang.reflect.GenericArrayType) type, 102)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(),102,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2363,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2363)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4),2365,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4), 2365))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack15 = (java.lang.reflect.GenericArrayType) type",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 102
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 102
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 102
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2363
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2365
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 100
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 110
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.ClassLoader getClassLoader0()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.ClassLoader getClassLoader0()>",
	"line": 689
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2363
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2365
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4)",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
					"line": 2365
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack15 = (java.lang.reflect.GenericArrayType) type,102,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack15 = (java.lang.reflect.GenericArrayType) type, 102)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(),102,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),852,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2910) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(), 852)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,$stack4 = virtualinvoke l2.<java.lang.Object: java.lang.Object clone()>(),856,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2910) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, $stack4 = virtualinvoke l2.<java.lang.Object: java.lang.Object clone()>(), 856)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,$stack5 = (java.lang.Class[]) $stack4,856,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),845,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2910) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l2 = l1.<java.lang.Class$ReflectionData: java.lang.Class[] interfaces>,850,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2910) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l2 = l1.<java.lang.Class$ReflectionData: java.lang.Class[] interfaces>, 850)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,$stack4 = virtualinvoke l2.<java.lang.Object: java.lang.Object clone()>(),856,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>(), 1615) => (<java.lang.Class: java.lang.reflect.Method[] privateGetPublicMethods()>, l5 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2910) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, $stack4 = virtualinvoke l2.<java.lang.Object: java.lang.Object clone()>(), 856))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 111
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 845
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 850
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 856
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack15 = (java.lang.reflect.GenericArrayType) type",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 102
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 102
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 102
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 852
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 856
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 856
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack5 = (java.lang.Class[]) $stack4",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
					"line": 856
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,$stack4 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>(),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack4 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>(), 326)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,$stack5 = virtualinvoke $stack4.<java.lang.Package: java.lang.String getName()>(),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack5 = virtualinvoke $stack4.<java.lang.Package: java.lang.String getName()>(), 326)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,$stack6 = virtualinvoke $stack5.<java.lang.String: int length()>(),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack6 = virtualinvoke $stack5.<java.lang.String: int length()>(), 326)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,$stack7 = $stack6 + 1,326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack7 = $stack6 + 1, 326)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7), 326)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l5 = l0.<java.lang.String: char[] value>,2070,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, l5 = l0.<java.lang.String: char[] value>, 2070)) => Node(<java.lang.String: java.lang.String replace(char,char)>,$stack19 = l5[l4],2073,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, $stack19 = l5[l4], 2073)) SINK=>BASE: Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>(),325,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>(), 325)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7), 326)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l5 = l0.<java.lang.String: char[] value>,2070,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, l5 = l0.<java.lang.String: char[] value>, 2070)) => Node(<java.lang.String: java.lang.String replace(char,char)>,$stack19 = l5[l4],2073,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, $stack19 = l5[l4], 2073))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.util.ClassUtil",
					"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
					"line": 325
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 325
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1933
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2070
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2073
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack4 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.util.ClassUtil",
					"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
					"line": 326
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2070
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2073
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack19 = l5[l4]",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String replace(char,char)>",
					"line": 2073
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,genericArrayType#2 = (java.lang.Class) $stack18,75,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,$stack1 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>,689,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,$stack1 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>,689,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 105
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.ClassLoader getClassLoader0()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.ClassLoader getClassLoader0()>",
	"line": 689
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "genericArrayType#2 = (java.lang.Class) $stack18",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
					"line": 75
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 75
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.ClassLoader getClassLoader0()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.ClassLoader getClassLoader0()>",
	"line": 689
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.ClassLoader getClassLoader0()>",
					"line": 689
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterizedType = (java.lang.reflect.ParameterizedType) $stack13,67,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack17 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),75,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack17 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 75)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack18 = $stack17[0],75,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack18 = $stack17[0], 75)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,genericArrayType#2 = (java.lang.Class) $stack18,75,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack20 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>(),80,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack20 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>(), 80)) => Node(<java.lang.String: boolean contains(java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80)) => Node(<java.lang.String: int indexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,$stack8 = l0.<java.lang.String: char[] value>,1718,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698) => (<java.lang.String: int indexOf(java.lang.String,int)>, $stack8 = l0.<java.lang.String: char[] value>, 1718)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,$stack9 = staticinvoke <java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>($stack8, 0, $stack7, $stack6, 0, $stack5, l2),1718,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698)) => Node(<java.lang.String: int indexOf(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0),1698,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack18 = $stack17[0],75,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack18 = $stack17[0], 75)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,genericArrayType#2 = (java.lang.Class) $stack18,75,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack20 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>(),80,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack20 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>(), 80)) => Node(<java.lang.String: boolean contains(java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80)) => Node(<java.lang.String: int indexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,$stack3 = l0.<java.lang.String: char[] value>,1718,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698) => (<java.lang.String: int indexOf(java.lang.String,int)>, $stack3 = l0.<java.lang.String: char[] value>, 1718)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,$stack7 = lengthof $stack3,1718,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698) => (<java.lang.String: int indexOf(java.lang.String,int)>, $stack7 = lengthof $stack3, 1718)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,$stack9 = staticinvoke <java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>($stack8, 0, $stack7, $stack6, 0, $stack5, l2),1718,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698)) => Node(<java.lang.String: int indexOf(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0),1698,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack18 = $stack17[0]",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
					"line": 75
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 75
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 75
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 80
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean contains(java.lang.CharSequence)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": 1718
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": 1718
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": 1718
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String)>",
	"line": 1698
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
					"line": 67
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 67
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 75
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 75
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 75
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 80
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean contains(java.lang.CharSequence)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": 1718
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": 1718
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String)>",
	"line": 1698
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: int indexOf(java.lang.String)>",
					"line": 1698
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(),1309,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.String: int length()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>(method), 272) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>, $stack2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>($stack1), 242) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>, $stack1 = virtualinvoke name.<java.lang.String: int length()>(), 258)) => Node(<java.lang.String: int length()>,$stack1 = l0.<java.lang.String: char[] value>,623,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>(method), 272) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>, $stack2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>($stack1), 242) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>, $stack1 = virtualinvoke name.<java.lang.String: int length()>(), 258) => (<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)) => Node(<java.lang.String: int length()>,$stack2 = lengthof $stack1,623,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>(method), 272) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>, $stack2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>($stack1), 242) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>, $stack1 = virtualinvoke name.<java.lang.String: int length()>(), 258)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l2 = virtualinvoke l1.<java.lang.String: int length()>(),1328,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l2 = virtualinvoke l1.<java.lang.String: int length()>(), 1328)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack15 = (java.lang.reflect.GenericArrayType) type,102,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack15 = (java.lang.reflect.GenericArrayType) type, 102)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(),102,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(),1309,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.String: int length()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>(method), 272) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>, $stack2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>($stack1), 242) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>, $stack1 = virtualinvoke name.<java.lang.String: int length()>(), 258)) => Node(<java.lang.String: int length()>,$stack1 = l0.<java.lang.String: char[] value>,623,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>(method), 272) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>, $stack2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>($stack1), 242) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>, $stack1 = virtualinvoke name.<java.lang.String: int length()>(), 258) => (<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)) => Node(<java.lang.String: int length()>,$stack2 = lengthof $stack1,623,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>(method), 272) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>, $stack2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>($stack1), 242) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>, $stack1 = virtualinvoke name.<java.lang.String: int length()>(), 258)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l2 = virtualinvoke l1.<java.lang.String: int length()>(),1328,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l2 = virtualinvoke l1.<java.lang.String: int length()>(), 1328))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack15 = (java.lang.reflect.GenericArrayType) type",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 102
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 102
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 102
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1309
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int length()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int length()>",
	"line": 623
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int length()>",
	"line": 623
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1328
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 111
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1309
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int length()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int length()>",
	"line": 623
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int length()>",
	"line": 623
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1328
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l2 = virtualinvoke l1.<java.lang.String: int length()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.String getSimpleName()>",
					"line": 1328
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,genericArrayType#2 = (java.lang.Class) $stack18,75,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentType#2 = (java.lang.reflect.WildcardType) type,110,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack10 = $stack9[0],111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 110
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 110
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": 1443
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "genericArrayType#2 = (java.lang.Class) $stack18",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
					"line": 75
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 75
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": 1443
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
					"line": 1443
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterizedType = (java.lang.reflect.ParameterizedType) $stack13,67,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack17 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),75,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack17 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 75)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack18 = $stack17[0],75,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack18 = $stack17[0], 75)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,genericArrayType#2 = (java.lang.Class) $stack18,75,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(),1309,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.String: char charAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>(method), 272) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>, $stack2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>($stack1), 242) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>, $stack7 = virtualinvoke name.<java.lang.String: char charAt(int)>($stack6), 259)) => Node(<java.lang.String: char charAt(int)>,$stack3 = l0.<java.lang.String: char[] value>,658,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>(method), 272) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>, $stack2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>($stack1), 242) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>, $stack7 = virtualinvoke name.<java.lang.String: char charAt(int)>($stack6), 259) => (<java.lang.String: char charAt(int)>, $stack3 = l0.<java.lang.String: char[] value>, 658)) => Node(<java.lang.String: char charAt(int)>,$stack4 = lengthof $stack3,658,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>(method), 272) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>, $stack2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>($stack1), 242) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>, $stack7 = virtualinvoke name.<java.lang.String: char charAt(int)>($stack6), 259) => (<java.lang.String: char charAt(int)>, $stack4 = lengthof $stack3, 658)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentType#2 = (java.lang.reflect.WildcardType) type,110,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack10 = $stack9[0],111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(),1309,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.String: char charAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>(method), 272) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>, $stack2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>($stack1), 242) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>, $stack7 = virtualinvoke name.<java.lang.String: char charAt(int)>($stack6), 259)) => Node(<java.lang.String: char charAt(int)>,$stack3 = l0.<java.lang.String: char[] value>,658,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>(method), 272) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>, $stack2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>($stack1), 242) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>, $stack7 = virtualinvoke name.<java.lang.String: char charAt(int)>($stack6), 259) => (<java.lang.String: char charAt(int)>, $stack3 = l0.<java.lang.String: char[] value>, 658))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 110
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 110
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1309
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: char charAt(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: char charAt(int)>",
	"line": 658
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
					"line": 67
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 67
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 75
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 75
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 75
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1309
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: char charAt(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: char charAt(int)>",
	"line": 658
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: char charAt(int)>",
	"line": 658
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack4 = lengthof $stack3",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: char charAt(int)>",
					"line": 658
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,genericArrayType#2 = (java.lang.Class) $stack18,75,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(),1309,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.String: int length()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>(method), 272) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>, $stack2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>($stack1), 242) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>, $stack1 = virtualinvoke name.<java.lang.String: int length()>(), 258)) => Node(<java.lang.String: int length()>,$stack1 = l0.<java.lang.String: char[] value>,623,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>(method), 272) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>, $stack2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>($stack1), 242) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>, $stack1 = virtualinvoke name.<java.lang.String: int length()>(), 258) => (<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(),1309,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.String: int length()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>(method), 272) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>, $stack2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>($stack1), 242) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>, $stack1 = virtualinvoke name.<java.lang.String: int length()>(), 258)) => Node(<java.lang.String: int length()>,$stack1 = l0.<java.lang.String: char[] value>,623,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>(method), 272) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>, $stack2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>($stack1), 242) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>, $stack1 = virtualinvoke name.<java.lang.String: int length()>(), 258) => (<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)) => Node(<java.lang.String: int length()>,$stack2 = lengthof $stack1,623,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>(method), 272) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isStandardGetter(java.lang.reflect.Method)>, $stack2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>($stack1), 242) => (<org.assertj.assertions.generator.util.ClassUtil: boolean isValidStandardGetterName(java.lang.String)>, $stack1 = virtualinvoke name.<java.lang.String: int length()>(), 258))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 100
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1309
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int length()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int length()>",
	"line": 623
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int length()>",
	"line": 623
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "genericArrayType#2 = (java.lang.Class) $stack18",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
					"line": 75
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 75
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1309
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int length()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int length()>",
	"line": 623
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = l0.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: int length()>",
					"line": 623
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack20 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>(),80,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack20 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>(), 80)) => Node(<java.lang.String: boolean contains(java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80)) => Node(<java.lang.String: int indexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,$stack8 = l0.<java.lang.String: char[] value>,1718,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698) => (<java.lang.String: int indexOf(java.lang.String,int)>, $stack8 = l0.<java.lang.String: char[] value>, 1718)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,$stack9 = staticinvoke <java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>($stack8, 0, $stack7, $stack6, 0, $stack5, l2),1718,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698)) => Node(<java.lang.String: int indexOf(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0),1698,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133)) => Node(<java.lang.String: boolean contains(java.lang.CharSequence)>,$stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2),2133,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack18 = $stack17[0],75,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack18 = $stack17[0], 75)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,genericArrayType#2 = (java.lang.Class) $stack18,75,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,$stack20 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>(),80,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack20 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>(), 80)) => Node(<java.lang.String: boolean contains(java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80)) => Node(<java.lang.String: boolean contains(java.lang.CharSequence)>,$stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2),2133,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack18 = $stack17[0]",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
					"line": 75
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 75
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 75
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 80
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean contains(java.lang.CharSequence)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean contains(java.lang.CharSequence)>",
	"line": 2133
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack20 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 80
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean contains(java.lang.CharSequence)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": 1718
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": 1718
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String)>",
	"line": 1698
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean contains(java.lang.CharSequence)>",
	"line": 2133
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean contains(java.lang.CharSequence)>",
					"line": 2133
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,$stack4 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>(),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack4 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>(), 326)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,$stack5 = virtualinvoke $stack4.<java.lang.Package: java.lang.String getName()>(),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack5 = virtualinvoke $stack4.<java.lang.Package: java.lang.String getName()>(), 326)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,$stack6 = virtualinvoke $stack5.<java.lang.String: int length()>(),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack6 = virtualinvoke $stack5.<java.lang.String: int length()>(), 326)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,$stack7 = $stack6 + 1,326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack7 = $stack6 + 1, 326)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7), 326)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327)) => Node(<java.lang.String: java.lang.String replace(char,char)>,$stack8 = l0.<java.lang.String: char[] value>,2068,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, $stack8 = l0.<java.lang.String: char[] value>, 2068)) SINK=>BASE: Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,$stack5 = virtualinvoke $stack4.<java.lang.Package: java.lang.String getName()>(),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack5 = virtualinvoke $stack4.<java.lang.Package: java.lang.String getName()>(), 326)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,$stack6 = virtualinvoke $stack5.<java.lang.String: int length()>(),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack6 = virtualinvoke $stack5.<java.lang.String: int length()>(), 326)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,$stack7 = $stack6 + 1,326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack7 = $stack6 + 1, 326)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7), 326)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327)) => Node(<java.lang.String: java.lang.String replace(char,char)>,$stack8 = l0.<java.lang.String: char[] value>,2068,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, $stack8 = l0.<java.lang.String: char[] value>, 2068)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l3 = lengthof $stack8,2068,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, l3 = lengthof $stack8, 2068))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack5 = virtualinvoke $stack4.<java.lang.Package: java.lang.String getName()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.util.ClassUtil",
					"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
					"line": 326
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2068
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2068
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack4 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.util.ClassUtil",
					"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
					"line": 326
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2068
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack8 = l0.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String replace(char,char)>",
					"line": 2068
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>(),325,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>(), 325)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7), 326)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327)) => Node(<java.lang.String: java.lang.String replace(char,char)>,$stack8 = l0.<java.lang.String: char[] value>,2068,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, $stack8 = l0.<java.lang.String: char[] value>, 2068)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l3 = lengthof $stack8,2068,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, l3 = lengthof $stack8, 2068)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l6 = newarray (char)[l3],2078,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, l6 = newarray (char)[l3], 2078)) => Node(<java.lang.String: java.lang.String replace(char,char)>,specialinvoke $stack10.<java.lang.String: void <init>(char[],boolean)>(l6, 1),2087,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, specialinvoke $stack10.<java.lang.String: void <init>(char[],boolean)>(l6, 1), 2087)) SINK=>BASE: Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>(),325,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>(), 325)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7), 326)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327)) => Node(<java.lang.String: java.lang.String replace(char,char)>,$stack8 = l0.<java.lang.String: char[] value>,2068,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, $stack8 = l0.<java.lang.String: char[] value>, 2068)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l3 = lengthof $stack8,2068,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, l3 = lengthof $stack8, 2068)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l6 = newarray (char)[l3],2078,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, l6 = newarray (char)[l3], 2078)) => Node(<java.lang.String: java.lang.String replace(char,char)>,specialinvoke $stack10.<java.lang.String: void <init>(char[],boolean)>(l6, 1),2087,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, specialinvoke $stack10.<java.lang.String: void <init>(char[],boolean)>(l6, 1), 2087))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.util.ClassUtil",
					"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
					"line": 325
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 325
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1933
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2068
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2068
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2078
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2087
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.util.ClassUtil",
					"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
					"line": 325
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 325
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2068
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2068
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2078
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2087
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke $stack10.<java.lang.String: void <init>(char[],boolean)>(l6, 1)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String replace(char,char)>",
					"line": 2087
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(),1309,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack15 = (java.lang.reflect.GenericArrayType) type,102,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack15 = (java.lang.reflect.GenericArrayType) type, 102)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(),102,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(),1309,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack15 = (java.lang.reflect.GenericArrayType) type",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 102
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 102
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 102
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1309
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1933
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
					"line": 70
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1309
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1933
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack5 = l0",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String substring(int)>",
					"line": 1933
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>(),325,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>(), 325)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7), 326)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l5 = l0.<java.lang.String: char[] value>,2070,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, l5 = l0.<java.lang.String: char[] value>, 2070)) => Node(<java.lang.String: java.lang.String replace(char,char)>,$stack16 = l5[l7],2080,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, $stack16 = l5[l7], 2080)) SINK=>BASE: Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>(),325,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>(), 325)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.String getSimpleName()>(), 51) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7),326,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7), 326)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327)) => Node(<java.lang.String: java.lang.String replace(char,char)>,l5 = l0.<java.lang.String: char[] value>,2070,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, l5 = l0.<java.lang.String: char[] value>, 2070)) => Node(<java.lang.String: java.lang.String replace(char,char)>,$stack16 = l5[l7],2080,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327) => (<java.lang.String: java.lang.String replace(char,char)>, $stack16 = l5[l7], 2080))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.util.ClassUtil",
					"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
					"line": 325
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 325
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1933
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2070
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2080
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>()",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.util.ClassUtil",
					"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
					"line": 325
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 325
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": 326
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2070
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String replace(char,char)>",
	"line": 2080
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack16 = l5[l7]",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String replace(char,char)>",
					"line": 2080
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,$stack8 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),848,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) SINK=>BASE: Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType),103,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>(),105,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13),111,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>,$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21),100,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30),70,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)) => Node(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)) => Node(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>,clazz := @parameter0: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49) => (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62) => (<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52) => (<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,$stack8 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),848,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, getters = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>(clazz), 47) => (<org.assertj.assertions.generator.util.ClassUtil: java.util.List getterMethodsOf(java.lang.Class)>, methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getMethods()>(), 270) => (<java.lang.Class: java.lang.reflect.Method[] getMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack2, 1), 1614) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 103
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 848
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
					"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
					"line": 111
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 100
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 103
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 105
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
	"line": 111
},{
	"class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
	"method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
	"line": 70
},{
	"class": "org.assertj.assertions.generator.description.TypeName",
	"method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
	"line": -1
},{
	"class": "org.assertj.assertions.generator.util.ClassUtil",
	"method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 848
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack8 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
					"line": 848
				}
			}
		]
	}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>()",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
  "line": "1235"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack22",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (java.lang.reflect.ParameterizedType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack20 = (java.lang.reflect.ParameterizedType) type, 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(), 100)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 112)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 == null goto $stack11 = null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "102"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack19",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 112)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 == null goto $stack11 = null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "71"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass), 71)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "53"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack4 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>(), 53)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 != null goto $stack5 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "53"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack34 = virtualinvoke propertyType.<java.lang.Class: java.lang.Class getComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "64"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack34 = virtualinvoke propertyType.<java.lang.Class: java.lang.Class getComponentType()>(), 64)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>()",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
  "line": "1235"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "53"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack4 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>(), 53)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 != null goto $stack5 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "53"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack19",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>('')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "45"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>(''), 45)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = type instanceof java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack3 = type instanceof java.lang.Class, 97)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack3 == 0 goto $stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack5 = type instanceof java.lang.reflect.GenericArrayType, 101)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack5 == 0 goto $stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = new org.assertj.assertions.generator.description.TypeDescription",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack9.<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>($stack10), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeDescription",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack9.<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>($stack10), 62)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.Object: void <init>()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>",
  "line": "53"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack9.<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>($stack10), 62)","(<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>, specialinvoke this.<java.lang.Object: void <init>()>(), 53)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack4 = type instanceof java.lang.reflect.ParameterizedType, 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 == 0 goto $stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack22",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack5 = type instanceof java.lang.reflect.GenericArrayType, 101)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack5 == 0 goto $stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType#2 = (java.lang.Class) $stack18",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "75"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "80"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack20 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>(), 80)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "80"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack21 == 0 goto virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setIterable(boolean)>(1)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "80"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack7 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>(), 111)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 == null goto $stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack32 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "71"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass), 71)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setElementTypeName(org.assertj.assertions.generator.description.TypeName)>($stack32)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "71"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setElementTypeName(org.assertj.assertions.generator.description.TypeName)>($stack32), 71)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "typeDescription = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setIterable(boolean)>(1)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "72"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setIterable(boolean)>(1), 72)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (java.lang.reflect.ParameterizedType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack20 = (java.lang.reflect.ParameterizedType) type, 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(), 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack19",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack23",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack11",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setTypeSimpleName(java.lang.String)>(typeName)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "44"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setTypeSimpleName(java.lang.String)>(typeName), 44)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "75"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack17 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = $stack17[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "75"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack18 = $stack17[0], 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "genericArrayType#2 = (java.lang.Class) $stack18",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "75"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack19.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(genericArrayType#2)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "76"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack19.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(genericArrayType#2), 76)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>(), 61)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "returnType := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 63)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = virtualinvoke returnType.<java.lang.Class: boolean isArray()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>",
  "line": "238"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 63)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>",
  "line": "238"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "typeDescription = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setElementTypeName(org.assertj.assertions.generator.description.TypeName)>($stack33)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "64"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setElementTypeName(org.assertj.assertions.generator.description.TypeName)>($stack33), 64)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "102"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack4 = type instanceof java.lang.reflect.ParameterizedType, 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 == 0 goto $stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack29 = $stack28[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack29 = $stack28[0], 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack7 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>(), 111)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 == null goto $stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = type instanceof java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack3 = type instanceof java.lang.Class, 97)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack3 == 0 goto $stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>()",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
  "line": "1235"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "53"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack4 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>(), 53)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 != null goto $stack5 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "53"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack11",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if componentClass == null goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "104"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack29 = $stack28[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack29 = $stack28[0], 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack6 = type instanceof java.lang.reflect.WildcardType, 109)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack19 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "76"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack19.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(genericArrayType#2), 76)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.Object: void <init>()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "50"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, specialinvoke this.<java.lang.Object: void <init>()>(), 50)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "typeName := @parameter0: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack9.<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>($stack10), 62)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if typeName != null goto this.<org.assertj.assertions.generator.description.TypeDescription: org.assertj.assertions.generator.description.TypeName typeName> = typeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>",
  "line": "54"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType#2 = (java.lang.Class) $stack18",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "75"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack24 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>($stack24, '[]')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>($stack24, '[]'), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "typeName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String substringBeforeLast(java.lang.String,java.lang.String)>(typeName, '.')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "41"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String substringBeforeLast(java.lang.String,java.lang.String)>(typeName, '.'), 41)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>($stack5)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "41"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>($stack5), 41)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack22",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>()",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
  "line": "1235"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "typeDescription = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setArray(boolean)>(1)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "82"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setArray(boolean)>(1), 82)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack12 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = $stack12[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack13 = $stack12[0], 111)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = type instanceof java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack3 = type instanceof java.lang.Class, 97)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack3 == 0 goto $stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack33 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "64"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack33.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>($stack34), 64)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.Object: void <init>()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "50"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, specialinvoke this.<java.lang.Object: void <init>()>(), 50)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>()",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
  "line": "1235"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>($stack24, '[]')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>($stack24, '[]'), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "typeName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>(typeName)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "38"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>(typeName), 38)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == 0 goto $stack3 = virtualinvoke typeName.<java.lang.String: boolean contains(java.lang.CharSequence)>('.')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "38"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack6 = type instanceof java.lang.reflect.WildcardType, 109)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack19",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack29 = $stack28[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack29 = $stack28[0], 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack5 = type instanceof java.lang.reflect.GenericArrayType, 101)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack5 == 0 goto $stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String substringBeforeLast(java.lang.String,java.lang.String)>(typeName, '.')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "41"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String substringBeforeLast(java.lang.String,java.lang.String)>(typeName, '.'), 41)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>($stack5)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "41"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>($stack5), 41)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack7 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>(), 111)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 == null goto $stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if componentClass == null goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "104"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack33 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "64"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack33.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>($stack34), 64)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack33.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>($stack34)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "64"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack33.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>($stack34), 64)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "102"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack5 = type instanceof java.lang.reflect.GenericArrayType, 101)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack5 == 0 goto $stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "102"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>()",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
  "line": "1235"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "71"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass), 71)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "typeDescription = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setArray(boolean)>(1)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "73"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setArray(boolean)>(1), 73)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType#2 = (java.lang.Class) $stack18",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "75"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack24 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>($stack24, '[]')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>($stack24, '[]'), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l8 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>",
  "line": "51"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, l8 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>(), 51)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "exception = l8[l10]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>",
  "line": "55"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, exception = l8[l10], 55)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>()",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
  "line": "1235"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "53"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack4 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>(), 53)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 != null goto $stack5 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "53"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (java.lang.reflect.ParameterizedType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack20 = (java.lang.reflect.ParameterizedType) type, 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(), 100)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack5 = type instanceof java.lang.reflect.GenericArrayType, 101)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack5 == 0 goto $stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "71"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass), 71)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = class 'Ljava/lang/Iterable;'",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>",
  "line": "234"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType), 66)","(<org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>, $stack2 = virtualinvoke $stack1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(returnType), 234)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(returnType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>",
  "line": "234"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType), 66)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>",
  "line": "234"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "66"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType), 66)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack12 == 0 goto return typeDescription",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "66"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "102"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack22",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = type instanceof java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack3 = type instanceof java.lang.Class, 97)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack3 == 0 goto $stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "typeDescription = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setIterable(boolean)>(1)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "85"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setIterable(boolean)>(1), 85)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "327"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "329"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "typeDescription = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setElementTypeName(org.assertj.assertions.generator.description.TypeName)>($stack32)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "71"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setElementTypeName(org.assertj.assertions.generator.description.TypeName)>($stack32), 71)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "63"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 63)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack11 == 0 goto $stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "63"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (java.lang.reflect.ParameterizedType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack20 = (java.lang.reflect.ParameterizedType) type, 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(), 100)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack7 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>(), 111)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 == null goto $stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>()",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
  "line": "1235"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "typeDescription = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setElementTypeName(org.assertj.assertions.generator.description.TypeName)>($stack19)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "76"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setElementTypeName(org.assertj.assertions.generator.description.TypeName)>($stack19), 76)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>($stack24, '[]')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>($stack24, '[]'), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "typeName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String substringBeforeLast(java.lang.String,java.lang.String)>(typeName, '.')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "41"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String substringBeforeLast(java.lang.String,java.lang.String)>(typeName, '.'), 41)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "packageName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>($stack5), 41)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if packageName != null goto $stack2 = packageName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>",
  "line": "114"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack4 = type instanceof java.lang.reflect.ParameterizedType, 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 == 0 goto $stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack12 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = $stack12[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack13 = $stack12[0], 111)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack5 = type instanceof java.lang.reflect.GenericArrayType, 101)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack5 == 0 goto $stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if componentClass == null goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "104"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType#2 = (java.lang.Class) $stack18",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "75"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack24 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>($stack24, '[]')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>($stack24, '[]'), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "typeName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setTypeSimpleName(java.lang.String)>(typeName)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "44"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setTypeSimpleName(java.lang.String)>(typeName), 44)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if componentClass == null goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "104"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = new java.lang.NullPointerException",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>",
  "line": "55"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack9.<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>($stack10), 62)","(<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>, specialinvoke $stack2.<java.lang.NullPointerException: void <init>(java.lang.String)>('typeName must not be null.'), 55)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack2.<java.lang.NullPointerException: void <init>(java.lang.String)>('typeName must not be null.')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>",
  "line": "55"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack9.<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>($stack10), 62)","(<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>, specialinvoke $stack2.<java.lang.NullPointerException: void <init>(java.lang.String)>('typeName must not be null.'), 55)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (java.lang.reflect.ParameterizedType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack20 = (java.lang.reflect.ParameterizedType) type, 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(), 100)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack6 = type instanceof java.lang.reflect.WildcardType, 109)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>($stack5)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "41"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>($stack5), 41)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "71"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass), 71)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "102"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack23",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setTypeSimpleName(java.lang.String)>($stack4)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "40"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setTypeSimpleName(java.lang.String)>($stack4), 40)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String substringAfterLast(java.lang.String,java.lang.String)>(typeName, '.')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "40"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String substringAfterLast(java.lang.String,java.lang.String)>(typeName, '.'), 40)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setTypeSimpleName(java.lang.String)>($stack4)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "40"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setTypeSimpleName(java.lang.String)>($stack4), 40)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack11",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = type instanceof java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack3 = type instanceof java.lang.Class, 97)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack3 == 0 goto $stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (java.lang.reflect.ParameterizedType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack20 = (java.lang.reflect.ParameterizedType) type, 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(), 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if componentClass == null goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "104"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "53"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack4 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>(), 53)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 != null goto $stack5 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "53"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType#2 = (java.lang.Class) $stack18",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "75"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack24 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>($stack24, '[]')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>($stack24, '[]'), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "typeName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String substringBeforeLast(java.lang.String,java.lang.String)>(typeName, '.')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "41"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String substringBeforeLast(java.lang.String,java.lang.String)>(typeName, '.'), 41)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "packageName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>($stack5), 41)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if packageName != null goto $stack2 = packageName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>",
  "line": "114"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "53"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack4 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>(), 53)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 != null goto $stack5 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "53"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "nestedClassName = null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "323"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "329"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType#2 = (java.lang.Class) $stack18",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "75"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>()",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
  "line": "1235"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (java.lang.reflect.ParameterizedType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack20 = (java.lang.reflect.ParameterizedType) type, 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(), 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>()",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
  "line": "1235"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack22",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>(), 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "66"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType), 66)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack12 == 0 goto return typeDescription",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "66"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType#2 = (java.lang.Class) $stack18",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "75"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack24 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>($stack24, '[]')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>($stack24, '[]'), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "typeName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke typeName.<java.lang.String: boolean contains(java.lang.CharSequence)>('.')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "39"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, $stack3 = virtualinvoke typeName.<java.lang.String: boolean contains(java.lang.CharSequence)>('.'), 39)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack3 == 0 goto specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setTypeSimpleName(java.lang.String)>(typeName)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "39"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>(), 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "63"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 63)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack11 == 0 goto $stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "63"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack4 = type instanceof java.lang.reflect.ParameterizedType, 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 == 0 goto $stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "102"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "71"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass), 71)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "68"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack14 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 68)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack15 = $stack14[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "68"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack15 = $stack14[0], 68)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = $stack15 instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "68"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack16 = $stack15 instanceof java.lang.reflect.GenericArrayType, 68)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack16 == 0 goto $stack17 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "68"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setElementTypeName(org.assertj.assertions.generator.description.TypeName)>($stack23)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setElementTypeName(org.assertj.assertions.generator.description.TypeName)>($stack23), 81)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack4 = type instanceof java.lang.reflect.ParameterizedType, 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 == 0 goto $stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack23",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack12 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = $stack12[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack13 = $stack12[0], 111)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 112)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 == null goto $stack11 = null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack6 = type instanceof java.lang.reflect.WildcardType, 109)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType#2 = (java.lang.Class) $stack18",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "75"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack24 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>($stack24, '[]')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>($stack24, '[]'), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "typeName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String substringAfterLast(java.lang.String,java.lang.String)>(typeName, '.')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "40"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String substringAfterLast(java.lang.String,java.lang.String)>(typeName, '.'), 40)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setTypeSimpleName(java.lang.String)>($stack4)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "40"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setTypeSimpleName(java.lang.String)>($stack4), 40)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (java.lang.reflect.ParameterizedType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack20 = (java.lang.reflect.ParameterizedType) type, 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(), 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "71"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass), 71)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if componentClass == null goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "104"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack23",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>(), 61)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "returnType := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType), 66)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(returnType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>",
  "line": "234"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType), 66)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>",
  "line": "234"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "102"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = type instanceof java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack3 = type instanceof java.lang.Class, 97)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack3 == 0 goto $stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "71"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass), 71)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>(typeName)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "38"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>(typeName), 38)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == 0 goto $stack3 = virtualinvoke typeName.<java.lang.String: boolean contains(java.lang.CharSequence)>('.')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "38"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack19",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>(), 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack34 = virtualinvoke propertyType.<java.lang.Class: java.lang.Class getComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "64"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack34 = virtualinvoke propertyType.<java.lang.Class: java.lang.Class getComponentType()>(), 64)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack33.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>($stack34)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "64"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack33.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>($stack34), 64)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>()",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
  "line": "1235"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>(), 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack34 = virtualinvoke propertyType.<java.lang.Class: java.lang.Class getComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "64"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack34 = virtualinvoke propertyType.<java.lang.Class: java.lang.Class getComponentType()>(), 64)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>()",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
  "line": "1235"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack29 = $stack28[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack29 = $stack28[0], 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 112)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 == null goto $stack11 = null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = virtualinvoke returnType.<java.lang.Class: boolean isArray()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>",
  "line": "238"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 63)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>",
  "line": "238"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = class 'Ljava/lang/Iterable;'",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>",
  "line": "234"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType), 66)","(<org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>, $stack2 = virtualinvoke $stack1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(returnType), 234)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(returnType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>",
  "line": "234"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType), 66)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "66"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType), 66)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack12 == 0 goto return typeDescription",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "66"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType#2 = (java.lang.Class) $stack18",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "75"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack19.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(genericArrayType#2)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "76"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack19.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(genericArrayType#2), 76)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = new java.lang.IllegalArgumentException",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "47"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, specialinvoke $stack6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>('type name should not be blank or null'), 47)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>('type name should not be blank or null')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "47"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, specialinvoke $stack6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>('type name should not be blank or null'), 47)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.Object: void <init>()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "37"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Object: void <init>()>(), 37)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "102"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if componentClass == null goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "104"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (java.lang.reflect.ParameterizedType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack20 = (java.lang.reflect.ParameterizedType) type, 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(), 100)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack4 = type instanceof java.lang.reflect.ParameterizedType, 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 == 0 goto $stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack6 = type instanceof java.lang.reflect.WildcardType, 109)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack12 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = $stack12[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack13 = $stack12[0], 111)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack4 = type instanceof java.lang.reflect.ParameterizedType, 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 == 0 goto $stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (java.lang.reflect.ParameterizedType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack20 = (java.lang.reflect.ParameterizedType) type, 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(), 100)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack23",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "typeDescription = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setArray(boolean)>(1)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "65"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setArray(boolean)>(1), 65)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "325"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>(), 325)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "326"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7), 326)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String replace(char,char)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "327"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "329"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 112)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 == null goto $stack11 = null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = $stack6 + 1",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "326"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack7 = $stack6 + 1, 326)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "326"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7), 326)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String replace(char,char)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "327"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "329"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack5 = type instanceof java.lang.reflect.GenericArrayType, 101)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack5 == 0 goto $stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 112)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 == null goto $stack11 = null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>()",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
  "line": "1235"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 112)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 == null goto $stack11 = null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "102"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack6 = type instanceof java.lang.reflect.WildcardType, 109)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack29 = $stack28[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack29 = $stack28[0], 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "71"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass), 71)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack24 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>",
  "line": "52"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, specialinvoke $stack24.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(exception), 52)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.Object: void <init>()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "50"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, specialinvoke this.<java.lang.Object: void <init>()>(), 50)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = virtualinvoke returnType.<java.lang.Class: boolean isArray()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>",
  "line": "238"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 63)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "63"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 63)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack11 == 0 goto $stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "63"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack32 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "71"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass), 71)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.Object: void <init>()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "50"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, specialinvoke this.<java.lang.Object: void <init>()>(), 50)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "102"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 112)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 == null goto $stack11 = null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "80"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack21 == 0 goto virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setIterable(boolean)>(1)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "80"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack11",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack5 = type instanceof java.lang.reflect.GenericArrayType, 101)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack5 == 0 goto $stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack15 = $stack14[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "68"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack15 = $stack14[0], 68)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = $stack15 instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "68"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack16 = $stack15 instanceof java.lang.reflect.GenericArrayType, 68)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack16 == 0 goto $stack17 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "68"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType#2 = (java.lang.Class) $stack18",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "75"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack24 = virtualinvoke genericArrayType#2.<java.lang.Class: java.lang.String getSimpleName()>(), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>($stack24, '[]')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>($stack24, '[]'), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "typeName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>(typeName)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "38"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>(typeName), 38)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == 0 goto $stack3 = virtualinvoke typeName.<java.lang.String: boolean contains(java.lang.CharSequence)>('.')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "38"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack19",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "71"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass), 71)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String substringBeforeLast(java.lang.String,java.lang.String)>(typeName, '.')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "41"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String substringBeforeLast(java.lang.String,java.lang.String)>(typeName, '.'), 41)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "packageName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>($stack5), 41)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if packageName != null goto $stack2 = packageName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>",
  "line": "114"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack29 = $stack28[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack29 = $stack28[0], 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = type instanceof java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack3 = type instanceof java.lang.Class, 97)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack3 == 0 goto $stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack6 = type instanceof java.lang.reflect.WildcardType, 109)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack12 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = $stack12[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack13 = $stack12[0], 111)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack23",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.Object: void <init>()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "50"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, specialinvoke this.<java.lang.Object: void <init>()>(), 50)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke typeName.<java.lang.String: boolean contains(java.lang.CharSequence)>('.')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "39"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, $stack3 = virtualinvoke typeName.<java.lang.String: boolean contains(java.lang.CharSequence)>('.'), 39)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack3 == 0 goto specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setTypeSimpleName(java.lang.String)>(typeName)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "39"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "typeDescription = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return typeDescription",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "87"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack29 = $stack28[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack29 = $stack28[0], 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack4 = type instanceof java.lang.reflect.ParameterizedType, 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 == 0 goto $stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "typeDescription = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setElementTypeName(org.assertj.assertions.generator.description.TypeName)>($stack23)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setElementTypeName(org.assertj.assertions.generator.description.TypeName)>($stack23), 81)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack19 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "76"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack19.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(genericArrayType#2), 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack19.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(genericArrayType#2)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "76"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack19.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(genericArrayType#2), 76)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack29 = $stack28[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack29 = $stack28[0], 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>()",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
  "line": "1235"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack29 = $stack28[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack29 = $stack28[0], 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack23",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "102"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack7 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>(), 111)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 == null goto $stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (java.lang.reflect.ParameterizedType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack20 = (java.lang.reflect.ParameterizedType) type, 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(), 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack22",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack7 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>(), 111)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 == null goto $stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (java.lang.reflect.ParameterizedType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack20 = (java.lang.reflect.ParameterizedType) type, 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(), 100)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = type instanceof java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack3 = type instanceof java.lang.Class, 97)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack3 == 0 goto $stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack12 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = $stack12[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack13 = $stack12[0], 111)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack6 = type instanceof java.lang.reflect.WildcardType, 109)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>(), 61)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "71"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass), 71)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack23",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>($stack24, '[]')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>($stack24, '[]'), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "typeName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke typeName.<java.lang.String: boolean contains(java.lang.CharSequence)>('.')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "39"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, $stack3 = virtualinvoke typeName.<java.lang.String: boolean contains(java.lang.CharSequence)>('.'), 39)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack3 == 0 goto specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setTypeSimpleName(java.lang.String)>(typeName)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "39"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack22",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack19",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": [""]
}]
}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack22",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (java.lang.reflect.ParameterizedType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack20 = (java.lang.reflect.ParameterizedType) type, 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(), 100)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 112)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 == null goto $stack11 = null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "102"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack19",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 112)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 == null goto $stack11 = null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "71"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass), 71)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack19",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>('')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "45"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>(''), 45)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = type instanceof java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack3 = type instanceof java.lang.Class, 97)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack3 == 0 goto $stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack5 = type instanceof java.lang.reflect.GenericArrayType, 101)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack5 == 0 goto $stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>",
  "line": "49"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack20.<org.assertj.assertions.generator.description.GetterDescription: void <init>(java.lang.String,org.assertj.assertions.generator.description.TypeDescription,java.util.List)>($stack21, typeDescription, exceptions)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>",
  "line": "54"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, specialinvoke $stack20.<org.assertj.assertions.generator.description.GetterDescription: void <init>(java.lang.String,org.assertj.assertions.generator.description.TypeDescription,java.util.List)>($stack21, typeDescription, exceptions), 54)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = new org.assertj.assertions.generator.description.TypeDescription",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack9.<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>($stack10), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeDescription",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack9.<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>($stack10), 62)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.Object: void <init>()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>",
  "line": "53"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack9.<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>($stack10), 62)","(<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>, specialinvoke this.<java.lang.Object: void <init>()>(), 53)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack4 = type instanceof java.lang.reflect.ParameterizedType, 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 == 0 goto $stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack22",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack5 = type instanceof java.lang.reflect.GenericArrayType, 101)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack5 == 0 goto $stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack7 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>(), 111)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 == null goto $stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack32 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "71"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass), 71)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setElementTypeName(org.assertj.assertions.generator.description.TypeName)>($stack32)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "71"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setElementTypeName(org.assertj.assertions.generator.description.TypeName)>($stack32), 71)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "typeDescription = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setIterable(boolean)>(1)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "72"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setIterable(boolean)>(1), 72)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (java.lang.reflect.ParameterizedType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack20 = (java.lang.reflect.ParameterizedType) type, 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(), 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack19",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack23",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack11",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setTypeSimpleName(java.lang.String)>(typeName)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "44"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setTypeSimpleName(java.lang.String)>(typeName), 44)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "75"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack17 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = $stack17[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "75"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack18 = $stack17[0], 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "genericArrayType#2 = (java.lang.Class) $stack18",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "75"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack19.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(genericArrayType#2)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "76"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack19.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(genericArrayType#2), 76)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>(), 61)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "returnType := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 63)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = virtualinvoke returnType.<java.lang.Class: boolean isArray()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>",
  "line": "238"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 63)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>",
  "line": "238"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "typeDescription = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setElementTypeName(org.assertj.assertions.generator.description.TypeName)>($stack33)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "64"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setElementTypeName(org.assertj.assertions.generator.description.TypeName)>($stack33), 64)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "102"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack4 = type instanceof java.lang.reflect.ParameterizedType, 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 == 0 goto $stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack29 = $stack28[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack29 = $stack28[0], 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack7 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>(), 111)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 == null goto $stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (java.lang.reflect.ParameterizedType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack20 = (java.lang.reflect.ParameterizedType) type, 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(), 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = type instanceof java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack3 = type instanceof java.lang.Class, 97)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack3 == 0 goto $stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack11",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if componentClass == null goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "104"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack29 = $stack28[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack29 = $stack28[0], 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack6 = type instanceof java.lang.reflect.WildcardType, 109)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack19 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "76"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack19.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(genericArrayType#2), 76)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.Object: void <init>()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "50"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, specialinvoke this.<java.lang.Object: void <init>()>(), 50)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType#2 = (java.lang.Class) $stack18",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "75"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack22",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "typeDescription = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setArray(boolean)>(1)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "82"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setArray(boolean)>(1), 82)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack12 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = $stack12[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack13 = $stack12[0], 111)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = type instanceof java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack3 = type instanceof java.lang.Class, 97)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack3 == 0 goto $stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack33 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "64"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack33.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>($stack34), 64)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.Object: void <init>()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "50"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, specialinvoke this.<java.lang.Object: void <init>()>(), 50)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>($stack24, '[]')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>($stack24, '[]'), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "typeName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>(typeName)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "38"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>(typeName), 38)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == 0 goto $stack3 = virtualinvoke typeName.<java.lang.String: boolean contains(java.lang.CharSequence)>('.')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "38"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack6 = type instanceof java.lang.reflect.WildcardType, 109)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack19",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack29 = $stack28[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack29 = $stack28[0], 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack5 = type instanceof java.lang.reflect.GenericArrayType, 101)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack5 == 0 goto $stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String substringBeforeLast(java.lang.String,java.lang.String)>(typeName, '.')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "41"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String substringBeforeLast(java.lang.String,java.lang.String)>(typeName, '.'), 41)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>($stack5)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "41"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>($stack5), 41)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack7 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>(), 111)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 == null goto $stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if componentClass == null goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "104"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack33 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "64"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack33.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>($stack34), 64)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack33.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>($stack34)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "64"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack33.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>($stack34), 64)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "102"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack5 = type instanceof java.lang.reflect.GenericArrayType, 101)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack5 == 0 goto $stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "71"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass), 71)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "typeDescription = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setArray(boolean)>(1)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "73"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setArray(boolean)>(1), 73)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (java.lang.reflect.ParameterizedType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack20 = (java.lang.reflect.ParameterizedType) type, 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(), 100)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack5 = type instanceof java.lang.reflect.GenericArrayType, 101)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack5 == 0 goto $stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "71"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass), 71)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = class 'Ljava/lang/Iterable;'",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>",
  "line": "234"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType), 66)","(<org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>, $stack2 = virtualinvoke $stack1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(returnType), 234)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(returnType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>",
  "line": "234"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType), 66)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>",
  "line": "234"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "66"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType), 66)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack12 == 0 goto return typeDescription",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "66"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "102"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack22",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = type instanceof java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack3 = type instanceof java.lang.Class, 97)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack3 == 0 goto $stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "typeDescription = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setIterable(boolean)>(1)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "85"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setIterable(boolean)>(1), 85)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "327"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "329"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "typeDescription = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setElementTypeName(org.assertj.assertions.generator.description.TypeName)>($stack32)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "71"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setElementTypeName(org.assertj.assertions.generator.description.TypeName)>($stack32), 71)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "63"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 63)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack11 == 0 goto $stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "63"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (java.lang.reflect.ParameterizedType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack20 = (java.lang.reflect.ParameterizedType) type, 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(), 100)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack7 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>(), 111)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 == null goto $stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "typeDescription = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setElementTypeName(org.assertj.assertions.generator.description.TypeName)>($stack19)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "76"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setElementTypeName(org.assertj.assertions.generator.description.TypeName)>($stack19), 76)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>($stack24, '[]')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>($stack24, '[]'), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "typeName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String substringBeforeLast(java.lang.String,java.lang.String)>(typeName, '.')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "41"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String substringBeforeLast(java.lang.String,java.lang.String)>(typeName, '.'), 41)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "packageName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>($stack5), 41)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if packageName != null goto $stack2 = packageName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>",
  "line": "114"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack4 = type instanceof java.lang.reflect.ParameterizedType, 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 == 0 goto $stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack12 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = $stack12[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack13 = $stack12[0], 111)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack5 = type instanceof java.lang.reflect.GenericArrayType, 101)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack5 == 0 goto $stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if componentClass == null goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "104"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if componentClass == null goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "104"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "102"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = new java.lang.NullPointerException",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>",
  "line": "55"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack9.<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>($stack10), 62)","(<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>, specialinvoke $stack2.<java.lang.NullPointerException: void <init>(java.lang.String)>('typeName must not be null.'), 55)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack2.<java.lang.NullPointerException: void <init>(java.lang.String)>('typeName must not be null.')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeDescription",
  "method": "<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>",
  "line": "55"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack9.<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>($stack10), 62)","(<org.assertj.assertions.generator.description.TypeDescription: void <init>(org.assertj.assertions.generator.description.TypeName)>, specialinvoke $stack2.<java.lang.NullPointerException: void <init>(java.lang.String)>('typeName must not be null.'), 55)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (java.lang.reflect.ParameterizedType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack20 = (java.lang.reflect.ParameterizedType) type, 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(), 100)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack6 = type instanceof java.lang.reflect.WildcardType, 109)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>($stack5)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "41"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>($stack5), 41)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "typeDescription = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>",
  "line": "49"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack20.<org.assertj.assertions.generator.description.GetterDescription: void <init>(java.lang.String,org.assertj.assertions.generator.description.TypeDescription,java.util.List)>($stack21, typeDescription, exceptions)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>",
  "line": "54"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, specialinvoke $stack20.<org.assertj.assertions.generator.description.GetterDescription: void <init>(java.lang.String,org.assertj.assertions.generator.description.TypeDescription,java.util.List)>($stack21, typeDescription, exceptions), 54)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "71"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass), 71)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "102"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack23",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setTypeSimpleName(java.lang.String)>($stack4)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "40"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setTypeSimpleName(java.lang.String)>($stack4), 40)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String substringAfterLast(java.lang.String,java.lang.String)>(typeName, '.')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "40"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String substringAfterLast(java.lang.String,java.lang.String)>(typeName, '.'), 40)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setTypeSimpleName(java.lang.String)>($stack4)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "40"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setTypeSimpleName(java.lang.String)>($stack4), 40)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack11",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = type instanceof java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack3 = type instanceof java.lang.Class, 97)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack3 == 0 goto $stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (java.lang.reflect.ParameterizedType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack20 = (java.lang.reflect.ParameterizedType) type, 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(), 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if componentClass == null goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "104"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "53"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack4 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>(), 53)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 != null goto $stack5 = virtualinvoke clazz.<java.lang.Class: java.lang.Package getPackage()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "53"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "nestedClassName = null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "323"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "329"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack22",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>(), 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "66"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType), 66)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack12 == 0 goto return typeDescription",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "66"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack4 = type instanceof java.lang.reflect.ParameterizedType, 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 == 0 goto $stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "102"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "71"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass), 71)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "68"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack14 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 68)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack15 = $stack14[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "68"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack15 = $stack14[0], 68)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = $stack15 instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "68"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack16 = $stack15 instanceof java.lang.reflect.GenericArrayType, 68)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack16 == 0 goto $stack17 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "68"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setElementTypeName(org.assertj.assertions.generator.description.TypeName)>($stack23)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setElementTypeName(org.assertj.assertions.generator.description.TypeName)>($stack23), 81)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack4 = type instanceof java.lang.reflect.ParameterizedType, 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 == 0 goto $stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack23",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack12 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = $stack12[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack13 = $stack12[0], 111)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 112)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 == null goto $stack11 = null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack6 = type instanceof java.lang.reflect.WildcardType, 109)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>(), 61)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "returnType := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 63)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = virtualinvoke returnType.<java.lang.Class: boolean isArray()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>",
  "line": "238"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 63)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "63"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 63)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack11 == 0 goto $stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "63"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (java.lang.reflect.ParameterizedType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack20 = (java.lang.reflect.ParameterizedType) type, 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(), 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "71"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass), 71)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if componentClass == null goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "104"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack23",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>(), 61)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "returnType := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType), 66)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(returnType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>",
  "line": "234"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType), 66)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>",
  "line": "234"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "102"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = type instanceof java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack3 = type instanceof java.lang.Class, 97)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack3 == 0 goto $stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "71"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass), 71)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>(typeName)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "38"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>(typeName), 38)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == 0 goto $stack3 = virtualinvoke typeName.<java.lang.String: boolean contains(java.lang.CharSequence)>('.')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "38"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack19",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>(), 61)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack34 = virtualinvoke propertyType.<java.lang.Class: java.lang.Class getComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "64"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack34 = virtualinvoke propertyType.<java.lang.Class: java.lang.Class getComponentType()>(), 64)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack33.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>($stack34)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "64"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack33.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>($stack34), 64)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack29 = $stack28[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack29 = $stack28[0], 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 112)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 == null goto $stack11 = null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = virtualinvoke returnType.<java.lang.Class: boolean isArray()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>",
  "line": "238"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 63)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>",
  "line": "238"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = class 'Ljava/lang/Iterable;'",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>",
  "line": "234"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType), 66)","(<org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>, $stack2 = virtualinvoke $stack1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(returnType), 234)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(returnType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>",
  "line": "234"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType), 66)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "66"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType), 66)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack12 == 0 goto return typeDescription",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "66"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType#2 = (java.lang.Class) $stack18",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "75"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType#2 = (java.lang.Class) $stack18, 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack19.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(genericArrayType#2)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "76"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack19.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(genericArrayType#2), 76)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = new java.lang.IllegalArgumentException",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "47"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, specialinvoke $stack6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>('type name should not be blank or null'), 47)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>('type name should not be blank or null')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "47"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, specialinvoke $stack6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>('type name should not be blank or null'), 47)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.Object: void <init>()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "37"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Object: void <init>()>(), 37)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "102"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if componentClass == null goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "104"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (java.lang.reflect.ParameterizedType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack20 = (java.lang.reflect.ParameterizedType) type, 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(), 100)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack4 = type instanceof java.lang.reflect.ParameterizedType, 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 == 0 goto $stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack6 = type instanceof java.lang.reflect.WildcardType, 109)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack12 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = $stack12[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack13 = $stack12[0], 111)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack4 = type instanceof java.lang.reflect.ParameterizedType, 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 == 0 goto $stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (java.lang.reflect.ParameterizedType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack20 = (java.lang.reflect.ParameterizedType) type, 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(), 100)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack23",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "typeDescription = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setArray(boolean)>(1)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "65"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setArray(boolean)>(1), 65)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "325"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke clazz.<java.lang.Class: java.lang.String getName()>(), 325)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "326"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7), 326)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String replace(char,char)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "327"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "329"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 112)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 == null goto $stack11 = null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = $stack6 + 1",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "326"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack7 = $stack6 + 1, 326)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "326"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String substring(int)>($stack7), 326)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String replace(char,char)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46), 327)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "nestedClassName = virtualinvoke nestedClassName.<java.lang.String: java.lang.String replace(char,char)>(36, 46)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "327"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "329"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack5 = type instanceof java.lang.reflect.GenericArrayType, 101)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack5 == 0 goto $stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 112)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 == null goto $stack11 = null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 112)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 == null goto $stack11 = null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "102"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack6 = type instanceof java.lang.reflect.WildcardType, 109)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack29 = $stack28[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack29 = $stack28[0], 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "71"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass), 71)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = virtualinvoke returnType.<java.lang.Class: boolean isArray()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>",
  "line": "238"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 63)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "63"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 63)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack11 == 0 goto $stack12 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "63"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack32 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "71"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass), 71)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.Object: void <init>()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "50"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, specialinvoke this.<java.lang.Object: void <init>()>(), 50)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "102"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 112)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 == null goto $stack11 = null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "112"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "80"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack21 = virtualinvoke $stack20.<java.lang.String: boolean contains(java.lang.CharSequence)>('[]'), 80)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack21 == 0 goto virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setIterable(boolean)>(1)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "80"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack11",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack5 = type instanceof java.lang.reflect.GenericArrayType, 101)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack5 == 0 goto $stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "101"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>(), 61)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack34 = virtualinvoke propertyType.<java.lang.Class: java.lang.Class getComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "64"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack34 = virtualinvoke propertyType.<java.lang.Class: java.lang.Class getComponentType()>(), 64)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack15 = $stack14[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "68"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack15 = $stack14[0], 68)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = $stack15 instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "68"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack16 = $stack15 instanceof java.lang.reflect.GenericArrayType, 68)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack16 == 0 goto $stack17 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "68"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack19",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "71"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass), 71)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String substringBeforeLast(java.lang.String,java.lang.String)>(typeName, '.')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "41"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String substringBeforeLast(java.lang.String,java.lang.String)>(typeName, '.'), 41)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "packageName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>($stack5), 41)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if packageName != null goto $stack2 = packageName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void setPackageName(java.lang.String)>",
  "line": "114"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack29 = $stack28[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack29 = $stack28[0], 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = type instanceof java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack3 = type instanceof java.lang.Class, 97)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack3 == 0 goto $stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack6 = type instanceof java.lang.reflect.WildcardType, 109)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>",
  "line": "49"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "typeDescription := @parameter1: org.assertj.assertions.generator.description.TypeDescription",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: void <init>(java.lang.String,org.assertj.assertions.generator.description.TypeDescription,java.util.List)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, specialinvoke $stack20.<org.assertj.assertions.generator.description.GetterDescription: void <init>(java.lang.String,org.assertj.assertions.generator.description.TypeDescription,java.util.List)>($stack21, typeDescription, exceptions), 54)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription> = typeDescription",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: void <init>(java.lang.String,org.assertj.assertions.generator.description.TypeDescription,java.util.List)>",
  "line": "48"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, specialinvoke $stack20.<org.assertj.assertions.generator.description.GetterDescription: void <init>(java.lang.String,org.assertj.assertions.generator.description.TypeDescription,java.util.List)>($stack21, typeDescription, exceptions), 54)","(<org.assertj.assertions.generator.description.GetterDescription: void <init>(java.lang.String,org.assertj.assertions.generator.description.TypeDescription,java.util.List)>, this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription> = typeDescription, 48)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack12 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = $stack12[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack13 = $stack12[0], 111)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack23",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.Object: void <init>()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "50"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, specialinvoke this.<java.lang.Object: void <init>()>(), 50)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke typeName.<java.lang.String: boolean contains(java.lang.CharSequence)>('.')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "39"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, $stack3 = virtualinvoke typeName.<java.lang.String: boolean contains(java.lang.CharSequence)>('.'), 39)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack3 == 0 goto specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setTypeSimpleName(java.lang.String)>(typeName)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "39"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "typeDescription = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return typeDescription",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "87"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack29 = $stack28[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack29 = $stack28[0], 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack4 = type instanceof java.lang.reflect.ParameterizedType, 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 == 0 goto $stack5 = type instanceof java.lang.reflect.GenericArrayType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "typeDescription = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setElementTypeName(org.assertj.assertions.generator.description.TypeName)>($stack23)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, virtualinvoke typeDescription.<org.assertj.assertions.generator.description.TypeDescription: void setElementTypeName(org.assertj.assertions.generator.description.TypeName)>($stack23), 81)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack19 = new org.assertj.assertions.generator.description.TypeName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "76"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack19.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(genericArrayType#2), 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack19.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(genericArrayType#2)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "76"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack19.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(genericArrayType#2), 76)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack29 = $stack28[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack29 = $stack28[0], 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "clazz := @parameter0: java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>, $stack3 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>(clazz), 52)","(<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>, $stack2 = virtualinvoke clazz.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 324)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == null goto return nestedClassName",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.util.ClassUtil",
  "method": "<org.assertj.assertions.generator.util.ClassUtil: java.lang.String getSimpleNameWithOuterClass(java.lang.Class)>",
  "line": "324"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "typeDescription = $stack9",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>",
  "line": "49"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "typeDescription := @parameter1: org.assertj.assertions.generator.description.TypeDescription",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: void <init>(java.lang.String,org.assertj.assertions.generator.description.TypeDescription,java.util.List)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, specialinvoke $stack20.<org.assertj.assertions.generator.description.GetterDescription: void <init>(java.lang.String,org.assertj.assertions.generator.description.TypeDescription,java.util.List)>($stack21, typeDescription, exceptions), 54)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription> = typeDescription",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.GetterDescription",
  "method": "<org.assertj.assertions.generator.description.GetterDescription: void <init>(java.lang.String,org.assertj.assertions.generator.description.TypeDescription,java.util.List)>",
  "line": "48"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, specialinvoke $stack20.<org.assertj.assertions.generator.description.GetterDescription: void <init>(java.lang.String,org.assertj.assertions.generator.description.TypeDescription,java.util.List)>($stack21, typeDescription, exceptions), 54)","(<org.assertj.assertions.generator.description.GetterDescription: void <init>(java.lang.String,org.assertj.assertions.generator.description.TypeDescription,java.util.List)>, this.<org.assertj.assertions.generator.description.GetterDescription: org.assertj.assertions.generator.description.TypeDescription typeDescription> = typeDescription, 48)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack13 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterizedType = (java.lang.reflect.ParameterizedType) $stack13",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "67"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack13, 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack28 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack29 = $stack28[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack29 = $stack28[0], 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack23",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "102"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType = interfaceinvoke $stack15.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 102)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack7 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>(), 111)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 == null goto $stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (java.lang.reflect.ParameterizedType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack20 = (java.lang.reflect.ParameterizedType) type, 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(), 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack22",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack7 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>(), 111)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 == null goto $stack8 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (java.lang.reflect.ParameterizedType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack20 = (java.lang.reflect.ParameterizedType) type, 100)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack21 = interfaceinvoke $stack20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>(), 100)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = type instanceof java.lang.Class",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack3 = type instanceof java.lang.Class, 97)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack3 == 0 goto $stack4 = type instanceof java.lang.reflect.ParameterizedType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "97"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack12 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = $stack12[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack13 = $stack12[0], 111)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = type instanceof java.lang.reflect.WildcardType",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack6 = type instanceof java.lang.reflect.WildcardType, 109)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto return null",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "109"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "61"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, propertyType = virtualinvoke getter.<java.lang.reflect.Method: java.lang.Class getReturnType()>(), 61)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "62"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack10.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(propertyType), 62)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "genericArrayType = (java.lang.reflect.GenericArrayType) $stack29",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "69"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack29, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "71"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack32.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(parameterClass), 71)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "70"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack30 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "type := @parameter0: java.lang.reflect.Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = (java.lang.Class) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack23",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "98"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>($stack24, '[]')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>",
  "line": "81"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, $stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>($stack24, '[]'), 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "typeName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke typeName.<java.lang.String: boolean contains(java.lang.CharSequence)>('.')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "39"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, specialinvoke $stack23.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>($stack25), 81)","(<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>, $stack3 = virtualinvoke typeName.<java.lang.String: boolean contains(java.lang.CharSequence)>('.'), 39)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack3 == 0 goto specialinvoke this.<org.assertj.assertions.generator.description.TypeName: void setTypeSimpleName(java.lang.String)>(typeName)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.TypeName",
  "method": "<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.String)>",
  "line": "39"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentType#2 = (java.lang.reflect.WildcardType) type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "110"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentType#2 = (java.lang.reflect.WildcardType) type, 110)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack9 = interfaceinvoke componentType#2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = $stack9[0]",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack10 = $stack9[0], 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "111"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack21)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack22",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "100"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "103"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, componentClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>(componentType), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>, $stack18 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(componentClass, 0), 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": ["(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getterDescriptionsOf(java.lang.Class)>, typeDescription = virtualinvoke this.<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>(clazz, getter), 49)","(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.Class,java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>($stack30), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack19",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter",
  "method": "<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.lang.Class getClass(java.lang.reflect.Type)>",
  "line": "105"
},
"stackTrace": [""]
}]
}
}

]
