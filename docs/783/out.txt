List(Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>,$stack5 = this.<com.mitchellbosecke.pebble.lexer.TemplateSource: int offset>,197,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>, $stack5 = this.<com.mitchellbosecke.pebble.lexer.TemplateSource: int offset>, 197)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>,$stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>($stack6, $stack5, $stack4),197,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>, $stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>($stack6, $stack5, $stack4), 197)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>, specialinvoke $stack2.<java.lang.String: void <init>(char[])>($stack7), 197)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>, specialinvoke $stack2.<java.lang.String: void <init>(char[])>($stack7), 197) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>,$stack2 = new java.lang.String,197,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = virtualinvoke $stack58.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack59),496,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack58.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack59), 496)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,$stack5 = virtualinvoke str.<java.lang.String: int length()>(),526,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, $stack5 = virtualinvoke str.<java.lang.String: int length()>(), 526)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,$stack6 = $stack5 - 1,526,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, $stack6 = $stack5 - 1, 526)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str#2 = virtualinvoke str.<java.lang.String: java.lang.String substring(int,int)>(1, $stack6),526,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str#2 = virtualinvoke str#2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\(\')", "$1"),530,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack16),443,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack16), 443)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack133 = virtualinvoke matcher.<java.util.regex.Matcher: int end()>(),447,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack133 = virtualinvoke matcher.<java.util.regex.Matcher: int end()>(), 447)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,virtualinvoke $stack132.<com.mitchellbosecke.pebble.lexer.TemplateSource: void advance(int)>($stack133),447,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, virtualinvoke $stack132.<com.mitchellbosecke.pebble.lexer.TemplateSource: void advance(int)>($stack133), 447)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack16),443,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack16), 443)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack133 = virtualinvoke matcher.<java.util.regex.Matcher: int end()>(),447,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack133 = virtualinvoke matcher.<java.util.regex.Matcher: int end()>(), 447)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: void advance(int)>,amount := @parameter0: int,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, virtualinvoke $stack146.<com.mitchellbosecke.pebble.lexer.TemplateSource: void advance(int)>($stack147), 429)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: void advance(int)>,$stack7 = $stack6 + amount,144,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, virtualinvoke $stack146.<com.mitchellbosecke.pebble.lexer.TemplateSource: void advance(int)>($stack147), 429) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: void advance(int)>, $stack7 = $stack6 + amount, 144)))

List(Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>,$stack5 = this.<com.mitchellbosecke.pebble.lexer.TemplateSource: int offset>,197,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>, $stack5 = this.<com.mitchellbosecke.pebble.lexer.TemplateSource: int offset>, 197)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>,$stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>($stack6, $stack5, $stack4),197,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>, $stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>($stack6, $stack5, $stack4), 197)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>, specialinvoke $stack2.<java.lang.String: void <init>(char[])>($stack7), 197)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>, specialinvoke $stack2.<java.lang.String: void <init>(char[])>($stack7), 197) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>,$stack2 = new java.lang.String,197,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = virtualinvoke $stack58.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack59),496,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack58.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack59), 496)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token),498,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)))

List(Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>,$stack1 = this.<com.mitchellbosecke.pebble.lexer.TemplateSource: int lineNumber>,220,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, $stack8 = virtualinvoke $stack7.<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>(), 623)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack53 = virtualinvoke $stack50.<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>(),506,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack53 = virtualinvoke $stack50.<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>(), 506)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack54 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack53),506,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack54 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack53), 506)))

List(Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>,$stack5 = this.<com.mitchellbosecke.pebble.lexer.TemplateSource: int offset>,197,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>, $stack5 = this.<com.mitchellbosecke.pebble.lexer.TemplateSource: int offset>, 197)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>,$stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>($stack6, $stack5, $stack4),197,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>, $stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>($stack6, $stack5, $stack4), 197)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>, specialinvoke $stack2.<java.lang.String: void <init>(char[])>($stack7), 197)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>, specialinvoke $stack2.<java.lang.String: void <init>(char[])>($stack7), 197) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>,$stack2 = new java.lang.String,197,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = virtualinvoke $stack58.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack59),496,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack58.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack59), 496)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<java.lang.String: char charAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, quotationType = virtualinvoke str.<java.lang.String: char charAt(int)>(0), 523)) => Node(<java.lang.String: char charAt(int)>,$stack5 = l0.<java.lang.String: char[] value>,660,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, quotationType = virtualinvoke str.<java.lang.String: char charAt(int)>(0), 523) => (<java.lang.String: char charAt(int)>, $stack5 = l0.<java.lang.String: char[] value>, 660)) => Node(<java.lang.String: char charAt(int)>,$stack6 = $stack5[l1],660,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, quotationType = virtualinvoke str.<java.lang.String: char charAt(int)>(0), 523)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,quotationType = virtualinvoke str.<java.lang.String: char charAt(int)>(0),523,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, quotationType = virtualinvoke str.<java.lang.String: char charAt(int)>(0), 523)))

List(Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>,$stack1 = this.<com.mitchellbosecke.pebble.lexer.TemplateSource: int lineNumber>,220,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, $stack8 = virtualinvoke $stack7.<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>(), 623)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack117 = virtualinvoke $stack115.<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>(),466,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack117 = virtualinvoke $stack115.<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>(), 466)))

List(Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>,$stack5 = this.<com.mitchellbosecke.pebble.lexer.TemplateSource: int offset>,197,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>, $stack5 = this.<com.mitchellbosecke.pebble.lexer.TemplateSource: int offset>, 197)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>,$stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>($stack6, $stack5, $stack4),197,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>, $stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>($stack6, $stack5, $stack4), 197)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>, specialinvoke $stack2.<java.lang.String: void <init>(char[])>($stack7), 197)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>, specialinvoke $stack2.<java.lang.String: void <init>(char[])>($stack7), 197) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>,$stack2 = new java.lang.String,197,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = virtualinvoke $stack58.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack59),496,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack58.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack59), 496)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,$stack5 = virtualinvoke str.<java.lang.String: int length()>(),526,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, $stack5 = virtualinvoke str.<java.lang.String: int length()>(), 526)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,$stack6 = $stack5 - 1,526,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, $stack6 = $stack5 - 1, 526)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str#2 = virtualinvoke str.<java.lang.String: java.lang.String substring(int,int)>(1, $stack6),526,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str#2 = virtualinvoke str#2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\(\")", "$1"),532,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)))

List(Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>,$stack1 = this.<com.mitchellbosecke.pebble.lexer.TemplateSource: int lineNumber>,220,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, $stack8 = virtualinvoke $stack7.<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>(), 623)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>,return $stack1,220,SinkNode, path: ))

List(Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>,$stack1 = this.<com.mitchellbosecke.pebble.lexer.TemplateSource: int lineNumber>,220,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, $stack8 = virtualinvoke $stack7.<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>(), 623)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack117 = virtualinvoke $stack115.<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>(),466,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack117 = virtualinvoke $stack115.<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>(), 466)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack118 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack117),466,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack118 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack117), 466)) => Node(<com.mitchellbosecke.pebble.utils.Pair: void <init>(java.lang.Object,java.lang.Object)>,right := @parameter1: java.lang.Object,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke $stack114.<com.mitchellbosecke.pebble.utils.Pair: void <init>(java.lang.Object,java.lang.Object)>(character, $stack118), 466)) => Node(<com.mitchellbosecke.pebble.utils.Pair: void <init>(java.lang.Object,java.lang.Object)>,this.<com.mitchellbosecke.pebble.utils.Pair: java.lang.Object right> = right,24,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke $stack114.<com.mitchellbosecke.pebble.utils.Pair: void <init>(java.lang.Object,java.lang.Object)>(character, $stack118), 466) => (<com.mitchellbosecke.pebble.utils.Pair: void <init>(java.lang.Object,java.lang.Object)>, this.<com.mitchellbosecke.pebble.utils.Pair: java.lang.Object right> = right, 24)))

List(Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>,$stack5 = this.<com.mitchellbosecke.pebble.lexer.TemplateSource: int offset>,197,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>, $stack5 = this.<com.mitchellbosecke.pebble.lexer.TemplateSource: int offset>, 197)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>,$stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>($stack6, $stack5, $stack4),197,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>, $stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>($stack6, $stack5, $stack4), 197)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>, specialinvoke $stack2.<java.lang.String: void <init>(char[])>($stack7), 197)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>, specialinvoke $stack2.<java.lang.String: void <init>(char[])>($stack7), 197) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>,$stack2 = new java.lang.String,197,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = virtualinvoke $stack58.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack59),496,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack58.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack59), 496)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,$stack5 = virtualinvoke str.<java.lang.String: int length()>(),526,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, $stack5 = virtualinvoke str.<java.lang.String: int length()>(), 526)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,$stack7 = this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.TemplateSource source>,623,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, $stack7 = this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.TemplateSource source>, 623)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>,this := @this: com.mitchellbosecke.pebble.lexer.TemplateSource,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, $stack8 = virtualinvoke $stack7.<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>(), 623)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>,$stack1 = this.<com.mitchellbosecke.pebble.lexer.TemplateSource: int lineNumber>,220,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, $stack8 = virtualinvoke $stack7.<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>(), 623)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>,return $stack1,220,SinkNode, path: ))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack16),443,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack16), 443)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack133 = virtualinvoke matcher.<java.util.regex.Matcher: int end()>(),447,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack133 = virtualinvoke matcher.<java.util.regex.Matcher: int end()>(), 447)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: void advance(int)>,amount := @parameter0: int,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, virtualinvoke $stack146.<com.mitchellbosecke.pebble.lexer.TemplateSource: void advance(int)>($stack147), 429)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: void advance(int)>,$stack5 = $stack4 - amount,143,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, virtualinvoke $stack146.<com.mitchellbosecke.pebble.lexer.TemplateSource: void advance(int)>($stack147), 429) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: void advance(int)>, $stack5 = $stack4 - amount, 143)))

List(Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>,$stack1 = this.<com.mitchellbosecke.pebble.lexer.TemplateSource: int lineNumber>,220,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, $stack8 = virtualinvoke $stack7.<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>(), 623)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,$stack8 = virtualinvoke $stack7.<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>(),623,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, $stack8 = virtualinvoke $stack7.<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>(), 623)) => Node(<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>,lineNumber := @parameter2: int,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, specialinvoke $stack6.<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>(type, value, $stack8), 623)) => Node(<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>,this.<com.mitchellbosecke.pebble.lexer.Token: int lineNumber> = lineNumber,28,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, specialinvoke $stack6.<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>(type, value, $stack8), 623) => (<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>, this.<com.mitchellbosecke.pebble.lexer.Token: int lineNumber> = lineNumber, 28)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,$stack5 = virtualinvoke str.<java.lang.String: int length()>(),526,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, $stack5 = virtualinvoke str.<java.lang.String: int length()>(), 526)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,$stack6 = $stack5 - 1,526,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, $stack6 = $stack5 - 1, 526)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str#2 = virtualinvoke str.<java.lang.String: java.lang.String substring(int,int)>(1, $stack6),526,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str#2 = virtualinvoke str#2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\(\')", "$1"),530,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token),498,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,value := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.lang.String: boolean equals(java.lang.Object)>(value),621,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.lang.String: boolean equals(java.lang.Object)>(value), 621)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token),498,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,value := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.lang.String: boolean equals(java.lang.Object)>(value),621,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.lang.String: boolean equals(java.lang.Object)>(value), 621)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,$stack5 = virtualinvoke str.<java.lang.String: int length()>(),526,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, $stack5 = virtualinvoke str.<java.lang.String: int length()>(), 526)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,$stack6 = $stack5 - 1,526,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, $stack6 = $stack5 - 1, 526)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str#2 = virtualinvoke str.<java.lang.String: java.lang.String substring(int,int)>(1, $stack6),526,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str#2 = virtualinvoke str#2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\(\')", "$1"),530,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token),498,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,value := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428)) => Node(<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>,value := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, specialinvoke $stack6.<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>(type, value, $stack8), 623)) => Node(<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>,this.<com.mitchellbosecke.pebble.lexer.Token: java.lang.String value> = value,27,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, specialinvoke $stack6.<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>(type, value, $stack8), 623) => (<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>, this.<com.mitchellbosecke.pebble.lexer.Token: java.lang.String value> = value, 27)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack28 = this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.TemplateSource source>,494,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack28 = this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.TemplateSource source>, 494)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack29.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack28),494,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack29.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack28), 494)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack59 = virtualinvoke matcher.<java.util.regex.Matcher: int end()>(),496,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack59 = virtualinvoke matcher.<java.util.regex.Matcher: int end()>(), 496)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = virtualinvoke $stack58.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack59),496,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack58.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack59), 496)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<java.lang.String: int length()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, $stack5 = virtualinvoke str.<java.lang.String: int length()>(), 526)) => Node(<java.lang.String: int length()>,$stack1 = l0.<java.lang.String: char[] value>,623,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, $stack5 = virtualinvoke str.<java.lang.String: int length()>(), 526) => (<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)) => Node(<java.lang.String: int length()>,$stack2 = lengthof $stack1,623,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, $stack5 = virtualinvoke str.<java.lang.String: int length()>(), 526)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,$stack5 = virtualinvoke str.<java.lang.String: int length()>(),526,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, $stack5 = virtualinvoke str.<java.lang.String: int length()>(), 526)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,$stack6 = $stack5 - 1,526,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, $stack6 = $stack5 - 1, 526)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str#2 = virtualinvoke str.<java.lang.String: java.lang.String substring(int,int)>(1, $stack6),526,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str#2 = virtualinvoke str#2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\(\')", "$1"),530,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token),498,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,value := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.lang.String: boolean equals(java.lang.Object)>(value),621,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.lang.String: boolean equals(java.lang.Object)>(value), 621)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack28 = this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.TemplateSource source>,494,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack28 = this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.TemplateSource source>, 494)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack29.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack28),494,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack29.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack28), 494)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack59 = virtualinvoke matcher.<java.util.regex.Matcher: int end()>(),496,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack59 = virtualinvoke matcher.<java.util.regex.Matcher: int end()>(), 496)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = virtualinvoke $stack58.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack59),496,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack58.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack59), 496)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<java.lang.String: int length()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, $stack5 = virtualinvoke str.<java.lang.String: int length()>(), 526)) => Node(<java.lang.String: int length()>,$stack1 = l0.<java.lang.String: char[] value>,623,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, $stack5 = virtualinvoke str.<java.lang.String: int length()>(), 526) => (<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)) => Node(<java.lang.String: int length()>,$stack2 = lengthof $stack1,623,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, $stack5 = virtualinvoke str.<java.lang.String: int length()>(), 526)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,$stack5 = virtualinvoke str.<java.lang.String: int length()>(),526,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, $stack5 = virtualinvoke str.<java.lang.String: int length()>(), 526)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,$stack6 = $stack5 - 1,526,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, $stack6 = $stack5 - 1, 526)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str#2 = virtualinvoke str.<java.lang.String: java.lang.String substring(int,int)>(1, $stack6),526,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str#2 = virtualinvoke str#2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\(\')", "$1"),530,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token),498,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,value := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,specialinvoke $stack6.<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>(type, value, $stack8),623,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, specialinvoke $stack6.<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>(type, value, $stack8), 623)))

List(Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>,$stack4 = this.<com.mitchellbosecke.pebble.lexer.TemplateSource: char[] source>,207,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, virtualinvoke $stack7.<com.mitchellbosecke.pebble.lexer.TemplateSource: void advanceThroughWhitespace()>(), 418) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: void advanceThroughWhitespace()>, $stack3 = virtualinvoke this.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(index), 150) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>, $stack4 = this.<com.mitchellbosecke.pebble.lexer.TemplateSource: char[] source>, 207)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>,$stack5 = $stack4[$stack3],207,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, virtualinvoke $stack7.<com.mitchellbosecke.pebble.lexer.TemplateSource: void advanceThroughWhitespace()>(), 418) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: void advanceThroughWhitespace()>, $stack3 = virtualinvoke this.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(index), 150)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack67 = virtualinvoke $stack66.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0),462,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack67 = virtualinvoke $stack66.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0), 462)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,character = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($stack67),462,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, character = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($stack67), 462)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,value := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.lang.String: boolean equals(java.lang.Object)>(value),621,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.lang.String: boolean equals(java.lang.Object)>(value), 621)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack115 = this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.TemplateSource source>,466,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack115 = this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.TemplateSource source>, 466)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>,this := @this: com.mitchellbosecke.pebble.lexer.TemplateSource,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, $stack8 = virtualinvoke $stack7.<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>(), 623)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>,$stack1 = this.<com.mitchellbosecke.pebble.lexer.TemplateSource: int lineNumber>,220,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, $stack8 = virtualinvoke $stack7.<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>(), 623)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>,return $stack1,220,SinkNode, path: ))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str#2 = virtualinvoke str#2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\(\')", "$1"),530,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token),498,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,value := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.lang.String: boolean equals(java.lang.Object)>(value),621,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.lang.String: boolean equals(java.lang.Object)>(value), 621)))

List(Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>,$stack4 = this.<com.mitchellbosecke.pebble.lexer.TemplateSource: char[] source>,207,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, virtualinvoke $stack7.<com.mitchellbosecke.pebble.lexer.TemplateSource: void advanceThroughWhitespace()>(), 418) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: void advanceThroughWhitespace()>, $stack3 = virtualinvoke this.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(index), 150) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>, $stack4 = this.<com.mitchellbosecke.pebble.lexer.TemplateSource: char[] source>, 207)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>,$stack5 = $stack4[$stack3],207,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, virtualinvoke $stack7.<com.mitchellbosecke.pebble.lexer.TemplateSource: void advanceThroughWhitespace()>(), 418) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: void advanceThroughWhitespace()>, $stack3 = virtualinvoke this.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(index), 150)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack67 = virtualinvoke $stack66.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0),462,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack67 = virtualinvoke $stack66.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0), 462)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,character = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($stack67),462,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, character = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($stack67), 462)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,value := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428)) => Node(<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>,value := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, specialinvoke $stack6.<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>(type, value, $stack8), 623)) => Node(<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>,this.<com.mitchellbosecke.pebble.lexer.Token: java.lang.String value> = value,27,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, specialinvoke $stack6.<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>(type, value, $stack8), 623) => (<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>, this.<com.mitchellbosecke.pebble.lexer.Token: java.lang.String value> = value, 27)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str#2 = virtualinvoke str#2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\(\")", "$1"),532,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token),498,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,value := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.lang.String: boolean equals(java.lang.Object)>(value),621,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.lang.String: boolean equals(java.lang.Object)>(value), 621)))

List(Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>,$stack1 = this.<com.mitchellbosecke.pebble.lexer.TemplateSource: int lineNumber>,220,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, $stack8 = virtualinvoke $stack7.<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>(), 623)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,$stack8 = virtualinvoke $stack7.<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>(),623,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, $stack8 = virtualinvoke $stack7.<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>(), 623)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack28 = this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.TemplateSource source>,494,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack28 = this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.TemplateSource source>, 494)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack29.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack28),494,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack29.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack28), 494)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack59 = virtualinvoke matcher.<java.util.regex.Matcher: int end()>(),496,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack59 = virtualinvoke matcher.<java.util.regex.Matcher: int end()>(), 496)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = virtualinvoke $stack58.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack59),496,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack58.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack59), 496)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<java.lang.String: int length()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, $stack5 = virtualinvoke str.<java.lang.String: int length()>(), 526)) => Node(<java.lang.String: int length()>,$stack1 = l0.<java.lang.String: char[] value>,623,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, $stack5 = virtualinvoke str.<java.lang.String: int length()>(), 526) => (<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)) => Node(<java.lang.String: int length()>,$stack2 = lengthof $stack1,623,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, $stack5 = virtualinvoke str.<java.lang.String: int length()>(), 526)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,$stack5 = virtualinvoke str.<java.lang.String: int length()>(),526,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, $stack5 = virtualinvoke str.<java.lang.String: int length()>(), 526)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,$stack6 = $stack5 - 1,526,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, $stack6 = $stack5 - 1, 526)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str#2 = virtualinvoke str.<java.lang.String: java.lang.String substring(int,int)>(1, $stack6),526,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str#2 = virtualinvoke str#2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\(\')", "$1"),530,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token),498,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,value := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428)) => Node(<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>,value := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, specialinvoke $stack6.<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>(type, value, $stack8), 623)) => Node(<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>,this.<com.mitchellbosecke.pebble.lexer.Token: java.lang.String value> = value,27,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, specialinvoke $stack6.<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>(type, value, $stack8), 623) => (<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>, this.<com.mitchellbosecke.pebble.lexer.Token: java.lang.String value> = value, 27)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack28 = this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.TemplateSource source>,494,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack28 = this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.TemplateSource source>, 494)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack29.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack28),494,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack29.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack28), 494)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack59 = virtualinvoke matcher.<java.util.regex.Matcher: int end()>(),496,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack59 = virtualinvoke matcher.<java.util.regex.Matcher: int end()>(), 496)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>,end := @parameter0: int,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>,$stack4 = $stack3 + end,197,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>, $stack4 = $stack3 + end, 197)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>,$stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>($stack6, $stack5, $stack4),197,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>, $stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>($stack6, $stack5, $stack4), 197)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>,specialinvoke $stack2.<java.lang.String: void <init>(char[])>($stack7),197,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack141.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack142), 427) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>, specialinvoke $stack2.<java.lang.String: void <init>(char[])>($stack7), 197)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str#2 = virtualinvoke str#2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\(\")", "$1"),532,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token),498,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,value := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,specialinvoke $stack6.<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>(type, value, $stack8),623,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, specialinvoke $stack6.<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>(type, value, $stack8), 623)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str#2 = virtualinvoke str#2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\(\')", "$1"),530,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token),498,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,value := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428)) => Node(<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>,value := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, specialinvoke $stack6.<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>(type, value, $stack8), 623)) => Node(<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>,this.<com.mitchellbosecke.pebble.lexer.Token: java.lang.String value> = value,27,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, specialinvoke $stack6.<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>(type, value, $stack8), 623) => (<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>, this.<com.mitchellbosecke.pebble.lexer.Token: java.lang.String value> = value, 27)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack50 = this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.TemplateSource source>,506,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack50 = this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.TemplateSource source>, 506)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>,this := @this: com.mitchellbosecke.pebble.lexer.TemplateSource,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, $stack8 = virtualinvoke $stack7.<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>(), 623)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>,$stack1 = this.<com.mitchellbosecke.pebble.lexer.TemplateSource: int lineNumber>,220,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, $stack8 = virtualinvoke $stack7.<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>(), 623)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>,return $stack1,220,SinkNode, path: ))

List(Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>,$stack1 = this.<com.mitchellbosecke.pebble.lexer.TemplateSource: int lineNumber>,220,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, $stack8 = virtualinvoke $stack7.<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>(), 623)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>,return $stack1,220,SinkNode, path: ))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str#2 = virtualinvoke str#2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\(\")", "$1"),532,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token),498,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,value := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428)) => Node(<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>,value := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, specialinvoke $stack6.<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>(type, value, $stack8), 623)) => Node(<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>,this.<com.mitchellbosecke.pebble.lexer.Token: java.lang.String value> = value,27,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, specialinvoke $stack6.<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>(type, value, $stack8), 623) => (<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>, this.<com.mitchellbosecke.pebble.lexer.Token: java.lang.String value> = value, 27)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str#2 = virtualinvoke str#2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\(\')", "$1"),530,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token),498,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,value := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,specialinvoke $stack6.<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>(type, value, $stack8),623,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, specialinvoke $stack6.<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>(type, value, $stack8), 623)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token),498,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,value := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428)) => Node(<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>,value := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, specialinvoke $stack6.<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>(type, value, $stack8), 623)) => Node(<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>,this.<com.mitchellbosecke.pebble.lexer.Token: java.lang.String value> = value,27,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, specialinvoke $stack6.<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>(type, value, $stack8), 623) => (<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>, this.<com.mitchellbosecke.pebble.lexer.Token: java.lang.String value> = value, 27)))

List(Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>,$stack4 = this.<com.mitchellbosecke.pebble.lexer.TemplateSource: char[] source>,207,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, virtualinvoke $stack7.<com.mitchellbosecke.pebble.lexer.TemplateSource: void advanceThroughWhitespace()>(), 418) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: void advanceThroughWhitespace()>, $stack3 = virtualinvoke this.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(index), 150) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>, $stack4 = this.<com.mitchellbosecke.pebble.lexer.TemplateSource: char[] source>, 207)) => Node(<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>,$stack5 = $stack4[$stack3],207,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, virtualinvoke $stack7.<com.mitchellbosecke.pebble.lexer.TemplateSource: void advanceThroughWhitespace()>(), 418) => (<com.mitchellbosecke.pebble.lexer.TemplateSource: void advanceThroughWhitespace()>, $stack3 = virtualinvoke this.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(index), 150)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack67 = virtualinvoke $stack66.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0),462,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack67 = virtualinvoke $stack66.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0), 462)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,character = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($stack67),462,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, character = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($stack67), 462)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,value := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,specialinvoke $stack6.<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>(type, value, $stack8),623,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, specialinvoke $stack6.<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>(type, value, $stack8), 623)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token),498,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,value := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,specialinvoke $stack6.<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>(type, value, $stack8),623,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, specialinvoke $stack6.<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>(type, value, $stack8), 623)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,$stack5 = virtualinvoke str.<java.lang.String: int length()>(),526,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, $stack5 = virtualinvoke str.<java.lang.String: int length()>(), 526)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,$stack6 = $stack5 - 1,526,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>, $stack6 = $stack5 - 1, 526)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str#2 = virtualinvoke str.<java.lang.String: java.lang.String substring(int,int)>(1, $stack6),526,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>,str#2 = virtualinvoke str#2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\(\')", "$1"),530,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token),498,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,value := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>,specialinvoke $stack6.<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>(type, value, $stack8),623,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack144, token), 428) => (<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>, specialinvoke $stack6.<com.mitchellbosecke.pebble.lexer.Token: void <init>(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String,int)>(type, value, $stack8), 623)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack17 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_LONG>,443,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack16), 443)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack16),443,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack16), 443)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),444,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 444)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack19 == 0 goto $stack21 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_NUMBER>,444,SourceNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack21 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_NUMBER>,452,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20), 452)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20),452,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20), 452)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack23 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),453,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack23 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 453)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack23 == 0 goto $stack25 = "()[]{}?:.,|=",453,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack26 = virtualinvoke $stack24.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0),461,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack26 = virtualinvoke $stack24.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0), 461)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack27 = virtualinvoke $stack25.<java.lang.String: int indexOf(int)>($stack26),461,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack27 = virtualinvoke $stack25.<java.lang.String: int indexOf(int)>($stack26), 461)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack27 < 0 goto $stack29 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_STRING_PLAIN>,461,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack29.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack28),494,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack29.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack28), 494)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack31 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),495,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack31 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 495)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack31 == 0 goto $stack33 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_DOUBLEQUOTE>,495,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack33 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_DOUBLEQUOTE>,504,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack33.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack32), 504)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack33.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack32),504,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack33.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack32), 504)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack35 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),505,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack35 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 505)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack35 == 0 goto $stack36 = new com.mitchellbosecke.pebble.error.ParserException,505,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack55 = <com.mitchellbosecke.pebble.lexer.LexerImpl$State: com.mitchellbosecke.pebble.lexer.LexerImpl$State STRING>,507,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: void pushState(com.mitchellbosecke.pebble.lexer.LexerImpl$State)>($stack55), 507)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),444,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 444)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack19 == 0 goto $stack21 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_NUMBER>,444,SourceNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack132 = this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.TemplateSource source>,447,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack132 = this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.TemplateSource source>, 447)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),444,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 444)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack19 == 0 goto $stack21 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_NUMBER>,444,SourceNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack21 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_NUMBER>,452,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20), 452)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20),452,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20), 452)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack23 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),453,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack23 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 453)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack23 == 0 goto $stack25 = "()[]{}?:.,|=",453,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack26 = virtualinvoke $stack24.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0),461,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack26 = virtualinvoke $stack24.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0), 461)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack27 = virtualinvoke $stack25.<java.lang.String: int indexOf(int)>($stack26),461,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack27 = virtualinvoke $stack25.<java.lang.String: int indexOf(int)>($stack26), 461)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack27 < 0 goto $stack29 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_STRING_PLAIN>,461,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack29.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack28),494,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack29.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack28), 494)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack31 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),495,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack31 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 495)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack31 == 0 goto $stack33 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_DOUBLEQUOTE>,495,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack33 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_DOUBLEQUOTE>,504,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack33.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack32), 504)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack33.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack32),504,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack33.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack32), 504)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack35 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),505,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack35 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 505)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack35 == 0 goto $stack36 = new com.mitchellbosecke.pebble.error.ParserException,505,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack55 = <com.mitchellbosecke.pebble.lexer.LexerImpl$State: com.mitchellbosecke.pebble.lexer.LexerImpl$State STRING>,507,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: void pushState(com.mitchellbosecke.pebble.lexer.LexerImpl$State)>($stack55), 507)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),444,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 444)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack19 == 0 goto $stack21 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_NUMBER>,444,SourceNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack21 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_NUMBER>,452,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20), 452)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20),452,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20), 452)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack23 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),453,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack23 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 453)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack23 == 0 goto $stack25 = "()[]{}?:.,|=",453,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack26 = virtualinvoke $stack24.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0),461,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack26 = virtualinvoke $stack24.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0), 461)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack27 = virtualinvoke $stack25.<java.lang.String: int indexOf(int)>($stack26),461,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack27 = virtualinvoke $stack25.<java.lang.String: int indexOf(int)>($stack26), 461)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack27 < 0 goto $stack29 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_STRING_PLAIN>,461,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,character = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($stack67),462,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, character = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($stack67), 462)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack70 = virtualinvoke $stack69.<java.lang.String: int indexOf(java.lang.String)>(character),465,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack70 = virtualinvoke $stack69.<java.lang.String: int indexOf(java.lang.String)>(character), 465)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack70 < 0 goto $stack71 = ")]}",465,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack114 = new com.mitchellbosecke.pebble.utils.Pair,466,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke $stack114.<com.mitchellbosecke.pebble.utils.Pair: void <init>(java.lang.Object,java.lang.Object)>(character, $stack118), 466)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),444,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 444)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack19 == 0 goto $stack21 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_NUMBER>,444,SourceNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack21 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_NUMBER>,452,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20), 452)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20),452,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20), 452)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack23 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),453,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack23 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 453)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack23 == 0 goto $stack25 = "()[]{}?:.,|=",453,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack26 = virtualinvoke $stack24.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0),461,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack26 = virtualinvoke $stack24.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0), 461)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack27 = virtualinvoke $stack25.<java.lang.String: int indexOf(int)>($stack26),461,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack27 = virtualinvoke $stack25.<java.lang.String: int indexOf(int)>($stack26), 461)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack27 < 0 goto $stack29 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_STRING_PLAIN>,461,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack28 = this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.TemplateSource source>,494,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack28 = this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.TemplateSource source>, 494)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack17 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_LONG>,443,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack16), 443)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack16),443,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack16), 443)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),444,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 444)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack19 == 0 goto $stack21 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_NUMBER>,444,SourceNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack21 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_NUMBER>,452,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20), 452)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20),452,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20), 452)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack23 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),453,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack23 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 453)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack23 == 0 goto $stack25 = "()[]{}?:.,|=",453,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack26 = virtualinvoke $stack24.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0),461,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack26 = virtualinvoke $stack24.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0), 461)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack27 = virtualinvoke $stack25.<java.lang.String: int indexOf(int)>($stack26),461,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack27 = virtualinvoke $stack25.<java.lang.String: int indexOf(int)>($stack26), 461)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack27 < 0 goto $stack29 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_STRING_PLAIN>,461,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack29.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack28),494,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack29.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack28), 494)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack31 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),495,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack31 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 495)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack31 == 0 goto $stack33 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_DOUBLEQUOTE>,495,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack58 = this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.TemplateSource source>,496,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack58 = this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.TemplateSource source>, 496)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = virtualinvoke $stack58.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack59),496,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack58.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack59), 496)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token),498,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack17 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_LONG>,443,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack16), 443)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack16),443,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack16), 443)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),444,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 444)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack19 == 0 goto $stack21 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_NUMBER>,444,SourceNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack21 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_NUMBER>,452,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20), 452)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20),452,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20), 452)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack23 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),453,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack23 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 453)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack23 == 0 goto $stack25 = "()[]{}?:.,|=",453,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack26 = virtualinvoke $stack24.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0),461,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack26 = virtualinvoke $stack24.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0), 461)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack27 = virtualinvoke $stack25.<java.lang.String: int indexOf(int)>($stack26),461,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack27 = virtualinvoke $stack25.<java.lang.String: int indexOf(int)>($stack26), 461)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack27 < 0 goto $stack29 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_STRING_PLAIN>,461,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack29.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack28),494,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack29.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack28), 494)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack31 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),495,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack31 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 495)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack31 == 0 goto $stack33 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_DOUBLEQUOTE>,495,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack33 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_DOUBLEQUOTE>,504,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack33.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack32), 504)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack33.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack32),504,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack33.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack32), 504)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack35 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),505,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack35 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 505)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack35 == 0 goto $stack36 = new com.mitchellbosecke.pebble.error.ParserException,505,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack53 = virtualinvoke $stack50.<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>(),506,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack53 = virtualinvoke $stack50.<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>(), 506)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack17 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_LONG>,443,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack16), 443)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack16),443,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack16), 443)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),444,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 444)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack19 == 0 goto $stack21 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_NUMBER>,444,SourceNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack21 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_NUMBER>,452,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20), 452)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20),452,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20), 452)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack23 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),453,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack23 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 453)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack23 == 0 goto $stack25 = "()[]{}?:.,|=",453,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack26 = virtualinvoke $stack24.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0),461,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack26 = virtualinvoke $stack24.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0), 461)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack27 = virtualinvoke $stack25.<java.lang.String: int indexOf(int)>($stack26),461,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack27 = virtualinvoke $stack25.<java.lang.String: int indexOf(int)>($stack26), 461)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack27 < 0 goto $stack29 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_STRING_PLAIN>,461,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack29.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack28),494,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack29.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack28), 494)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack31 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),495,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack31 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 495)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack31 == 0 goto $stack33 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_DOUBLEQUOTE>,495,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack33 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_DOUBLEQUOTE>,504,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack33.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack32), 504)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack17 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_LONG>,443,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack16), 443)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack16),443,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack16), 443)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),444,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 444)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack19 == 0 goto $stack21 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_NUMBER>,444,SourceNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack21 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_NUMBER>,452,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20), 452)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20),452,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20), 452)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack23 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),453,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack23 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 453)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack23 == 0 goto $stack25 = "()[]{}?:.,|=",453,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack26 = virtualinvoke $stack24.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0),461,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack26 = virtualinvoke $stack24.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0), 461)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack27 = virtualinvoke $stack25.<java.lang.String: int indexOf(int)>($stack26),461,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack27 = virtualinvoke $stack25.<java.lang.String: int indexOf(int)>($stack26), 461)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack27 < 0 goto $stack29 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_STRING_PLAIN>,461,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,character = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($stack67),462,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, character = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($stack67), 462)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack70 = virtualinvoke $stack69.<java.lang.String: int indexOf(java.lang.String)>(character),465,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack70 = virtualinvoke $stack69.<java.lang.String: int indexOf(java.lang.String)>(character), 465)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack70 < 0 goto $stack71 = ")]}",465,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack114 = new com.mitchellbosecke.pebble.utils.Pair,466,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke $stack114.<com.mitchellbosecke.pebble.utils.Pair: void <init>(java.lang.Object,java.lang.Object)>(character, $stack118), 466)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),444,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 444)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack19 == 0 goto $stack21 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_NUMBER>,444,SourceNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack21 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_NUMBER>,452,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20), 452)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20),452,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20), 452)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack23 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),453,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack23 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 453)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack23 == 0 goto $stack25 = "()[]{}?:.,|=",453,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack26 = virtualinvoke $stack24.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0),461,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack26 = virtualinvoke $stack24.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0), 461)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack27 = virtualinvoke $stack25.<java.lang.String: int indexOf(int)>($stack26),461,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack27 = virtualinvoke $stack25.<java.lang.String: int indexOf(int)>($stack26), 461)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack27 < 0 goto $stack29 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_STRING_PLAIN>,461,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack29.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack28),494,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack29.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack28), 494)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack31 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),495,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack31 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 495)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack31 == 0 goto $stack33 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_DOUBLEQUOTE>,495,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack33 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_DOUBLEQUOTE>,504,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack33.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack32), 504)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),444,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 444)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack19 == 0 goto $stack21 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_NUMBER>,444,SourceNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack21 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_NUMBER>,452,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20), 452)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20),452,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20), 452)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack23 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),453,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack23 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 453)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack23 == 0 goto $stack25 = "()[]{}?:.,|=",453,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack26 = virtualinvoke $stack24.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0),461,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack26 = virtualinvoke $stack24.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0), 461)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack27 = virtualinvoke $stack25.<java.lang.String: int indexOf(int)>($stack26),461,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack27 = virtualinvoke $stack25.<java.lang.String: int indexOf(int)>($stack26), 461)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack27 < 0 goto $stack29 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_STRING_PLAIN>,461,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack29.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack28),494,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack29.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack28), 494)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack31 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),495,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack31 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 495)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack31 == 0 goto $stack33 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_DOUBLEQUOTE>,495,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack33 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_DOUBLEQUOTE>,504,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack33.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack32), 504)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack33.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack32),504,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack33.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack32), 504)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack35 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),505,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack35 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 505)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack35 == 0 goto $stack36 = new com.mitchellbosecke.pebble.error.ParserException,505,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack53 = virtualinvoke $stack50.<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>(),506,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack53 = virtualinvoke $stack50.<com.mitchellbosecke.pebble.lexer.TemplateSource: int getLineNumber()>(), 506)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack17 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_LONG>,443,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack16), 443)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack16),443,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack16), 443)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),444,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 444)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack19 == 0 goto $stack21 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_NUMBER>,444,SourceNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack132 = this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.TemplateSource source>,447,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack132 = this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.TemplateSource source>, 447)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),444,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 444)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack19 == 0 goto $stack21 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_NUMBER>,444,SourceNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack21 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_NUMBER>,452,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20), 452)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20),452,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20), 452)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack23 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),453,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack23 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 453)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack23 == 0 goto $stack25 = "()[]{}?:.,|=",453,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack26 = virtualinvoke $stack24.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0),461,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack26 = virtualinvoke $stack24.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0), 461)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack27 = virtualinvoke $stack25.<java.lang.String: int indexOf(int)>($stack26),461,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack27 = virtualinvoke $stack25.<java.lang.String: int indexOf(int)>($stack26), 461)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack27 < 0 goto $stack29 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_STRING_PLAIN>,461,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack29.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack28),494,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack29.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack28), 494)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack31 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),495,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack31 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 495)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack31 == 0 goto $stack33 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_DOUBLEQUOTE>,495,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack58 = this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.TemplateSource source>,496,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack58 = this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.TemplateSource source>, 496)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = virtualinvoke $stack58.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack59),496,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack58.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack59), 496)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token),498,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: java.lang.String unquoteAndUnescape(java.lang.String)>(token), 498)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack17 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_LONG>,443,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack16), 443)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack16),443,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack16), 443)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),444,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 444)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack19 == 0 goto $stack21 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_NUMBER>,444,SourceNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack21 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_NUMBER>,452,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20), 452)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20),452,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, matcher = virtualinvoke $stack21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack20), 452)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack23 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),453,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack23 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 453)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack23 == 0 goto $stack25 = "()[]{}?:.,|=",453,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack26 = virtualinvoke $stack24.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0),461,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack26 = virtualinvoke $stack24.<com.mitchellbosecke.pebble.lexer.TemplateSource: char charAt(int)>(0), 461)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack27 = virtualinvoke $stack25.<java.lang.String: int indexOf(int)>($stack26),461,SimpleNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack27 = virtualinvoke $stack25.<java.lang.String: int indexOf(int)>($stack26), 461)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack27 < 0 goto $stack29 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_STRING_PLAIN>,461,SimpleNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack28 = this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.TemplateSource source>,494,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack28 = this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.TemplateSource source>, 494)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),444,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 444)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack19 == 0 goto $stack21 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_NUMBER>,444,SourceNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack127 = virtualinvoke matcher.<java.util.regex.Matcher: int end()>(),445,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack127 = virtualinvoke matcher.<java.util.regex.Matcher: int end()>(), 445)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack128 = $stack127 - 1,445,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack128 = $stack127 - 1, 445)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,token = virtualinvoke $stack126.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack128),445,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, token = virtualinvoke $stack126.<com.mitchellbosecke.pebble.lexer.TemplateSource: java.lang.String substring(int)>($stack128), 445)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack130, token),446,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, specialinvoke this.<com.mitchellbosecke.pebble.lexer.LexerImpl: com.mitchellbosecke.pebble.lexer.Token pushToken(com.mitchellbosecke.pebble.lexer.Token$Type,java.lang.String)>($stack130, token), 446)))

List(Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(),444,SourceNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack19 = virtualinvoke matcher.<java.util.regex.Matcher: boolean lookingAt()>(), 444)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,if $stack19 == 0 goto $stack21 = <com.mitchellbosecke.pebble.lexer.LexerImpl: java.util.regex.Pattern REGEX_NUMBER>,444,SourceNode, path: ) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack127 = virtualinvoke matcher.<java.util.regex.Matcher: int end()>(),445,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack127 = virtualinvoke matcher.<java.util.regex.Matcher: int end()>(), 445)) => Node(<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>,$stack128 = $stack127 - 1,445,SinkNode, path: (<com.mitchellbosecke.pebble.lexer.LexerImpl: void lexExpression()>, $stack128 = $stack127 - 1, 445)))

