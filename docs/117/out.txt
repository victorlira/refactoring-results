List(Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack133 = new cz.habarta.typescript.generator.TypeProcessor$Result,20,SourceNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, specialinvoke $stack133.<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>($stack137, $stack136), 20)) => Node(<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>,this := @this: cz.habarta.typescript.generator.TypeProcessor$Result,-1,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, specialinvoke $stack133.<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>($stack137, $stack136), 20)) => Node(<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>,specialinvoke this.<java.lang.Object: void <init>()>(),48,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, specialinvoke $stack133.<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>($stack137, $stack136), 20) => (<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>, specialinvoke this.<java.lang.Object: void <init>()>(), 48)))

List(Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,41,SourceNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, specialinvoke $stack82.<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>($stack84, $stack83), 41)) => Node(<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>,this := @this: cz.habarta.typescript.generator.TypeProcessor$Result,-1,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, specialinvoke $stack133.<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>($stack137, $stack136), 20)) => Node(<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>,specialinvoke this.<java.lang.Object: void <init>()>(),48,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, specialinvoke $stack133.<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>($stack137, $stack136), 20) => (<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>, specialinvoke this.<java.lang.Object: void <init>()>(), 48)))

List(Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack16 == 0 goto $stack17 = javaType instanceof java.lang.Class,17,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack17 == 0 goto $stack18 = javaType instanceof java.lang.reflect.ParameterizedType,23,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,javaClass#4 = (java.lang.Class) javaType,24,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, javaClass#4 = (java.lang.Class) javaType, 24)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(),25,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(), 25)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack74 == 0 goto $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),25,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),29,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(), 29)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack75 == 0 goto $stack76 = class "Ljava/util/Collection;",29,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack77 == 0 goto $stack78 = class "Ljava/util/Map;",32,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4),35,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4), 35)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack79 == 0 goto $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),35,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalInt"),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalInt'), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack81 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,38,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack86 = virtualinvoke $stack85.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalLong"),39,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack86 = virtualinvoke $stack85.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalLong'), 39)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack86 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,39,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack89 = virtualinvoke $stack88.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalDouble"),40,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack89 = virtualinvoke $stack88.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalDouble'), 40)))

List(Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,rawClass = staticinvoke <cz.habarta.typescript.generator.util.Utils: java.lang.Class getRawClassOrNull(java.lang.reflect.Type)>(javaType),18,SourceNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, rawClass = staticinvoke <cz.habarta.typescript.generator.util.Utils: java.lang.Class getRawClassOrNull(java.lang.reflect.Type)>(javaType), 18)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack129 = virtualinvoke cls.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(rawClass),22,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack129 = virtualinvoke cls.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(rawClass), 22)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack129 == 0 goto (branch),22,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack16 == 0 goto $stack17 = javaType instanceof java.lang.Class,17,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack17 == 0 goto $stack18 = javaType instanceof java.lang.reflect.ParameterizedType,23,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,javaClass#4 = (java.lang.Class) javaType,24,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, javaClass#4 = (java.lang.Class) javaType, 24)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(),25,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(), 25)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack74 == 0 goto $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),25,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),29,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(), 29)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack75 == 0 goto $stack76 = class "Ljava/util/Collection;",29,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack77 == 0 goto $stack78 = class "Ljava/util/Map;",32,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4),35,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4), 35)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack79 == 0 goto $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),35,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalInt"),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalInt'), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack81 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,38,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack86 = virtualinvoke $stack85.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalLong"),39,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack86 = virtualinvoke $stack85.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalLong'), 39)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack86 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,39,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,41,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, specialinvoke $stack82.<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>($stack84, $stack83), 41)))

List(Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if rawClass == null goto (branch),19,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack16 == 0 goto $stack17 = javaType instanceof java.lang.Class,17,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack17 == 0 goto $stack18 = javaType instanceof java.lang.reflect.ParameterizedType,23,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,javaClass#4 = (java.lang.Class) javaType,24,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, javaClass#4 = (java.lang.Class) javaType, 24)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(),25,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(), 25)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack74 == 0 goto $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),25,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),29,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(), 29)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack75 == 0 goto $stack76 = class "Ljava/util/Collection;",29,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack77 == 0 goto $stack78 = class "Ljava/util/Map;",32,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4),35,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4), 35)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack79 == 0 goto $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),35,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalInt"),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalInt'), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack81 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,38,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack85 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),39,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack85 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 39)))

List(Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack16 == 0 goto $stack17 = javaType instanceof java.lang.Class,17,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack17 == 0 goto $stack18 = javaType instanceof java.lang.reflect.ParameterizedType,23,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,javaClass#4 = (java.lang.Class) javaType,24,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, javaClass#4 = (java.lang.Class) javaType, 24)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(),25,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(), 25)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack74 == 0 goto $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),25,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),29,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(), 29)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack75 == 0 goto $stack76 = class "Ljava/util/Collection;",29,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack77 == 0 goto $stack78 = class "Ljava/util/Map;",32,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4),35,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4), 35)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack79 == 0 goto $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),35,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalInt"),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalInt'), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack81 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,38,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack85 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),39,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack85 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 39)))

List(Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack16 == 0 goto $stack17 = javaType instanceof java.lang.Class,17,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack17 == 0 goto $stack18 = javaType instanceof java.lang.reflect.ParameterizedType,23,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,javaClass#4 = (java.lang.Class) javaType,24,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, javaClass#4 = (java.lang.Class) javaType, 24)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(),25,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(), 25)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack74 == 0 goto $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),25,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),29,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(), 29)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack75 == 0 goto $stack76 = class "Ljava/util/Collection;",29,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack77 == 0 goto $stack78 = class "Ljava/util/Map;",32,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4),35,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4), 35)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack79 == 0 goto $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),35,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 38)))

List(Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if rawClass == null goto (branch),19,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack16 == 0 goto $stack17 = javaType instanceof java.lang.Class,17,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack17 == 0 goto $stack18 = javaType instanceof java.lang.reflect.ParameterizedType,23,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,javaClass#4 = (java.lang.Class) javaType,24,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, javaClass#4 = (java.lang.Class) javaType, 24)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(),25,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(), 25)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack74 == 0 goto $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),25,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),29,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(), 29)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack75 == 0 goto $stack76 = class "Ljava/util/Collection;",29,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack77 == 0 goto $stack78 = class "Ljava/util/Map;",32,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4),35,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4), 35)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack79 == 0 goto $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),35,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalInt"),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalInt'), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack81 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,38,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack86 = virtualinvoke $stack85.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalLong"),39,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack86 = virtualinvoke $stack85.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalLong'), 39)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack86 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,39,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack89 = virtualinvoke $stack88.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalDouble"),40,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack89 = virtualinvoke $stack88.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalDouble'), 40)))

List(Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,rawClass = staticinvoke <cz.habarta.typescript.generator.util.Utils: java.lang.Class getRawClassOrNull(java.lang.reflect.Type)>(javaType),18,SourceNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, rawClass = staticinvoke <cz.habarta.typescript.generator.util.Utils: java.lang.Class getRawClassOrNull(java.lang.reflect.Type)>(javaType), 18)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack129 = virtualinvoke cls.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(rawClass),22,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack129 = virtualinvoke cls.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(rawClass), 22)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack129 == 0 goto (branch),22,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack16 == 0 goto $stack17 = javaType instanceof java.lang.Class,17,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack17 == 0 goto $stack18 = javaType instanceof java.lang.reflect.ParameterizedType,23,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,javaClass#4 = (java.lang.Class) javaType,24,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, javaClass#4 = (java.lang.Class) javaType, 24)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(),25,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(), 25)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack74 == 0 goto $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),25,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),29,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(), 29)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack75 == 0 goto $stack76 = class "Ljava/util/Collection;",29,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack77 == 0 goto $stack78 = class "Ljava/util/Map;",32,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4),35,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4), 35)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack79 == 0 goto $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),35,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalInt"),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalInt'), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack81 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,38,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack85 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),39,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack85 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 39)))

List(Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack16 == 0 goto $stack17 = javaType instanceof java.lang.Class,17,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack17 == 0 goto $stack18 = javaType instanceof java.lang.reflect.ParameterizedType,23,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,javaClass#4 = (java.lang.Class) javaType,24,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, javaClass#4 = (java.lang.Class) javaType, 24)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(),25,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(), 25)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack74 == 0 goto $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),25,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),29,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(), 29)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack75 == 0 goto $stack76 = class "Ljava/util/Collection;",29,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack77 == 0 goto $stack78 = class "Ljava/util/Map;",32,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4),35,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4), 35)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack79 == 0 goto $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),35,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalInt"),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalInt'), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack81 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,38,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack86 = virtualinvoke $stack85.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalLong"),39,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack86 = virtualinvoke $stack85.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalLong'), 39)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack86 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,39,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,41,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, specialinvoke $stack82.<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>($stack84, $stack83), 41)))

List(Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if rawClass == null goto (branch),19,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack16 == 0 goto $stack17 = javaType instanceof java.lang.Class,17,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack17 == 0 goto $stack18 = javaType instanceof java.lang.reflect.ParameterizedType,23,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,javaClass#4 = (java.lang.Class) javaType,24,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, javaClass#4 = (java.lang.Class) javaType, 24)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(),25,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(), 25)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack74 == 0 goto $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),25,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),29,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(), 29)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack75 == 0 goto $stack76 = class "Ljava/util/Collection;",29,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack77 == 0 goto $stack78 = class "Ljava/util/Map;",32,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4),35,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4), 35)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack79 == 0 goto $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),35,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalInt"),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalInt'), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack81 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,38,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack86 = virtualinvoke $stack85.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalLong"),39,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack86 = virtualinvoke $stack85.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalLong'), 39)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack86 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,39,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,41,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, specialinvoke $stack82.<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>($stack84, $stack83), 41)))

List(Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,rawClass = staticinvoke <cz.habarta.typescript.generator.util.Utils: java.lang.Class getRawClassOrNull(java.lang.reflect.Type)>(javaType),18,SourceNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, rawClass = staticinvoke <cz.habarta.typescript.generator.util.Utils: java.lang.Class getRawClassOrNull(java.lang.reflect.Type)>(javaType), 18)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack129 = virtualinvoke cls.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(rawClass),22,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack129 = virtualinvoke cls.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(rawClass), 22)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack129 == 0 goto (branch),22,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack16 == 0 goto $stack17 = javaType instanceof java.lang.Class,17,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack17 == 0 goto $stack18 = javaType instanceof java.lang.reflect.ParameterizedType,23,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,javaClass#4 = (java.lang.Class) javaType,24,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, javaClass#4 = (java.lang.Class) javaType, 24)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(),25,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(), 25)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack74 == 0 goto $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),25,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),29,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(), 29)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack75 == 0 goto $stack76 = class "Ljava/util/Collection;",29,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack77 == 0 goto $stack78 = class "Ljava/util/Map;",32,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4),35,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4), 35)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack79 == 0 goto $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),35,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalInt"),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalInt'), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack81 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,38,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack86 = virtualinvoke $stack85.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalLong"),39,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack86 = virtualinvoke $stack85.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalLong'), 39)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack86 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,39,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack89 = virtualinvoke $stack88.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalDouble"),40,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack89 = virtualinvoke $stack88.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalDouble'), 40)))

List(Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,rawClass = staticinvoke <cz.habarta.typescript.generator.util.Utils: java.lang.Class getRawClassOrNull(java.lang.reflect.Type)>(javaType),18,SourceNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, rawClass = staticinvoke <cz.habarta.typescript.generator.util.Utils: java.lang.Class getRawClassOrNull(java.lang.reflect.Type)>(javaType), 18)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack129 = virtualinvoke cls.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(rawClass),22,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack129 = virtualinvoke cls.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(rawClass), 22)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack129 == 0 goto (branch),22,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack16 == 0 goto $stack17 = javaType instanceof java.lang.Class,17,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack17 == 0 goto $stack18 = javaType instanceof java.lang.reflect.ParameterizedType,23,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,javaClass#4 = (java.lang.Class) javaType,24,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, javaClass#4 = (java.lang.Class) javaType, 24)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(),25,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(), 25)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack74 == 0 goto $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),25,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),29,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(), 29)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack75 == 0 goto $stack76 = class "Ljava/util/Collection;",29,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack77 == 0 goto $stack78 = class "Ljava/util/Map;",32,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4),35,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4), 35)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack79 == 0 goto $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),35,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 38)))

List(Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if rawClass == null goto (branch),19,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack16 == 0 goto $stack17 = javaType instanceof java.lang.Class,17,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack17 == 0 goto $stack18 = javaType instanceof java.lang.reflect.ParameterizedType,23,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,javaClass#4 = (java.lang.Class) javaType,24,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, javaClass#4 = (java.lang.Class) javaType, 24)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(),25,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(), 25)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack74 == 0 goto $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),25,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),29,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(), 29)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack75 == 0 goto $stack76 = class "Ljava/util/Collection;",29,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack77 == 0 goto $stack78 = class "Ljava/util/Map;",32,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4),35,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4), 35)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack79 == 0 goto $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),35,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 38)))

