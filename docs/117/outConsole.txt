Running soot scenario typescript-generator;cz.habarta.typescript.generator.DefaultTypeProcessor;processType(Type, Context);1c03813f0d5593fbea4d3572a6ef028da3f034bd
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/typescript-generator/1c03813f0d5593fbea4d3572a6ef028da3f034bd/original-without-dependencies/typescript-generator-core-1.16-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,66500
Time to perform Confluence 1 Inter 0,89700
Configure Soot Confluence 2 Inter 0,21000
Time to perform Confluence 2 Inter 0,34100
Visited methods: 58
Depth limit: 5
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/typescript-generator/1c03813f0d5593fbea4d3572a6ef028da3f034bd/original-without-dependencies/typescript-generator-core-1.16-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,57500
Runtime: 0.026s
Time to perform OA Inter 0,72000
OA Inter Visited methods: 76
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/typescript-generator/1c03813f0d5593fbea4d3572a6ef028da3f034bd/original-without-dependencies/typescript-generator-core-1.16-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,44700
Time to perform DFP Inter 0,73400
Depth limit: 5
CONFLICTS: DF interference in <cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>
Data flows from execution of line 20 to 20, defined in $stack133 = new cz.habarta.typescript.generator.TypeProcessor$Result and propagated in specialinvoke this.<java.lang.Object: void <init>()>()
Caused by line 20 flow: path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, specialinvoke $stack133.<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>($stack137, $stack136), 20)
Caused by line 20 flow: path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, specialinvoke $stack133.<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>($stack137, $stack136), 20) => (<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>, specialinvoke this.<java.lang.Object: void <init>()>(), 48)
[List(Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack133 = new cz.habarta.typescript.generator.TypeProcessor$Result,20,SourceNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, specialinvoke $stack133.<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>($stack137, $stack136), 20)) => Node(<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>,this := @this: cz.habarta.typescript.generator.TypeProcessor$Result,-1,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, specialinvoke $stack133.<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>($stack137, $stack136), 20)) => Node(<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>,specialinvoke this.<java.lang.Object: void <init>()>(),48,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, specialinvoke $stack133.<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>($stack137, $stack136), 20) => (<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>, specialinvoke this.<java.lang.Object: void <init>()>(), 48)))]
Visited methods: 29
 Analysis results
----------------------------
 Number of conflicts: 1
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/typescript-generator/1c03813f0d5593fbea4d3572a6ef028da3f034bd/original-without-dependencies/typescript-generator-core-1.16-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,44400
Time to perform DFP Inter 0,87600
Depth limit: 5
CONFLICTS: DF interference in <cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>
Data flows from execution of line 41 to 20, defined in $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result and propagated in specialinvoke this.<java.lang.Object: void <init>()>()
Caused by line 41 flow: path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, specialinvoke $stack82.<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>($stack84, $stack83), 41)
Caused by line 20 flow: path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, specialinvoke $stack133.<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>($stack137, $stack136), 20) => (<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>, specialinvoke this.<java.lang.Object: void <init>()>(), 48)
[List(Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,41,SourceNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, specialinvoke $stack82.<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>($stack84, $stack83), 41)) => Node(<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>,this := @this: cz.habarta.typescript.generator.TypeProcessor$Result,-1,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, specialinvoke $stack133.<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>($stack137, $stack136), 20)) => Node(<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>,specialinvoke this.<java.lang.Object: void <init>()>(),48,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, specialinvoke $stack133.<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>($stack137, $stack136), 20) => (<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>, specialinvoke this.<java.lang.Object: void <init>()>(), 48)))]
Visited methods: 29
 Analysis results
----------------------------
 Number of conflicts: 1
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/typescript-generator/1c03813f0d5593fbea4d3572a6ef028da3f034bd/original-without-dependencies/typescript-generator-core-1.16-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,57800
Time to perform PDG 0,81000
CONFLICTS: [List(Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack16 == 0 goto $stack17 = javaType instanceof java.lang.Class,17,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack17 == 0 goto $stack18 = javaType instanceof java.lang.reflect.ParameterizedType,23,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,javaClass#4 = (java.lang.Class) javaType,24,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, javaClass#4 = (java.lang.Class) javaType, 24)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(),25,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(), 25)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack74 == 0 goto $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),25,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),29,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(), 29)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack75 == 0 goto $stack76 = class "Ljava/util/Collection;",29,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack77 == 0 goto $stack78 = class "Ljava/util/Map;",32,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4),35,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4), 35)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack79 == 0 goto $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),35,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalInt"),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalInt'), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack81 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,38,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack86 = virtualinvoke $stack85.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalLong"),39,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack86 = virtualinvoke $stack85.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalLong'), 39)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack86 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,39,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack89 = virtualinvoke $stack88.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalDouble"),40,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack89 = virtualinvoke $stack88.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalDouble'), 40))), List(Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,rawClass = staticinvoke <cz.habarta.typescript.generator.util.Utils: java.lang.Class getRawClassOrNull(java.lang.reflect.Type)>(javaType),18,SourceNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, rawClass = staticinvoke <cz.habarta.typescript.generator.util.Utils: java.lang.Class getRawClassOrNull(java.lang.reflect.Type)>(javaType), 18)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack129 = virtualinvoke cls.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(rawClass),22,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack129 = virtualinvoke cls.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(rawClass), 22)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack129 == 0 goto (branch),22,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack16 == 0 goto $stack17 = javaType instanceof java.lang.Class,17,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack17 == 0 goto $stack18 = javaType instanceof java.lang.reflect.ParameterizedType,23,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,javaClass#4 = (java.lang.Class) javaType,24,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, javaClass#4 = (java.lang.Class) javaType, 24)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(),25,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(), 25)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack74 == 0 goto $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),25,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),29,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(), 29)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack75 == 0 goto $stack76 = class "Ljava/util/Collection;",29,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack77 == 0 goto $stack78 = class "Ljava/util/Map;",32,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4),35,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4), 35)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack79 == 0 goto $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),35,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalInt"),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalInt'), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack81 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,38,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack86 = virtualinvoke $stack85.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalLong"),39,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack86 = virtualinvoke $stack85.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalLong'), 39)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack86 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,39,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,41,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, specialinvoke $stack82.<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>($stack84, $stack83), 41))), List(Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if rawClass == null goto (branch),19,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack16 == 0 goto $stack17 = javaType instanceof java.lang.Class,17,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack17 == 0 goto $stack18 = javaType instanceof java.lang.reflect.ParameterizedType,23,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,javaClass#4 = (java.lang.Class) javaType,24,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, javaClass#4 = (java.lang.Class) javaType, 24)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(),25,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(), 25)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack74 == 0 goto $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),25,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),29,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(), 29)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack75 == 0 goto $stack76 = class "Ljava/util/Collection;",29,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack77 == 0 goto $stack78 = class "Ljava/util/Map;",32,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4),35,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4), 35)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack79 == 0 goto $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),35,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalInt"),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalInt'), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack81 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,38,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack85 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),39,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack85 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 39))), List(Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack16 == 0 goto $stack17 = javaType instanceof java.lang.Class,17,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack17 == 0 goto $stack18 = javaType instanceof java.lang.reflect.ParameterizedType,23,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,javaClass#4 = (java.lang.Class) javaType,24,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, javaClass#4 = (java.lang.Class) javaType, 24)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(),25,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(), 25)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack74 == 0 goto $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),25,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),29,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(), 29)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack75 == 0 goto $stack76 = class "Ljava/util/Collection;",29,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack77 == 0 goto $stack78 = class "Ljava/util/Map;",32,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4),35,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4), 35)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack79 == 0 goto $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),35,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalInt"),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalInt'), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack81 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,38,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack85 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),39,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack85 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 39))), List(Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack16 == 0 goto $stack17 = javaType instanceof java.lang.Class,17,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack17 == 0 goto $stack18 = javaType instanceof java.lang.reflect.ParameterizedType,23,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,javaClass#4 = (java.lang.Class) javaType,24,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, javaClass#4 = (java.lang.Class) javaType, 24)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(),25,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(), 25)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack74 == 0 goto $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),25,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),29,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(), 29)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack75 == 0 goto $stack76 = class "Ljava/util/Collection;",29,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack77 == 0 goto $stack78 = class "Ljava/util/Map;",32,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4),35,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4), 35)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack79 == 0 goto $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),35,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 38))), List(Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if rawClass == null goto (branch),19,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack16 == 0 goto $stack17 = javaType instanceof java.lang.Class,17,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack17 == 0 goto $stack18 = javaType instanceof java.lang.reflect.ParameterizedType,23,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,javaClass#4 = (java.lang.Class) javaType,24,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, javaClass#4 = (java.lang.Class) javaType, 24)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(),25,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(), 25)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack74 == 0 goto $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),25,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),29,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(), 29)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack75 == 0 goto $stack76 = class "Ljava/util/Collection;",29,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack77 == 0 goto $stack78 = class "Ljava/util/Map;",32,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4),35,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4), 35)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack79 == 0 goto $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),35,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalInt"),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalInt'), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack81 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,38,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack86 = virtualinvoke $stack85.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalLong"),39,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack86 = virtualinvoke $stack85.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalLong'), 39)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack86 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,39,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack89 = virtualinvoke $stack88.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalDouble"),40,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack89 = virtualinvoke $stack88.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalDouble'), 40))), List(Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,rawClass = staticinvoke <cz.habarta.typescript.generator.util.Utils: java.lang.Class getRawClassOrNull(java.lang.reflect.Type)>(javaType),18,SourceNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, rawClass = staticinvoke <cz.habarta.typescript.generator.util.Utils: java.lang.Class getRawClassOrNull(java.lang.reflect.Type)>(javaType), 18)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack129 = virtualinvoke cls.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(rawClass),22,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack129 = virtualinvoke cls.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(rawClass), 22)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack129 == 0 goto (branch),22,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack16 == 0 goto $stack17 = javaType instanceof java.lang.Class,17,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack17 == 0 goto $stack18 = javaType instanceof java.lang.reflect.ParameterizedType,23,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,javaClass#4 = (java.lang.Class) javaType,24,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, javaClass#4 = (java.lang.Class) javaType, 24)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(),25,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(), 25)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack74 == 0 goto $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),25,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),29,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(), 29)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack75 == 0 goto $stack76 = class "Ljava/util/Collection;",29,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack77 == 0 goto $stack78 = class "Ljava/util/Map;",32,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4),35,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4), 35)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack79 == 0 goto $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),35,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalInt"),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalInt'), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack81 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,38,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack85 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),39,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack85 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 39))), List(Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack16 == 0 goto $stack17 = javaType instanceof java.lang.Class,17,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack17 == 0 goto $stack18 = javaType instanceof java.lang.reflect.ParameterizedType,23,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,javaClass#4 = (java.lang.Class) javaType,24,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, javaClass#4 = (java.lang.Class) javaType, 24)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(),25,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(), 25)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack74 == 0 goto $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),25,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),29,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(), 29)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack75 == 0 goto $stack76 = class "Ljava/util/Collection;",29,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack77 == 0 goto $stack78 = class "Ljava/util/Map;",32,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4),35,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4), 35)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack79 == 0 goto $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),35,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalInt"),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalInt'), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack81 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,38,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack86 = virtualinvoke $stack85.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalLong"),39,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack86 = virtualinvoke $stack85.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalLong'), 39)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack86 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,39,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,41,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, specialinvoke $stack82.<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>($stack84, $stack83), 41))), List(Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if rawClass == null goto (branch),19,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack16 == 0 goto $stack17 = javaType instanceof java.lang.Class,17,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack17 == 0 goto $stack18 = javaType instanceof java.lang.reflect.ParameterizedType,23,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,javaClass#4 = (java.lang.Class) javaType,24,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, javaClass#4 = (java.lang.Class) javaType, 24)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(),25,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(), 25)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack74 == 0 goto $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),25,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),29,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(), 29)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack75 == 0 goto $stack76 = class "Ljava/util/Collection;",29,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack77 == 0 goto $stack78 = class "Ljava/util/Map;",32,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4),35,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4), 35)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack79 == 0 goto $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),35,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalInt"),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalInt'), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack81 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,38,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack86 = virtualinvoke $stack85.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalLong"),39,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack86 = virtualinvoke $stack85.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalLong'), 39)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack86 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,39,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,41,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, specialinvoke $stack82.<cz.habarta.typescript.generator.TypeProcessor$Result: void <init>(cz.habarta.typescript.generator.TsType,java.lang.Class[])>($stack84, $stack83), 41))), List(Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,rawClass = staticinvoke <cz.habarta.typescript.generator.util.Utils: java.lang.Class getRawClassOrNull(java.lang.reflect.Type)>(javaType),18,SourceNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, rawClass = staticinvoke <cz.habarta.typescript.generator.util.Utils: java.lang.Class getRawClassOrNull(java.lang.reflect.Type)>(javaType), 18)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack129 = virtualinvoke cls.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(rawClass),22,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack129 = virtualinvoke cls.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(rawClass), 22)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack129 == 0 goto (branch),22,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack16 == 0 goto $stack17 = javaType instanceof java.lang.Class,17,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack17 == 0 goto $stack18 = javaType instanceof java.lang.reflect.ParameterizedType,23,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,javaClass#4 = (java.lang.Class) javaType,24,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, javaClass#4 = (java.lang.Class) javaType, 24)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(),25,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(), 25)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack74 == 0 goto $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),25,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),29,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(), 29)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack75 == 0 goto $stack76 = class "Ljava/util/Collection;",29,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack77 == 0 goto $stack78 = class "Ljava/util/Map;",32,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4),35,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4), 35)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack79 == 0 goto $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),35,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalInt"),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack81 = virtualinvoke $stack80.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalInt'), 38)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack81 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,38,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack86 = virtualinvoke $stack85.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalLong"),39,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack86 = virtualinvoke $stack85.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalLong'), 39)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack86 != 0 goto $stack82 = new cz.habarta.typescript.generator.TypeProcessor$Result,39,SinkNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack89 = virtualinvoke $stack88.<java.lang.String: boolean equals(java.lang.Object)>("java.util.OptionalDouble"),40,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack89 = virtualinvoke $stack88.<java.lang.String: boolean equals(java.lang.Object)>('java.util.OptionalDouble'), 40))), List(Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,rawClass = staticinvoke <cz.habarta.typescript.generator.util.Utils: java.lang.Class getRawClassOrNull(java.lang.reflect.Type)>(javaType),18,SourceNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, rawClass = staticinvoke <cz.habarta.typescript.generator.util.Utils: java.lang.Class getRawClassOrNull(java.lang.reflect.Type)>(javaType), 18)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack129 = virtualinvoke cls.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(rawClass),22,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack129 = virtualinvoke cls.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(rawClass), 22)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack129 == 0 goto (branch),22,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack16 == 0 goto $stack17 = javaType instanceof java.lang.Class,17,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack17 == 0 goto $stack18 = javaType instanceof java.lang.reflect.ParameterizedType,23,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,javaClass#4 = (java.lang.Class) javaType,24,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, javaClass#4 = (java.lang.Class) javaType, 24)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(),25,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(), 25)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack74 == 0 goto $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),25,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),29,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(), 29)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack75 == 0 goto $stack76 = class "Ljava/util/Collection;",29,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack77 == 0 goto $stack78 = class "Ljava/util/Map;",32,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4),35,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4), 35)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack79 == 0 goto $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),35,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 38))), List(Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if rawClass == null goto (branch),19,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack16 == 0 goto $stack17 = javaType instanceof java.lang.Class,17,SourceNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack17 == 0 goto $stack18 = javaType instanceof java.lang.reflect.ParameterizedType,23,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,javaClass#4 = (java.lang.Class) javaType,24,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, javaClass#4 = (java.lang.Class) javaType, 24)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(),25,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack74 = virtualinvoke javaClass#4.<java.lang.Class: boolean isArray()>(), 25)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack74 == 0 goto $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),25,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(),29,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack75 = virtualinvoke javaClass#4.<java.lang.Class: boolean isEnum()>(), 29)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack75 == 0 goto $stack76 = class "Ljava/util/Collection;",29,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack77 == 0 goto $stack78 = class "Ljava/util/Map;",32,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4),35,SimpleNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack79 = virtualinvoke $stack78.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(javaClass#4), 35)) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,if $stack79 == 0 goto $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),35,SimpleNode, path: ) => Node(<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>,$stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(),38,SinkNode, path: (<cz.habarta.typescript.generator.DefaultTypeProcessor: cz.habarta.typescript.generator.TypeProcessor$Result processType(java.lang.reflect.Type,cz.habarta.typescript.generator.TypeProcessor$Context)>, $stack80 = virtualinvoke javaClass#4.<java.lang.Class: java.lang.String getName()>(), 38)))]
 Analysis results
----------------------------
 Number of conflicts: 12
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/typescript-generator/1c03813f0d5593fbea4d3572a6ef028da3f034bd/original-without-dependencies/typescript-generator-core-1.16-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,50400
Time to perform PDG 0,81400
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
