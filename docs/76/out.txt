source(net.rcarz.jiraclient.Field, toJson, 562, $stack90 = new java.text.SimpleDateFormat, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)]) => sink(net.rcarz.jiraclient.Field, toJson, 562, $stack90 = new java.text.SimpleDateFormat, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)])

source(net.rcarz.jiraclient.Field, toJson, 562, d#4 = $stack90, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)]) => sink(net.rcarz.jiraclient.Field, toJson, 562, d#4 = $stack90, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)])

source(net.rcarz.jiraclient.Field, toJson, 560, $stack92 = new net.rcarz.jiraclient.JiraException, [at net.rcarz.jiraclient.Field.toJson(Field.java:560)]) => sink(net.rcarz.jiraclient.Field, toJson, 560, $stack92 = new net.rcarz.jiraclient.JiraException, [at net.rcarz.jiraclient.Field.toJson(Field.java:560)])

source(java.text.SimpleDateFormat, <init>, -1, SimpleDateFormat.<java.text.SimpleDateFormat: java.text.NumberFormat originalNumberFormat> = null, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)]) => sink(java.text.SimpleDateFormat, <init>, -1, SimpleDateFormat.<java.text.SimpleDateFormat: java.text.NumberFormat originalNumberFormat> = null, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)])

source(java.text.SimpleDateFormat, <init>, -1, SimpleDateFormat.<java.text.SimpleDateFormat: int serialVersionOnStream> = null, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)]) => sink(java.text.SimpleDateFormat, <init>, -1, SimpleDateFormat.<java.text.SimpleDateFormat: int serialVersionOnStream> = null, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)])

source(java.text.SimpleDateFormat, <init>, -1, SimpleDateFormat.<java.text.SimpleDateFormat: java.lang.String pattern> = null, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)]) => sink(java.text.SimpleDateFormat, <init>, -1, SimpleDateFormat.<java.text.SimpleDateFormat: java.lang.String pattern> = null, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)])

source(java.text.SimpleDateFormat, <init>, -1, SimpleDateFormat.<java.text.SimpleDateFormat: java.lang.String originalNumberPattern> = null, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)]) => sink(java.text.SimpleDateFormat, <init>, -1, SimpleDateFormat.<java.text.SimpleDateFormat: java.lang.String originalNumberPattern> = null, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)])

source(java.text.SimpleDateFormat, <init>, -1, SimpleDateFormat.<java.text.SimpleDateFormat: char minusSign> = null, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)]) => sink(java.text.SimpleDateFormat, <init>, -1, SimpleDateFormat.<java.text.SimpleDateFormat: char minusSign> = null, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)])

source(java.text.SimpleDateFormat, <init>, -1, SimpleDateFormat.<java.text.SimpleDateFormat: boolean hasFollowingMinusSign> = null, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)]) => sink(java.text.SimpleDateFormat, <init>, -1, SimpleDateFormat.<java.text.SimpleDateFormat: boolean hasFollowingMinusSign> = null, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)])

source(java.text.SimpleDateFormat, <init>, -1, SimpleDateFormat.<java.text.SimpleDateFormat: int defaultCenturyStartYear> = null, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)]) => sink(java.text.SimpleDateFormat, <init>, -1, SimpleDateFormat.<java.text.SimpleDateFormat: int defaultCenturyStartYear> = null, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)])

source(java.text.SimpleDateFormat, <init>, -1, SimpleDateFormat.<java.text.SimpleDateFormat: boolean forceStandaloneForm> = null, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)]) => sink(java.text.SimpleDateFormat, <init>, -1, SimpleDateFormat.<java.text.SimpleDateFormat: boolean forceStandaloneForm> = null, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)])

source(java.text.SimpleDateFormat, <init>, -1, SimpleDateFormat.<java.text.SimpleDateFormat: java.util.Locale locale> = null, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)]) => sink(java.text.SimpleDateFormat, <init>, -1, SimpleDateFormat.<java.text.SimpleDateFormat: java.util.Locale locale> = null, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)])

source(java.text.SimpleDateFormat, <init>, -1, SimpleDateFormat.<java.text.SimpleDateFormat: char[] compiledPattern> = null, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)]) => sink(java.text.SimpleDateFormat, <init>, -1, SimpleDateFormat.<java.text.SimpleDateFormat: char[] compiledPattern> = null, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)])

source(java.text.SimpleDateFormat, <init>, -1, SimpleDateFormat.<java.text.SimpleDateFormat: boolean useDateFormatSymbols> = null, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)]) => sink(java.text.SimpleDateFormat, <init>, -1, SimpleDateFormat.<java.text.SimpleDateFormat: boolean useDateFormatSymbols> = null, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)])

source(java.text.SimpleDateFormat, <init>, -1, SimpleDateFormat.<java.text.SimpleDateFormat: char zeroDigit> = null, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)]) => sink(java.text.SimpleDateFormat, <init>, -1, SimpleDateFormat.<java.text.SimpleDateFormat: char zeroDigit> = null, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)])

source(java.text.SimpleDateFormat, <init>, -1, SimpleDateFormat.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData> = null, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)]) => sink(java.text.SimpleDateFormat, <init>, -1, SimpleDateFormat.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData> = null, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)])

source(java.text.SimpleDateFormat, <init>, -1, SimpleDateFormat.<java.text.SimpleDateFormat: java.util.Date defaultCenturyStart> = null, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)]) => sink(java.text.SimpleDateFormat, <init>, -1, SimpleDateFormat.<java.text.SimpleDateFormat: java.util.Date defaultCenturyStart> = null, [at net.rcarz.jiraclient.Field.toJson(Field.java:562)])

source(net.rcarz.jiraclient.Field, toJson, 559, $stack89 = value instanceof java.sql.Timestamp, [at net.rcarz.jiraclient.Field.toJson(Field.java:559)]) => sink(net.rcarz.jiraclient.Field, toJson, 559, $stack89 = value instanceof java.sql.Timestamp, [at net.rcarz.jiraclient.Field.toJson(Field.java:559)])

source(net.rcarz.jiraclient.Field, toJson, 556, $stack12 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>, [at net.rcarz.jiraclient.Field.toJson(Field.java:556)]) => sink(net.rcarz.jiraclient.Field, toJson, 556, $stack12 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>, [at net.rcarz.jiraclient.Field.toJson(Field.java:556)])

List(Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack70 = new net.rcarz.jiraclient.JiraException,611,SourceNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, specialinvoke $stack70.<net.rcarz.jiraclient.JiraException: void <init>(java.lang.String)>('Field expects a Numeric value'), 611)) => Node(<net.rcarz.jiraclient.JiraException: void <init>(java.lang.String)>,this := @this: net.rcarz.jiraclient.JiraException,-1,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, m = staticinvoke <net.rcarz.jiraclient.Field: net.rcarz.jiraclient.Field$Meta getFieldMetadata(java.lang.String,net.sf.json.JSONObject)>(name, editmeta), 535) => (<net.rcarz.jiraclient.Field: net.rcarz.jiraclient.Field$Meta getFieldMetadata(java.lang.String,net.sf.json.JSONObject)>, specialinvoke $stack6.<net.rcarz.jiraclient.JiraException: void <init>(java.lang.String)>($stack11), 432)) => Node(<net.rcarz.jiraclient.JiraException: void <init>(java.lang.String)>,specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg),30,SinkNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, m = staticinvoke <net.rcarz.jiraclient.Field: net.rcarz.jiraclient.Field$Meta getFieldMetadata(java.lang.String,net.sf.json.JSONObject)>(name, editmeta), 535) => (<net.rcarz.jiraclient.Field: net.rcarz.jiraclient.Field$Meta getFieldMetadata(java.lang.String,net.sf.json.JSONObject)>, specialinvoke $stack6.<net.rcarz.jiraclient.JiraException: void <init>(java.lang.String)>($stack11), 432) => (<net.rcarz.jiraclient.JiraException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 30)))

List(Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack92 = new net.rcarz.jiraclient.JiraException,560,SourceNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, specialinvoke $stack92.<net.rcarz.jiraclient.JiraException: void <init>(java.lang.String)>('Field expects a Timestamp value'), 560)) => Node(<net.rcarz.jiraclient.JiraException: void <init>(java.lang.String)>,this := @this: net.rcarz.jiraclient.JiraException,-1,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, m = staticinvoke <net.rcarz.jiraclient.Field: net.rcarz.jiraclient.Field$Meta getFieldMetadata(java.lang.String,net.sf.json.JSONObject)>(name, editmeta), 535) => (<net.rcarz.jiraclient.Field: net.rcarz.jiraclient.Field$Meta getFieldMetadata(java.lang.String,net.sf.json.JSONObject)>, specialinvoke $stack6.<net.rcarz.jiraclient.JiraException: void <init>(java.lang.String)>($stack11), 432)) => Node(<net.rcarz.jiraclient.JiraException: void <init>(java.lang.String)>,specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg),30,SinkNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, m = staticinvoke <net.rcarz.jiraclient.Field: net.rcarz.jiraclient.Field$Meta getFieldMetadata(java.lang.String,net.sf.json.JSONObject)>(name, editmeta), 535) => (<net.rcarz.jiraclient.Field: net.rcarz.jiraclient.Field$Meta getFieldMetadata(java.lang.String,net.sf.json.JSONObject)>, specialinvoke $stack6.<net.rcarz.jiraclient.JiraException: void <init>(java.lang.String)>($stack11), 432) => (<net.rcarz.jiraclient.JiraException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 30)))

List(Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack92 = new net.rcarz.jiraclient.JiraException,560,SourceNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, specialinvoke $stack92.<net.rcarz.jiraclient.JiraException: void <init>(java.lang.String)>('Field expects a Timestamp value'), 560)) => Node(<net.rcarz.jiraclient.JiraException: void <init>(java.lang.String)>,this := @this: net.rcarz.jiraclient.JiraException,-1,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, m = staticinvoke <net.rcarz.jiraclient.Field: net.rcarz.jiraclient.Field$Meta getFieldMetadata(java.lang.String,net.sf.json.JSONObject)>(name, editmeta), 535) => (<net.rcarz.jiraclient.Field: net.rcarz.jiraclient.Field$Meta getFieldMetadata(java.lang.String,net.sf.json.JSONObject)>, specialinvoke $stack6.<net.rcarz.jiraclient.JiraException: void <init>(java.lang.String)>($stack11), 432)) => Node(<net.rcarz.jiraclient.JiraException: void <init>(java.lang.String)>,specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg),30,SinkNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, m = staticinvoke <net.rcarz.jiraclient.Field: net.rcarz.jiraclient.Field$Meta getFieldMetadata(java.lang.String,net.sf.json.JSONObject)>(name, editmeta), 535) => (<net.rcarz.jiraclient.Field: net.rcarz.jiraclient.Field$Meta getFieldMetadata(java.lang.String,net.sf.json.JSONObject)>, specialinvoke $stack6.<net.rcarz.jiraclient.JiraException: void <init>(java.lang.String)>($stack11), 432) => (<net.rcarz.jiraclient.JiraException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 30)))

List(Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack12 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,556,SourceNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack12 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>, 556)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack14 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,564,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack14 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>, 564)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack55 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,602,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack55 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>, 602)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack57 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,607,SinkNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack57 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>, 607)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack58 = virtualinvoke $stack57.<java.lang.String: boolean equals(java.lang.Object)>("number"),607,SinkNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack58 = virtualinvoke $stack57.<java.lang.String: boolean equals(java.lang.Object)>('number'), 607)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack58 == 0 goto $stack59 = new java.lang.UnsupportedOperationException,607,SinkNode, path: ))

List(Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack12 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,556,SourceNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack12 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>, 556)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack13 = virtualinvoke $stack12.<java.lang.String: boolean equals(java.lang.Object)>("datetime"),556,SourceNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack13 = virtualinvoke $stack12.<java.lang.String: boolean equals(java.lang.Object)>('datetime'), 556)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack13 == 0 goto $stack14 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,556,SourceNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack15 = virtualinvoke $stack14.<java.lang.String: boolean equals(java.lang.Object)>("issuetype"),564,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack15 = virtualinvoke $stack14.<java.lang.String: boolean equals(java.lang.Object)>('issuetype'), 564)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack15 != 0 goto $stack16 = new net.sf.json.JSONObject,564,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack30 != 0 goto $stack16 = new net.sf.json.JSONObject,569,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack33 = virtualinvoke $stack32.<java.lang.String: boolean equals(java.lang.Object)>("user"),565,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack33 = virtualinvoke $stack32.<java.lang.String: boolean equals(java.lang.Object)>('user'), 565)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack33 != 0 goto $stack16 = new net.sf.json.JSONObject,565,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack35 = virtualinvoke $stack34.<java.lang.String: boolean equals(java.lang.Object)>("resolution"),568,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack35 = virtualinvoke $stack34.<java.lang.String: boolean equals(java.lang.Object)>('resolution'), 568)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack35 == 0 goto $stack36 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,568,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack37 != 0 goto $stack38 = new net.sf.json.JSONObject,577,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>("issuelink"),581,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>('issuelink'), 581)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack52 == 0 goto $stack53 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,581,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack53 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,589,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack53 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>, 589)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack54 = virtualinvoke $stack53.<java.lang.String: boolean equals(java.lang.Object)>("string"),589,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack54 = virtualinvoke $stack53.<java.lang.String: boolean equals(java.lang.Object)>('string'), 589)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack54 == 0 goto $stack55 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,589,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack55 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,602,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack55 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>, 602)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack56 = virtualinvoke $stack55.<java.lang.String: boolean equals(java.lang.Object)>("timetracking"),602,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack56 = virtualinvoke $stack55.<java.lang.String: boolean equals(java.lang.Object)>('timetracking'), 602)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack56 == 0 goto $stack57 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,602,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack58 = virtualinvoke $stack57.<java.lang.String: boolean equals(java.lang.Object)>("number"),607,SinkNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack58 = virtualinvoke $stack57.<java.lang.String: boolean equals(java.lang.Object)>('number'), 607)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack58 == 0 goto $stack59 = new java.lang.UnsupportedOperationException,607,SinkNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack65 != 0 goto return value,608,SinkNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack66 != 0 goto return value,613,SinkNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack68 = value instanceof java.lang.Float,613,SinkNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack68 = value instanceof java.lang.Float, 613)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack68 != 0 goto return value,613,SinkNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack69 != 0 goto return value,613,SinkNode, path: ))

List(Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack12 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,556,SourceNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack12 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>, 556)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack13 = virtualinvoke $stack12.<java.lang.String: boolean equals(java.lang.Object)>("datetime"),556,SourceNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack13 = virtualinvoke $stack12.<java.lang.String: boolean equals(java.lang.Object)>('datetime'), 556)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack13 == 0 goto $stack14 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,556,SourceNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack15 = virtualinvoke $stack14.<java.lang.String: boolean equals(java.lang.Object)>("issuetype"),564,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack15 = virtualinvoke $stack14.<java.lang.String: boolean equals(java.lang.Object)>('issuetype'), 564)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack15 != 0 goto $stack16 = new net.sf.json.JSONObject,564,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack30 != 0 goto $stack16 = new net.sf.json.JSONObject,569,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack33 = virtualinvoke $stack32.<java.lang.String: boolean equals(java.lang.Object)>("user"),565,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack33 = virtualinvoke $stack32.<java.lang.String: boolean equals(java.lang.Object)>('user'), 565)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack33 != 0 goto $stack16 = new net.sf.json.JSONObject,565,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack35 = virtualinvoke $stack34.<java.lang.String: boolean equals(java.lang.Object)>("resolution"),568,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack35 = virtualinvoke $stack34.<java.lang.String: boolean equals(java.lang.Object)>('resolution'), 568)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack35 == 0 goto $stack36 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,568,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack37 != 0 goto $stack38 = new net.sf.json.JSONObject,577,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>("issuelink"),581,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>('issuelink'), 581)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack52 == 0 goto $stack53 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,581,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack53 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,589,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack53 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>, 589)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack54 = virtualinvoke $stack53.<java.lang.String: boolean equals(java.lang.Object)>("string"),589,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack54 = virtualinvoke $stack53.<java.lang.String: boolean equals(java.lang.Object)>('string'), 589)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack54 == 0 goto $stack55 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,589,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack55 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,602,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack55 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>, 602)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack56 = virtualinvoke $stack55.<java.lang.String: boolean equals(java.lang.Object)>("timetracking"),602,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack56 = virtualinvoke $stack55.<java.lang.String: boolean equals(java.lang.Object)>('timetracking'), 602)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack56 == 0 goto $stack57 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,602,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack58 = virtualinvoke $stack57.<java.lang.String: boolean equals(java.lang.Object)>("number"),607,SinkNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack58 = virtualinvoke $stack57.<java.lang.String: boolean equals(java.lang.Object)>('number'), 607)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack58 == 0 goto $stack59 = new java.lang.UnsupportedOperationException,607,SinkNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack65 != 0 goto return value,608,SinkNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack66 != 0 goto return value,613,SinkNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack68 = value instanceof java.lang.Float,613,SinkNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack68 = value instanceof java.lang.Float, 613)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack68 != 0 goto return value,613,SinkNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack69 != 0 goto return value,613,SinkNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,throw $stack70,611,SinkNode, path: ))

List(Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack12 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,556,SourceNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack12 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>, 556)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack13 = virtualinvoke $stack12.<java.lang.String: boolean equals(java.lang.Object)>("datetime"),556,SourceNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack13 = virtualinvoke $stack12.<java.lang.String: boolean equals(java.lang.Object)>('datetime'), 556)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack13 == 0 goto $stack14 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,556,SourceNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack15 = virtualinvoke $stack14.<java.lang.String: boolean equals(java.lang.Object)>("issuetype"),564,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack15 = virtualinvoke $stack14.<java.lang.String: boolean equals(java.lang.Object)>('issuetype'), 564)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack15 != 0 goto $stack16 = new net.sf.json.JSONObject,564,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack30 != 0 goto $stack16 = new net.sf.json.JSONObject,569,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack33 = virtualinvoke $stack32.<java.lang.String: boolean equals(java.lang.Object)>("user"),565,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack33 = virtualinvoke $stack32.<java.lang.String: boolean equals(java.lang.Object)>('user'), 565)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack33 != 0 goto $stack16 = new net.sf.json.JSONObject,565,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack35 = virtualinvoke $stack34.<java.lang.String: boolean equals(java.lang.Object)>("resolution"),568,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack35 = virtualinvoke $stack34.<java.lang.String: boolean equals(java.lang.Object)>('resolution'), 568)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack35 == 0 goto $stack36 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,568,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack37 != 0 goto $stack38 = new net.sf.json.JSONObject,577,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>("issuelink"),581,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>('issuelink'), 581)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack52 == 0 goto $stack53 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,581,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack53 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,589,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack53 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>, 589)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack54 = virtualinvoke $stack53.<java.lang.String: boolean equals(java.lang.Object)>("string"),589,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack54 = virtualinvoke $stack53.<java.lang.String: boolean equals(java.lang.Object)>('string'), 589)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack54 == 0 goto $stack55 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,589,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack55 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,602,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack55 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>, 602)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack56 = virtualinvoke $stack55.<java.lang.String: boolean equals(java.lang.Object)>("timetracking"),602,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack56 = virtualinvoke $stack55.<java.lang.String: boolean equals(java.lang.Object)>('timetracking'), 602)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack56 == 0 goto $stack57 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,602,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack57 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,607,SinkNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack57 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>, 607)))

List(Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack12 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,556,SourceNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack12 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>, 556)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack13 = virtualinvoke $stack12.<java.lang.String: boolean equals(java.lang.Object)>("datetime"),556,SourceNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack13 = virtualinvoke $stack12.<java.lang.String: boolean equals(java.lang.Object)>('datetime'), 556)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack13 == 0 goto $stack14 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,556,SourceNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack15 = virtualinvoke $stack14.<java.lang.String: boolean equals(java.lang.Object)>("issuetype"),564,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack15 = virtualinvoke $stack14.<java.lang.String: boolean equals(java.lang.Object)>('issuetype'), 564)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack15 != 0 goto $stack16 = new net.sf.json.JSONObject,564,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack30 != 0 goto $stack16 = new net.sf.json.JSONObject,569,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack33 = virtualinvoke $stack32.<java.lang.String: boolean equals(java.lang.Object)>("user"),565,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack33 = virtualinvoke $stack32.<java.lang.String: boolean equals(java.lang.Object)>('user'), 565)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack33 != 0 goto $stack16 = new net.sf.json.JSONObject,565,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack35 = virtualinvoke $stack34.<java.lang.String: boolean equals(java.lang.Object)>("resolution"),568,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack35 = virtualinvoke $stack34.<java.lang.String: boolean equals(java.lang.Object)>('resolution'), 568)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack35 == 0 goto $stack36 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,568,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack37 != 0 goto $stack38 = new net.sf.json.JSONObject,577,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>("issuelink"),581,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>('issuelink'), 581)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack52 == 0 goto $stack53 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,581,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack53 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,589,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack53 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>, 589)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack54 = virtualinvoke $stack53.<java.lang.String: boolean equals(java.lang.Object)>("string"),589,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack54 = virtualinvoke $stack53.<java.lang.String: boolean equals(java.lang.Object)>('string'), 589)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack54 == 0 goto $stack55 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,589,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack55 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,602,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack55 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>, 602)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack56 = virtualinvoke $stack55.<java.lang.String: boolean equals(java.lang.Object)>("timetracking"),602,SimpleNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack56 = virtualinvoke $stack55.<java.lang.String: boolean equals(java.lang.Object)>('timetracking'), 602)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack56 == 0 goto $stack57 = m.<net.rcarz.jiraclient.Field$Meta: java.lang.String type>,602,SimpleNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack58 = virtualinvoke $stack57.<java.lang.String: boolean equals(java.lang.Object)>("number"),607,SinkNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack58 = virtualinvoke $stack57.<java.lang.String: boolean equals(java.lang.Object)>('number'), 607)) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,if $stack58 == 0 goto $stack59 = new java.lang.UnsupportedOperationException,607,SinkNode, path: ) => Node(<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>,$stack65 = value instanceof java.lang.Integer,608,SinkNode, path: (<net.rcarz.jiraclient.Field: java.lang.Object toJson(java.lang.String,java.lang.Object,net.sf.json.JSONObject)>, $stack65 = value instanceof java.lang.Integer, 608)))

