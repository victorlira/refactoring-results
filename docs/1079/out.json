[
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack4 = new java.lang.NullPointerException,686,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack4.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null content in the Template'), 686)) => Node(<java.lang.NullPointerException: void <init>(java.lang.String)>,l0 := @this: java.lang.NullPointerException,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679)) => Node(<java.lang.NullPointerException: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1),70,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679) => (<java.lang.NullPointerException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1), 70)) SINK=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack14 = new java.lang.NullPointerException,679,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679)) => Node(<java.lang.NullPointerException: void <init>(java.lang.String)>,l0 := @this: java.lang.NullPointerException,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679)) => Node(<java.lang.NullPointerException: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1),70,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679) => (<java.lang.NullPointerException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1), 70))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack14 = new java.lang.NullPointerException",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.BaseAssertionGenerator",
					"method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
					"line": 679
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.BaseAssertionGenerator",
	"method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
	"line": 679
},{
	"class": "java.lang.NullPointerException",
	"method": "<java.lang.NullPointerException: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.NullPointerException",
	"method": "<java.lang.NullPointerException: void <init>(java.lang.String)>",
	"line": 70
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack4 = new java.lang.NullPointerException",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.BaseAssertionGenerator",
					"method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
					"line": 686
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.BaseAssertionGenerator",
	"method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
	"line": 686
},{
	"class": "java.lang.NullPointerException",
	"method": "<java.lang.NullPointerException: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.NullPointerException",
	"method": "<java.lang.NullPointerException: void <init>(java.lang.String)>",
	"line": 70
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1)",
				"location": {
					"file": "",
					"class": "java.lang.NullPointerException",
					"method": "<java.lang.NullPointerException: void <init>(java.lang.String)>",
					"line": 70
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack14 = new java.lang.NullPointerException,679,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679)) => Node(<java.lang.NullPointerException: void <init>(java.lang.String)>,l0 := @this: java.lang.NullPointerException,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679) => (<java.lang.NullPointerException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1),62,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679) => (<java.lang.NullPointerException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1), 70) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62)) SINK=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack4 = new java.lang.NullPointerException,686,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack4.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null content in the Template'), 686)) => Node(<java.lang.NullPointerException: void <init>(java.lang.String)>,l0 := @this: java.lang.NullPointerException,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679) => (<java.lang.NullPointerException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1),62,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679) => (<java.lang.NullPointerException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1), 70) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack4 = new java.lang.NullPointerException",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.BaseAssertionGenerator",
					"method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
					"line": 686
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.BaseAssertionGenerator",
	"method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
	"line": 686
},{
	"class": "java.lang.NullPointerException",
	"method": "<java.lang.NullPointerException: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.String)>",
	"line": 62
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack14 = new java.lang.NullPointerException",
				"location": {
					"file": "",
					"class": "org.assertj.assertions.generator.BaseAssertionGenerator",
					"method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
					"line": 679
				},
				"stackTrace": [{
	"class": "org.assertj.assertions.generator.BaseAssertionGenerator",
	"method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
	"line": 679
},{
	"class": "java.lang.NullPointerException",
	"method": "<java.lang.NullPointerException: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.String)>",
	"line": 62
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1)",
				"location": {
					"file": "",
					"class": "java.lang.RuntimeException",
					"method": "<java.lang.RuntimeException: void <init>(java.lang.String)>",
					"line": 62
				}
			}
		]
	}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = <org.assertj.assertions.generator.Template$Type: org.assertj.assertions.generator.Template$Type ABSTRACT_ASSERT_CLASS>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void setAbstractAssertionClassTemplate(org.assertj.assertions.generator.Template)>",
  "line": "195"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAbstractAssertionClassTemplate(org.assertj.assertions.generator.Template)>(abstractClassAssertionTemplate), 163)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAbstractAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(abstractAssertionClassTemplate, $stack2), 195)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "templateType := @parameter1: org.assertj.assertions.generator.Template$Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if templateType == $stack2 goto $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "681"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = <org.assertj.assertions.generator.Template$Type: org.assertj.assertions.generator.Template$Type HIERARCHICAL_ASSERT_CLASS>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void setHierarchicalAssertionClassTemplate(org.assertj.assertions.generator.Template)>",
  "line": "190"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setHierarchicalAssertionClassTemplate(org.assertj.assertions.generator.Template)>(hierarchicalClassAssertionTemplate), 162)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setHierarchicalAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(hierarchicalAssertionClassTemplate, $stack2), 190)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "templateType := @parameter1: org.assertj.assertions.generator.Template$Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Expecting a Template type to be \'')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "682"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Expecting a Template type to be \''), 682)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(templateType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "682"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(templateType), 682)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\' but was \'')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "682"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\' but was \''), 682)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10), 683)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\'')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\''), 683)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(), 683)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13), 683)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.Template: java.lang.String content>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.Template",
  "method": "<org.assertj.assertions.generator.Template: java.lang.String getContent()>",
  "line": "117"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 685)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.Template",
  "method": "<org.assertj.assertions.generator.Template: java.lang.String getContent()>",
  "line": "117"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = <org.assertj.assertions.generator.Template$Type: org.assertj.assertions.generator.Template$Type HIERARCHICAL_ASSERT_CLASS>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void setHierarchicalAssertionClassTemplate(org.assertj.assertions.generator.Template)>",
  "line": "190"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setHierarchicalAssertionClassTemplate(org.assertj.assertions.generator.Template)>(hierarchicalClassAssertionTemplate), 162)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setHierarchicalAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(hierarchicalAssertionClassTemplate, $stack2), 190)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "templateType := @parameter1: org.assertj.assertions.generator.Template$Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if templateType == $stack2 goto $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "681"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type type>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.Template",
  "method": "<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>",
  "line": "121"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack2 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(), 681)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack10 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(), 683)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\' but was \'')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "682"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\' but was \''), 682)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10), 683)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\'')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\''), 683)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(), 683)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13), 683)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.Template: java.lang.String content>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.Template",
  "method": "<org.assertj.assertions.generator.Template: java.lang.String getContent()>",
  "line": "117"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 685)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "685"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 685)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack3 != null goto return",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "685"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = new java.lang.NullPointerException",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "686"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack4.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null content in the Template'), 686)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack4.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null content in the Template')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "686"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack4.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null content in the Template'), 686)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = new java.lang.StringBuilder",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "682"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>(), 682)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "682"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>(), 682)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type type>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.Template",
  "method": "<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>",
  "line": "121"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack2 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(), 681)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.Template",
  "method": "<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>",
  "line": "121"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\'')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\''), 683)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(), 683)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13), 683)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "685"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 685)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack3 != null goto return",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "685"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = new java.lang.NullPointerException",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "679"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "679"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = <org.assertj.assertions.generator.Template$Type: org.assertj.assertions.generator.Template$Type ABSTRACT_ASSERT_CLASS>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void setAbstractAssertionClassTemplate(org.assertj.assertions.generator.Template)>",
  "line": "195"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAbstractAssertionClassTemplate(org.assertj.assertions.generator.Template)>(abstractClassAssertionTemplate), 163)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAbstractAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(abstractAssertionClassTemplate, $stack2), 195)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "templateType := @parameter1: org.assertj.assertions.generator.Template$Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Expecting a Template type to be \'')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "682"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Expecting a Template type to be \''), 682)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(templateType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "682"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(templateType), 682)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\' but was \'')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "682"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\' but was \''), 682)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10), 683)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\'')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\''), 683)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(), 683)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13), 683)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(templateType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "682"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(templateType), 682)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\' but was \'')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "682"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\' but was \''), 682)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10), 683)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\'')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\''), 683)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(), 683)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13), 683)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type type>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.Template",
  "method": "<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>",
  "line": "121"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack2 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(), 681)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "681"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack2 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(), 681)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if templateType == $stack2 goto $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "681"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "681"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack2 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(), 681)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if templateType == $stack2 goto $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "681"
},
"stackTrace": [""]
}]
}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.Template: java.lang.String content>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.Template",
  "method": "<org.assertj.assertions.generator.Template: java.lang.String getContent()>",
  "line": "117"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 685)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.Template",
  "method": "<org.assertj.assertions.generator.Template: java.lang.String getContent()>",
  "line": "117"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type type>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.Template",
  "method": "<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>",
  "line": "121"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack2 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(), 681)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack10 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(), 683)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\' but was \'')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "682"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\' but was \''), 682)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10), 683)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\'')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\''), 683)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(), 683)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13), 683)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.Template: java.lang.String content>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.Template",
  "method": "<org.assertj.assertions.generator.Template: java.lang.String getContent()>",
  "line": "117"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 685)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "685"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 685)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack3 != null goto return",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "685"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = new java.lang.NullPointerException",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "686"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack4.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null content in the Template'), 686)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack4.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null content in the Template')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "686"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack4.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null content in the Template'), 686)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = new java.lang.StringBuilder",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "682"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>(), 682)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "682"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>(), 682)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type type>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.Template",
  "method": "<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>",
  "line": "121"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack2 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(), 681)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.Template",
  "method": "<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>",
  "line": "121"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = <org.assertj.assertions.generator.Template$Type: org.assertj.assertions.generator.Template$Type HAS_FOR_REAL_NUMBER>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void setHasAssertionTemplateForRealNumber(org.assertj.assertions.generator.Template)>",
  "line": "210"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setHasAssertionTemplateForRealNumber(org.assertj.assertions.generator.Template)>(hasAssertionTemplateForRealNumber), 166)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setHasAssertionTemplateForRealNumber(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(hasAssertionTemplateForRealNumber, $stack2), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "templateType := @parameter1: org.assertj.assertions.generator.Template$Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if templateType == $stack2 goto $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "681"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\'')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\''), 683)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(), 683)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13), 683)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "685"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 685)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack3 != null goto return",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "685"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = new java.lang.NullPointerException",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "679"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "679"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = <org.assertj.assertions.generator.Template$Type: org.assertj.assertions.generator.Template$Type HAS_FOR_REAL_NUMBER>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void setHasAssertionTemplateForRealNumber(org.assertj.assertions.generator.Template)>",
  "line": "210"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setHasAssertionTemplateForRealNumber(org.assertj.assertions.generator.Template)>(hasAssertionTemplateForRealNumber), 166)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setHasAssertionTemplateForRealNumber(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(hasAssertionTemplateForRealNumber, $stack2), 210)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "templateType := @parameter1: org.assertj.assertions.generator.Template$Type",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "-1"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Expecting a Template type to be \'')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "682"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Expecting a Template type to be \''), 682)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(templateType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "682"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(templateType), 682)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\' but was \'')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "682"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\' but was \''), 682)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10), 683)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\'')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\''), 683)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(), 683)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13), 683)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(templateType)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "682"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(templateType), 682)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\' but was \'')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "682"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\' but was \''), 682)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10), 683)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\'')",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\''), 683)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(), 683)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13)",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "683"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13), 683)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type type>",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.Template",
  "method": "<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>",
  "line": "121"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack2 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(), 681)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "681"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack2 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(), 681)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if templateType == $stack2 goto $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "681"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "681"
},
"stackTrace": ["(<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)","(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack2 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(), 681)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if templateType == $stack2 goto $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>()",
"location": {
  "file": "",
  "class": "org.assertj.assertions.generator.BaseAssertionGenerator",
  "method": "<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>",
  "line": "681"
},
"stackTrace": [""]
}]
}
}

]
