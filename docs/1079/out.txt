SOURCE=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack4 = new java.lang.NullPointerException,686,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack4.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null content in the Template'), 686)) => Node(<java.lang.NullPointerException: void <init>(java.lang.String)>,l0 := @this: java.lang.NullPointerException,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679)) => Node(<java.lang.NullPointerException: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1),70,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679) => (<java.lang.NullPointerException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1), 70))
SINK=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack4 = new java.lang.NullPointerException,686,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack4.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null content in the Template'), 686)) => Node(<java.lang.NullPointerException: void <init>(java.lang.String)>,l0 := @this: java.lang.NullPointerException,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679)) => Node(<java.lang.NullPointerException: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1),70,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679) => (<java.lang.NullPointerException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1), 70))

SOURCE=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack4 = new java.lang.NullPointerException,686,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack4.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null content in the Template'), 686)) => Node(<java.lang.NullPointerException: void <init>(java.lang.String)>,l0 := @this: java.lang.NullPointerException,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679)) => Node(<java.lang.NullPointerException: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1),70,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679) => (<java.lang.NullPointerException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1), 70))
SINK=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack14 = new java.lang.NullPointerException,679,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679)) => Node(<java.lang.NullPointerException: void <init>(java.lang.String)>,l0 := @this: java.lang.NullPointerException,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679)) => Node(<java.lang.NullPointerException: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1),70,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679) => (<java.lang.NullPointerException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1), 70))

SOURCE=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack14 = new java.lang.NullPointerException,679,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679)) => Node(<java.lang.NullPointerException: void <init>(java.lang.String)>,l0 := @this: java.lang.NullPointerException,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679) => (<java.lang.NullPointerException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1),62,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679) => (<java.lang.NullPointerException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1), 70) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62))
SINK=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack14 = new java.lang.NullPointerException,679,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679)) => Node(<java.lang.NullPointerException: void <init>(java.lang.String)>,l0 := @this: java.lang.NullPointerException,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679) => (<java.lang.NullPointerException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1),62,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679) => (<java.lang.NullPointerException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1), 70) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62))

SOURCE=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack14 = new java.lang.NullPointerException,679,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679)) => Node(<java.lang.NullPointerException: void <init>(java.lang.String)>,l0 := @this: java.lang.NullPointerException,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679) => (<java.lang.NullPointerException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1),62,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679) => (<java.lang.NullPointerException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1), 70) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62))
SINK=>BASE: Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack4 = new java.lang.NullPointerException,686,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack4.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null content in the Template'), 686)) => Node(<java.lang.NullPointerException: void <init>(java.lang.String)>,l0 := @this: java.lang.NullPointerException,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679) => (<java.lang.NullPointerException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1), 70)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1),62,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679) => (<java.lang.NullPointerException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.RuntimeException: void <init>(java.lang.String)>(l1), 70) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack4 = new java.lang.NullPointerException,686,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack4.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null content in the Template'), 686)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,specialinvoke $stack4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Expecting a non null content in the Template"),686,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack4.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null content in the Template'), 686)))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(),685,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 685)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,if $stack3 != null goto return,685,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.Template: java.lang.String getContent()>,$stack1 = this.<org.assertj.assertions.generator.Template: java.lang.String content>,117,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 685)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(),685,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 685)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,if $stack3 != null goto return,685,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAbstractAssertionClassTemplate(org.assertj.assertions.generator.Template)>,$stack2 = <org.assertj.assertions.generator.Template$Type: org.assertj.assertions.generator.Template$Type ABSTRACT_ASSERT_CLASS>,195,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAbstractAssertionClassTemplate(org.assertj.assertions.generator.Template)>(abstractClassAssertionTemplate), 163) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAbstractAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(abstractAssertionClassTemplate, $stack2), 195)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,templateType := @parameter1: org.assertj.assertions.generator.Template$Type,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expecting a Template type to be \'"),682,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Expecting a Template type to be \''), 682)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(templateType),682,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(templateType), 682)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' but was \'"),682,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\' but was \''), 682)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10),683,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10), 683)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'"),683,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\''), 683)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(),683,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(), 683)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13),683,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13), 683)))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void setHierarchicalAssertionClassTemplate(org.assertj.assertions.generator.Template)>,$stack2 = <org.assertj.assertions.generator.Template$Type: org.assertj.assertions.generator.Template$Type HIERARCHICAL_ASSERT_CLASS>,190,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setHierarchicalAssertionClassTemplate(org.assertj.assertions.generator.Template)>(hierarchicalClassAssertionTemplate), 162) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setHierarchicalAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(hierarchicalAssertionClassTemplate, $stack2), 190)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,templateType := @parameter1: org.assertj.assertions.generator.Template$Type,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,if templateType == $stack2 goto $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(),681,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'"),683,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\''), 683)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(),683,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(), 683)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13),683,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13), 683)))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack6 = new java.lang.StringBuilder,682,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>(), 682)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>(),682,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>(), 682)))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void setAbstractAssertionClassTemplate(org.assertj.assertions.generator.Template)>,$stack2 = <org.assertj.assertions.generator.Template$Type: org.assertj.assertions.generator.Template$Type ABSTRACT_ASSERT_CLASS>,195,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAbstractAssertionClassTemplate(org.assertj.assertions.generator.Template)>(abstractClassAssertionTemplate), 163) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAbstractAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(abstractAssertionClassTemplate, $stack2), 195)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,templateType := @parameter1: org.assertj.assertions.generator.Template$Type,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,if templateType == $stack2 goto $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(),681,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(templateType),682,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(templateType), 682)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' but was \'"),682,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\' but was \''), 682)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10),683,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10), 683)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'"),683,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\''), 683)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(),683,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(), 683)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13),683,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13), 683)))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack2 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(),681,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack2 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(), 681)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,if templateType == $stack2 goto $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(),681,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>,$stack1 = this.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type type>,121,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack2 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(), 681)) => Node(<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>,return $stack1,121,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>,$stack1 = this.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type type>,121,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack2 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(), 681)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack10 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(),683,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack10 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(), 683)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' but was \'"),682,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\' but was \''), 682)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10),683,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10), 683)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'"),683,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\''), 683)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(),683,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(), 683)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13),683,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13), 683)))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void setHierarchicalAssertionClassTemplate(org.assertj.assertions.generator.Template)>,$stack2 = <org.assertj.assertions.generator.Template$Type: org.assertj.assertions.generator.Template$Type HIERARCHICAL_ASSERT_CLASS>,190,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setHierarchicalAssertionClassTemplate(org.assertj.assertions.generator.Template)>(hierarchicalClassAssertionTemplate), 162) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setHierarchicalAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(hierarchicalAssertionClassTemplate, $stack2), 190)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,templateType := @parameter1: org.assertj.assertions.generator.Template$Type,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expecting a Template type to be \'"),682,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Expecting a Template type to be \''), 682)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(templateType),682,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(templateType), 682)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' but was \'"),682,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\' but was \''), 682)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10),683,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10), 683)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'"),683,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\''), 683)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(),683,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(), 683)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13),683,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13), 683)))

List(Node(<org.assertj.assertions.generator.Template: java.lang.String getContent()>,$stack1 = this.<org.assertj.assertions.generator.Template: java.lang.String content>,117,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 685)) => Node(<org.assertj.assertions.generator.Template: java.lang.String getContent()>,return $stack1,117,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack14 = new java.lang.NullPointerException,679,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>("Expecting a non null Template"),679,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679)))

List(Node(<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>,$stack1 = this.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type type>,121,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack2 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(), 681)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack2 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(),681,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack2 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(), 681)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,if templateType == $stack2 goto $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(),681,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack4 = new java.lang.NullPointerException,686,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack4.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null content in the Template'), 686)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,specialinvoke $stack4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Expecting a non null content in the Template"),686,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack4.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null content in the Template'), 686)))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(),685,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 685)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,if $stack3 != null goto return,685,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.Template: java.lang.String getContent()>,$stack1 = this.<org.assertj.assertions.generator.Template: java.lang.String content>,117,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 685)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(),685,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 685)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,if $stack3 != null goto return,685,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'"),683,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\''), 683)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(),683,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(), 683)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13),683,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13), 683)))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack6 = new java.lang.StringBuilder,682,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>(), 682)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>(),682,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>(), 682)))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(templateType),682,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(templateType), 682)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' but was \'"),682,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\' but was \''), 682)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10),683,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10), 683)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'"),683,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\''), 683)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(),683,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(), 683)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13),683,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13), 683)))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void setHasAssertionTemplateForRealNumber(org.assertj.assertions.generator.Template)>,$stack2 = <org.assertj.assertions.generator.Template$Type: org.assertj.assertions.generator.Template$Type HAS_FOR_REAL_NUMBER>,210,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setHasAssertionTemplateForRealNumber(org.assertj.assertions.generator.Template)>(hasAssertionTemplateForRealNumber), 166) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setHasAssertionTemplateForRealNumber(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(hasAssertionTemplateForRealNumber, $stack2), 210)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,templateType := @parameter1: org.assertj.assertions.generator.Template$Type,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expecting a Template type to be \'"),682,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Expecting a Template type to be \''), 682)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(templateType),682,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(templateType), 682)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' but was \'"),682,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\' but was \''), 682)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10),683,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10), 683)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'"),683,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\''), 683)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(),683,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(), 683)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13),683,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13), 683)))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack2 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(),681,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack2 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(), 681)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,if templateType == $stack2 goto $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(),681,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>,$stack1 = this.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type type>,121,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack2 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(), 681)) => Node(<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>,return $stack1,121,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>,$stack1 = this.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type type>,121,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack2 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(), 681)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack10 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(),683,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack10 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(), 683)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' but was \'"),682,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\' but was \''), 682)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10),683,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack10), 683)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'"),683,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\''), 683)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(),683,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(), 683)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13),683,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13), 683)))

List(Node(<org.assertj.assertions.generator.Template: java.lang.String getContent()>,$stack1 = this.<org.assertj.assertions.generator.Template: java.lang.String content>,117,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(), 685)) => Node(<org.assertj.assertions.generator.Template: java.lang.String getContent()>,return $stack1,117,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack14 = new java.lang.NullPointerException,679,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>("Expecting a non null Template"),679,SinkNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, specialinvoke $stack14.<java.lang.NullPointerException: void <init>(java.lang.String)>('Expecting a non null Template'), 679)))

List(Node(<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>,$stack1 = this.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type type>,121,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack2 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(), 681)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,$stack2 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(),681,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>, $stack2 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: org.assertj.assertions.generator.Template$Type getType()>(), 681)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,if templateType == $stack2 goto $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(),681,SinkNode, path: ))

List(Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void setHasAssertionTemplateForRealNumber(org.assertj.assertions.generator.Template)>,$stack2 = <org.assertj.assertions.generator.Template$Type: org.assertj.assertions.generator.Template$Type HAS_FOR_REAL_NUMBER>,210,SourceNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setHasAssertionTemplateForRealNumber(org.assertj.assertions.generator.Template)>(hasAssertionTemplateForRealNumber), 166) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setHasAssertionTemplateForRealNumber(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(hasAssertionTemplateForRealNumber, $stack2), 210)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,templateType := @parameter1: org.assertj.assertions.generator.Template$Type,-1,SimpleNode, path: (<org.assertj.assertions.generator.BaseAssertionGenerator: void <init>(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template)>, virtualinvoke this.<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>(classAssertionTemplate), 161) => (<org.assertj.assertions.generator.BaseAssertionGenerator: void setAssertionClassTemplate(org.assertj.assertions.generator.Template)>, staticinvoke <org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>(assertionClassTemplate, $stack2), 185)) => Node(<org.assertj.assertions.generator.BaseAssertionGenerator: void checkTemplateParameter(org.assertj.assertions.generator.Template,org.assertj.assertions.generator.Template$Type)>,if templateType == $stack2 goto $stack3 = virtualinvoke assertionClassTemplate.<org.assertj.assertions.generator.Template: java.lang.String getContent()>(),681,SinkNode, path: ))

