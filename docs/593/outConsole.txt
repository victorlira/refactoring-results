Running soot scenario analytics-java;com.segment.analytics.internal.AnalyticsClient;run();ba863112c230f0def9b42213c59cc8441236c6ba
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/analytics-java/ba863112c230f0def9b42213c59cc8441236c6ba/original-without-dependencies/analytics-2.1.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,67500
Time to perform Confluence 1 Inter 0,65300
Configure Soot Confluence 2 Inter 0,31100
Time to perform Confluence 2 Inter 0,15100
Visited methods: 40
Depth limit: 5
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/analytics-java/ba863112c230f0def9b42213c59cc8441236c6ba/original-without-dependencies/analytics-2.1.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,62500
Runtime: 0.033s
Time to perform OA Inter 0,72900
OA Inter Visited methods: 56
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/analytics-java/ba863112c230f0def9b42213c59cc8441236c6ba/original-without-dependencies/analytics-2.1.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,46600
Time to perform DFP Inter 0,55000
Depth limit: 5
CONFLICTS: []
Visited methods: 20
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/analytics-java/ba863112c230f0def9b42213c59cc8441236c6ba/original-without-dependencies/analytics-2.1.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,64100
Time to perform DFP Inter 0,82000
Depth limit: 5
CONFLICTS: []
Visited methods: 30
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/analytics-java/ba863112c230f0def9b42213c59cc8441236c6ba/original-without-dependencies/analytics-2.1.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,56600
Time to perform PDG 0,69400
CONFLICTS: [List(Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,if $stack7 != 0 goto (branch),199,SourceNode, path: ) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,$stack24 = this.<com.segment.analytics.internal.AnalyticsClient$Looper: com.segment.analytics.internal.AnalyticsClient this$0>,216,SourceNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, $stack24 = this.<com.segment.analytics.internal.AnalyticsClient$Looper: com.segment.analytics.internal.AnalyticsClient this$0>, 216)) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,$stack25 = staticinvoke <com.segment.analytics.internal.AnalyticsClient: java.lang.Boolean access$300(com.segment.analytics.internal.AnalyticsClient,java.util.List)>($stack24, messages),216,SourceNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, $stack25 = staticinvoke <com.segment.analytics.internal.AnalyticsClient: java.lang.Boolean access$300(com.segment.analytics.internal.AnalyticsClient,java.util.List)>($stack24, messages), 216)) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,$stack26 = virtualinvoke $stack25.<java.lang.Boolean: boolean booleanValue()>(),216,SourceNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, $stack26 = virtualinvoke $stack25.<java.lang.Boolean: boolean booleanValue()>(), 216)) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,if $stack26 == 0 goto $stack27 = interfaceinvoke messages.<java.util.List: boolean isEmpty()>(),216,SourceNode, path: ) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,isOverflow = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1),218,SourceNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, isOverflow = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1), 218)) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,$stack29 = virtualinvoke isOverflow.<java.lang.Boolean: boolean booleanValue()>(),199,SourceNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, $stack29 = virtualinvoke isOverflow.<java.lang.Boolean: boolean booleanValue()>(), 199)) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,if $stack29 != 0 goto $stack30 = staticinvoke <com.segment.analytics.internal.AnalyticsClient: java.util.Map access$400()>(),199,SourceNode, path: ) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,$stack51 = virtualinvoke isBlockingSignal.<java.lang.Boolean: boolean booleanValue()>(),232,SimpleNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, $stack51 = virtualinvoke isBlockingSignal.<java.lang.Boolean: boolean booleanValue()>(), 232)) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,if $stack51 == 0 goto (branch),232,SimpleNode, path: ) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,$stack46 = this.<com.segment.analytics.internal.AnalyticsClient$Looper: com.segment.analytics.internal.AnalyticsClient this$0>,229,SinkNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, $stack46 = this.<com.segment.analytics.internal.AnalyticsClient$Looper: com.segment.analytics.internal.AnalyticsClient this$0>, 229))), List(Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,if $stack20 < $stack22 goto $stack67 = 0,214,SourceNode, path: ) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,$stack67 = 0,221,SourceNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, isOverflow = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack67), 214)) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,isOverflow = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack67),214,SourceNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, isOverflow = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack67), 214)) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,$stack29 = virtualinvoke isOverflow.<java.lang.Boolean: boolean booleanValue()>(),199,SourceNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, $stack29 = virtualinvoke isOverflow.<java.lang.Boolean: boolean booleanValue()>(), 199)) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,if $stack29 != 0 goto $stack30 = staticinvoke <com.segment.analytics.internal.AnalyticsClient: java.util.Map access$400()>(),199,SourceNode, path: ) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,$stack51 = virtualinvoke isBlockingSignal.<java.lang.Boolean: boolean booleanValue()>(),232,SimpleNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, $stack51 = virtualinvoke isBlockingSignal.<java.lang.Boolean: boolean booleanValue()>(), 232)) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,if $stack51 == 0 goto (branch),232,SimpleNode, path: ) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,$stack46 = this.<com.segment.analytics.internal.AnalyticsClient$Looper: com.segment.analytics.internal.AnalyticsClient this$0>,229,SinkNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, $stack46 = this.<com.segment.analytics.internal.AnalyticsClient$Looper: com.segment.analytics.internal.AnalyticsClient this$0>, 229))), List(Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,$stack26 = virtualinvoke $stack25.<java.lang.Boolean: boolean booleanValue()>(),216,SourceNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, $stack26 = virtualinvoke $stack25.<java.lang.Boolean: boolean booleanValue()>(), 216)) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,if $stack26 == 0 goto $stack27 = interfaceinvoke messages.<java.util.List: boolean isEmpty()>(),216,SourceNode, path: ) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,isOverflow = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1),218,SourceNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, isOverflow = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1), 218)) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,$stack29 = virtualinvoke isOverflow.<java.lang.Boolean: boolean booleanValue()>(),199,SourceNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, $stack29 = virtualinvoke isOverflow.<java.lang.Boolean: boolean booleanValue()>(), 199)) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,if $stack29 != 0 goto $stack30 = staticinvoke <com.segment.analytics.internal.AnalyticsClient: java.util.Map access$400()>(),199,SourceNode, path: ) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,$stack51 = virtualinvoke isBlockingSignal.<java.lang.Boolean: boolean booleanValue()>(),232,SimpleNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, $stack51 = virtualinvoke isBlockingSignal.<java.lang.Boolean: boolean booleanValue()>(), 232)) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,if $stack51 == 0 goto (branch),232,SimpleNode, path: ) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,$stack46 = this.<com.segment.analytics.internal.AnalyticsClient$Looper: com.segment.analytics.internal.AnalyticsClient this$0>,229,SinkNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, $stack46 = this.<com.segment.analytics.internal.AnalyticsClient$Looper: com.segment.analytics.internal.AnalyticsClient this$0>, 229))), List(Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,isBlockingSignal = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack71),213,SourceNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, isBlockingSignal = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack71), 213)) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,$stack51 = virtualinvoke isBlockingSignal.<java.lang.Boolean: boolean booleanValue()>(),232,SimpleNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, $stack51 = virtualinvoke isBlockingSignal.<java.lang.Boolean: boolean booleanValue()>(), 232)) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,if $stack51 == 0 goto (branch),232,SimpleNode, path: ) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,messages = $stack50,230,SimpleNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, $stack74 = interfaceinvoke messages.<java.util.List: boolean isEmpty()>(), 206)) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,$stack25 = staticinvoke <com.segment.analytics.internal.AnalyticsClient: java.lang.Boolean access$300(com.segment.analytics.internal.AnalyticsClient,java.util.List)>($stack24, messages),216,SourceNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, $stack25 = staticinvoke <com.segment.analytics.internal.AnalyticsClient: java.lang.Boolean access$300(com.segment.analytics.internal.AnalyticsClient,java.util.List)>($stack24, messages), 216)) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,$stack26 = virtualinvoke $stack25.<java.lang.Boolean: boolean booleanValue()>(),216,SourceNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, $stack26 = virtualinvoke $stack25.<java.lang.Boolean: boolean booleanValue()>(), 216)) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,if $stack26 == 0 goto $stack27 = interfaceinvoke messages.<java.util.List: boolean isEmpty()>(),216,SourceNode, path: ) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,isOverflow = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1),218,SourceNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, isOverflow = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1), 218)) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,$stack29 = virtualinvoke isOverflow.<java.lang.Boolean: boolean booleanValue()>(),199,SourceNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, $stack29 = virtualinvoke isOverflow.<java.lang.Boolean: boolean booleanValue()>(), 199)) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,if $stack29 != 0 goto $stack30 = staticinvoke <com.segment.analytics.internal.AnalyticsClient: java.util.Map access$400()>(),199,SourceNode, path: ) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,$stack46 = this.<com.segment.analytics.internal.AnalyticsClient$Looper: com.segment.analytics.internal.AnalyticsClient this$0>,229,SinkNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, $stack46 = this.<com.segment.analytics.internal.AnalyticsClient$Looper: com.segment.analytics.internal.AnalyticsClient this$0>, 229))), List(Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,if $stack27 != 0 goto (branch),221,SourceNode, path: ) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,$stack29 = virtualinvoke isOverflow.<java.lang.Boolean: boolean booleanValue()>(),199,SourceNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, $stack29 = virtualinvoke isOverflow.<java.lang.Boolean: boolean booleanValue()>(), 199)) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,if $stack29 != 0 goto $stack30 = staticinvoke <com.segment.analytics.internal.AnalyticsClient: java.util.Map access$400()>(),199,SourceNode, path: ) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,$stack51 = virtualinvoke isBlockingSignal.<java.lang.Boolean: boolean booleanValue()>(),232,SimpleNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, $stack51 = virtualinvoke isBlockingSignal.<java.lang.Boolean: boolean booleanValue()>(), 232)) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,if $stack51 == 0 goto (branch),232,SimpleNode, path: ) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,$stack46 = this.<com.segment.analytics.internal.AnalyticsClient$Looper: com.segment.analytics.internal.AnalyticsClient this$0>,229,SinkNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, $stack46 = this.<com.segment.analytics.internal.AnalyticsClient$Looper: com.segment.analytics.internal.AnalyticsClient this$0>, 229))), List(Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,isOverflow = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1),218,SourceNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, isOverflow = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1), 218)) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,$stack29 = virtualinvoke isOverflow.<java.lang.Boolean: boolean booleanValue()>(),199,SourceNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, $stack29 = virtualinvoke isOverflow.<java.lang.Boolean: boolean booleanValue()>(), 199)) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,if $stack29 != 0 goto $stack30 = staticinvoke <com.segment.analytics.internal.AnalyticsClient: java.util.Map access$400()>(),199,SourceNode, path: ) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,$stack51 = virtualinvoke isBlockingSignal.<java.lang.Boolean: boolean booleanValue()>(),232,SimpleNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, $stack51 = virtualinvoke isBlockingSignal.<java.lang.Boolean: boolean booleanValue()>(), 232)) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,if $stack51 == 0 goto (branch),232,SimpleNode, path: ) => Node(<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>,$stack46 = this.<com.segment.analytics.internal.AnalyticsClient$Looper: com.segment.analytics.internal.AnalyticsClient this$0>,229,SinkNode, path: (<com.segment.analytics.internal.AnalyticsClient$Looper: void run()>, $stack46 = this.<com.segment.analytics.internal.AnalyticsClient$Looper: com.segment.analytics.internal.AnalyticsClient this$0>, 229)))]
 Analysis results
----------------------------
 Number of conflicts: 6
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/analytics-java/ba863112c230f0def9b42213c59cc8441236c6ba/original-without-dependencies/analytics-2.1.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,46100
Time to perform PDG 0,77400
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
