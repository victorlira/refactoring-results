SOURCE=>BASE: Node(<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>,classLoader = $stack10,60,SourceNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, classLoader = $stack10, 60)) => Node(<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>,loader := @parameter1: java.net.URLClassLoader,-1,SimpleNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, specialinvoke this.<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>(fileName, classLoader), 64)) => Node(<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>,in = virtualinvoke loader.<java.net.URLClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($stack13),106,SinkNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, specialinvoke this.<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>(fileName, classLoader), 64) => (<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>, in = virtualinvoke loader.<java.net.URLClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($stack13), 106)) => Node(<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>,tmp$564944564 = (java.io.InputStream) in,-1,SimpleNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, specialinvoke this.<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>(fileName, classLoader), 64) => (<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>, tmp$564944564 = (java.io.InputStream) in, -1)) => Node(<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>,specialinvoke tmp$1680147911.<org.objectweb.asm.ClassReader: void <init>(java.io.InputStream)>(tmp$564944564),109,SinkNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, specialinvoke this.<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>(fileName, classLoader), 64) => (<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>, specialinvoke tmp$1680147911.<org.objectweb.asm.ClassReader: void <init>(java.io.InputStream)>(tmp$564944564), 109))
SINK=>BASE: Node(<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>,$stack10 = new java.net.URLClassLoader,60,SourceNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, specialinvoke $stack10.<java.net.URLClassLoader: void <init>(java.net.URL[])>($stack11), 60)) => Node(<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>,classLoader = $stack10,60,SourceNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, classLoader = $stack10, 60)) => Node(<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>,loader := @parameter1: java.net.URLClassLoader,-1,SimpleNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, specialinvoke this.<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>(fileName, classLoader), 64)) => Node(<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>,in = virtualinvoke loader.<java.net.URLClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($stack13),106,SinkNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, specialinvoke this.<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>(fileName, classLoader), 64) => (<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>, in = virtualinvoke loader.<java.net.URLClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($stack13), 106)) => Node(<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>,tmp$815593047 = (java.io.InputStream) in,-1,SimpleNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, specialinvoke this.<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>(fileName, classLoader), 64) => (<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>, tmp$815593047 = (java.io.InputStream) in, -1)) => Node(<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>,specialinvoke tmp$861500069.<org.objectweb.asm.ClassReader: void <init>(java.io.InputStream)>(tmp$815593047),109,SinkNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, specialinvoke this.<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>(fileName, classLoader), 64) => (<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>, specialinvoke tmp$861500069.<org.objectweb.asm.ClassReader: void <init>(java.io.InputStream)>(tmp$815593047), 109))

SOURCE=>BASE: Node(<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>,classLoader = $stack10,60,SourceNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, classLoader = $stack10, 60)) => Node(<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>,loader := @parameter1: java.net.URLClassLoader,-1,SimpleNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, specialinvoke this.<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>(fileName, classLoader), 64)) => Node(<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>,in = virtualinvoke loader.<java.net.URLClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($stack13),106,SinkNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, specialinvoke this.<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>(fileName, classLoader), 64) => (<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>, in = virtualinvoke loader.<java.net.URLClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($stack13), 106)) => Node(<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>,tmp$1901945192 = (java.io.InputStream) in,-1,SimpleNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, specialinvoke this.<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>(fileName, classLoader), 64) => (<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>, tmp$1901945192 = (java.io.InputStream) in, -1)) => Node(<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>,virtualinvoke tmp$1901945192.<java.io.InputStream: void close()>(),115,SinkNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, specialinvoke this.<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>(fileName, classLoader), 64) => (<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>, virtualinvoke tmp$1901945192.<java.io.InputStream: void close()>(), 115))
SINK=>BASE: Node(<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>,$stack10 = new java.net.URLClassLoader,60,SourceNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, specialinvoke $stack10.<java.net.URLClassLoader: void <init>(java.net.URL[])>($stack11), 60)) => Node(<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>,classLoader = $stack10,60,SourceNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, classLoader = $stack10, 60)) => Node(<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>,loader := @parameter1: java.net.URLClassLoader,-1,SimpleNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, specialinvoke this.<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>(fileName, classLoader), 64)) => Node(<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>,in = virtualinvoke loader.<java.net.URLClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($stack13),106,SinkNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, specialinvoke this.<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>(fileName, classLoader), 64) => (<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>, in = virtualinvoke loader.<java.net.URLClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($stack13), 106)) => Node(<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>,tmp$1234328865 = (java.io.InputStream) in,-1,SimpleNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, specialinvoke this.<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>(fileName, classLoader), 64) => (<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>, tmp$1234328865 = (java.io.InputStream) in, -1)) => Node(<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>,virtualinvoke tmp$1234328865.<java.io.InputStream: void close()>(),115,SinkNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, specialinvoke this.<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>(fileName, classLoader), 64) => (<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>, virtualinvoke tmp$1234328865.<java.io.InputStream: void close()>(), 115))

SOURCE=>BASE: Node(<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>,classLoader = $stack10,60,SourceNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, classLoader = $stack10, 60)) => Node(<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>,loader := @parameter1: java.net.URLClassLoader,-1,SimpleNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, specialinvoke this.<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>(fileName, classLoader), 64)) => Node(<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>,in = virtualinvoke loader.<java.net.URLClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($stack13),106,SinkNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, specialinvoke this.<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>(fileName, classLoader), 64) => (<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>, in = virtualinvoke loader.<java.net.URLClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($stack13), 106))
SINK=>BASE: Node(<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>,$stack10 = new java.net.URLClassLoader,60,SourceNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, specialinvoke $stack10.<java.net.URLClassLoader: void <init>(java.net.URL[])>($stack11), 60)) => Node(<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>,classLoader = $stack10,60,SourceNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, classLoader = $stack10, 60)) => Node(<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>,loader := @parameter1: java.net.URLClassLoader,-1,SimpleNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, specialinvoke this.<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>(fileName, classLoader), 64)) => Node(<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>,in = virtualinvoke loader.<java.net.URLClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($stack13),106,SinkNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, specialinvoke this.<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>(fileName, classLoader), 64) => (<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>, in = virtualinvoke loader.<java.net.URLClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($stack13), 106))

SOURCE=>BASE: Node(<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>,classLoader = $stack10,60,SourceNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, classLoader = $stack10, 60)) => Node(<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>,specialinvoke this.<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>(fileName, classLoader),64,SinkNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, specialinvoke this.<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>(fileName, classLoader), 64))
SINK=>BASE: Node(<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>,$stack10 = new java.net.URLClassLoader,60,SourceNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, specialinvoke $stack10.<java.net.URLClassLoader: void <init>(java.net.URL[])>($stack11), 60)) => Node(<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>,classLoader = $stack10,60,SourceNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, classLoader = $stack10, 60)) => Node(<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>,specialinvoke this.<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>(fileName, classLoader),64,SinkNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, specialinvoke this.<org.designwizard.extractor.asm.ASMExtractor: void processClass(java.lang.String,java.net.URLClassLoader)>(fileName, classLoader), 64))

source(java.net.URLClassLoader, <init>, -1, URLClassLoader.<java.net.URLClassLoader: java.util.WeakHashMap closeables> = null, [at org.designwizard.extractor.asm.ASMExtractor.processDir(ASMExtractor.java:60)]) => sink(java.net.URLClassLoader, <init>, -1, URLClassLoader.<java.net.URLClassLoader: java.util.WeakHashMap closeables> = null, [at org.designwizard.extractor.asm.ASMExtractor.processDir(ASMExtractor.java:60)])

source(org.designwizard.extractor.asm.ASMExtractor, processDir, 60, $stack10 = new java.net.URLClassLoader, [at org.designwizard.extractor.asm.ASMExtractor.processDir(ASMExtractor.java:60)]) => sink(org.designwizard.extractor.asm.ASMExtractor, processDir, 60, $stack10 = new java.net.URLClassLoader, [at org.designwizard.extractor.asm.ASMExtractor.processDir(ASMExtractor.java:60)])

source(org.designwizard.extractor.asm.ASMExtractor, processDir, 60, $stack11 = newarray (java.net.URL)[1], [at org.designwizard.extractor.asm.ASMExtractor.processDir(ASMExtractor.java:60)]) => sink(org.designwizard.extractor.asm.ASMExtractor, processDir, 60, $stack11 = newarray (java.net.URL)[1], [at org.designwizard.extractor.asm.ASMExtractor.processDir(ASMExtractor.java:60)])

source(org.designwizard.extractor.asm.ASMExtractor, processDir, 60, $stack12 = new java.io.File, [at org.designwizard.extractor.asm.ASMExtractor.processDir(ASMExtractor.java:60)]) => sink(org.designwizard.extractor.asm.ASMExtractor, processDir, 60, $stack12 = new java.io.File, [at org.designwizard.extractor.asm.ASMExtractor.processDir(ASMExtractor.java:60)])

source(org.designwizard.extractor.asm.ASMExtractor, processDir, 60, $stack11[0] = $stack15, [at org.designwizard.extractor.asm.ASMExtractor.processDir(ASMExtractor.java:60)]) => sink(org.designwizard.extractor.asm.ASMExtractor, processDir, 60, $stack11[0] = $stack15, [at org.designwizard.extractor.asm.ASMExtractor.processDir(ASMExtractor.java:60)])

source(org.designwizard.extractor.asm.ASMExtractor, processDir, 60, classLoader = $stack10, [at org.designwizard.extractor.asm.ASMExtractor.processDir(ASMExtractor.java:60)]) => sink(org.designwizard.extractor.asm.ASMExtractor, processDir, 60, classLoader = $stack10, [at org.designwizard.extractor.asm.ASMExtractor.processDir(ASMExtractor.java:60)])

source(java.io.File, <init>, -1, File.<java.io.File: java.io.File$PathStatus status> = null, [at org.designwizard.extractor.asm.ASMExtractor.processDir(ASMExtractor.java:60)]) => sink(java.io.File, <init>, -1, File.<java.io.File: java.io.File$PathStatus status> = null, [at org.designwizard.extractor.asm.ASMExtractor.processDir(ASMExtractor.java:60)])

source(java.io.File, <init>, -1, File.<java.io.File: java.nio.file.Path filePath> = null, [at org.designwizard.extractor.asm.ASMExtractor.processDir(ASMExtractor.java:60)]) => sink(java.io.File, <init>, -1, File.<java.io.File: java.nio.file.Path filePath> = null, [at org.designwizard.extractor.asm.ASMExtractor.processDir(ASMExtractor.java:60)])

List(Node(<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>,classLoader = $stack10,60,SourceNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, classLoader = $stack10, 60)) => Node(<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>,virtualinvoke classLoader.<java.net.URLClassLoader: void close()>(),77,SinkNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, virtualinvoke classLoader.<java.net.URLClassLoader: void close()>(), 77)))

List(Node(<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>,classLoader = $stack10,60,SourceNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, classLoader = $stack10, 60)) => Node(<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>,virtualinvoke classLoader.<java.net.URLClassLoader: void close()>(),77,SinkNode, path: (<org.designwizard.extractor.asm.ASMExtractor: void processDir(java.lang.String)>, virtualinvoke classLoader.<java.net.URLClassLoader: void close()>(), 77)))

