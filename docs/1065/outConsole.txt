Running soot scenario splunk-library-javalogging;com.splunk.logging.HttpEventCollectorLoggingHandler;HttpEventCollectorLoggingHandler();f80bc59f417077de739ae23c10be9b1658219bed
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/splunk-library-javalogging/f80bc59f417077de739ae23c10be9b1658219bed/original-without-dependencies/splunk-library-javalogging-1.8.0.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,57900
Time to perform Confluence 1 Inter 2,11000
Configure Soot Confluence 2 Inter 0,17100
Time to perform Confluence 2 Inter 1,28100
Visited methods: 112
Depth limit: 5
CONFLICTS: [SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),852,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(), 852))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),852,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(), 852)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_size_bytes", 10240L),153,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_size_bytes', 10240L), 153)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,maxEventsBatchSize := @parameter6: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack27 = maxEventsBatchSize cmp 0L,129,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack27 = maxEventsBatchSize cmp 0L, 129))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = neg l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_size_bytes", 10240L),153,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_size_bytes', 10240L), 153)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,maxEventsBatchSize := @parameter6: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack27 = maxEventsBatchSize cmp 0L,129,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack27 = maxEventsBatchSize cmp 0L, 129)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: java.lang.String substring(int,int)>,specialinvoke $stack13.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3),1967,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack13.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3), 1967))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = l1 + -1,2876,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack11 = l1 - 1, 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: java.lang.String substring(int,int)>,specialinvoke $stack13.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3),1967,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack13.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3), 1967)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack20 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0),587,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack20 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0), 587))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack20 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0),587,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack20 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0), 587)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors0(boolean)>(l1),2671,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors0(boolean)>(l1),2671,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_size_bytes", 10240L),153,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_size_bytes', 10240L), 153))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = neg l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_size_bytes", 10240L),153,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_size_bytes', 10240L), 153)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack9 = virtualinvoke l1#4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack8),442,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(), 184)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack79 = (com.splunk.logging.EventBodySerializer) $stack78,184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack79 = (com.splunk.logging.EventBodySerializer) $stack78, 184)) => Node(<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,eventBodySerializer := @parameter0: com.splunk.logging.EventBodySerializer,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184)) => Node(<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,virtualinvoke $stack2.<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>(eventBodySerializer),241,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184) => (<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>, virtualinvoke $stack2.<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>(eventBodySerializer), 241))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack9 = virtualinvoke l1#4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack8),442,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(), 184)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack79 = (com.splunk.logging.EventBodySerializer) $stack78,184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack79 = (com.splunk.logging.EventBodySerializer) $stack78, 184)) => Node(<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,eventBodySerializer := @parameter0: com.splunk.logging.EventBodySerializer,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184)) => Node(<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,virtualinvoke $stack2.<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>(eventBodySerializer),241,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184) => (<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>, virtualinvoke $stack2.<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>(eventBodySerializer), 241)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack5 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,404,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack5 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 404))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack5 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,404,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack5 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 404)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("disableCertificateValidation", "false"),205,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('disableCertificateValidation', 'false'), 205)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack15 = l0.<java.lang.String: char[] value>,1354,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack15 = l0.<java.lang.String: char[] value>, 1354)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack16 = lengthof $stack15,1354,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack16 = lengthof $stack15, 1354)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack18 = (long) $stack16,1354,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack18 = (long) $stack16, 1354)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack19 = $stack18 - $stack17,1354,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack19 = $stack18 - $stack17, 1354))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)) => Node(<java.lang.Boolean: boolean parseBoolean(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack15 = l0.<java.lang.String: char[] value>,1354,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack15 = l0.<java.lang.String: char[] value>, 1354)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack16 = lengthof $stack15,1354,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack16 = lengthof $stack15, 1354)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack18 = (long) $stack16,1354,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack18 = (long) $stack16, 1354)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2381,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2381))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2381,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2381)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0.<java.lang.Class: java.lang.Class newInstanceCallerCache> = l3,437,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l0.<java.lang.Class: java.lang.Class newInstanceCallerCache> = l3, 437))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0.<java.lang.Class: java.lang.Class newInstanceCallerCache> = l3,437,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l0.<java.lang.Class: java.lang.Class newInstanceCallerCache> = l3, 437)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(),2497,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(), 2497)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack10 = (java.lang.Class$ReflectionData) $stack9,2497,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack10 = (java.lang.Class$ReflectionData) $stack9, 2497))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(),2497,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(), 2497)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),2660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>,2666,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>, 2666))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,$stack6 = virtualinvoke l0.<java.lang.Class: boolean isInterface()>(),2666,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, $stack6 = virtualinvoke l0.<java.lang.Class: boolean isInterface()>(), 2666)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("disableCertificateValidation", "false"),205,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('disableCertificateValidation', 'false'), 205)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack15 = l0.<java.lang.String: char[] value>,1354,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack15 = l0.<java.lang.String: char[] value>, 1354)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack16 = lengthof $stack15,1354,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack16 = lengthof $stack15, 1354)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack18 = (long) $stack16,1354,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack18 = (long) $stack16, 1354)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack19 = $stack18 - $stack17,1354,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack19 = $stack18 - $stack17, 1354))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)) => Node(<java.lang.Boolean: boolean parseBoolean(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack15 = l0.<java.lang.String: char[] value>,1354,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack15 = l0.<java.lang.String: char[] value>, 1354)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack16 = lengthof $stack15,1354,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack16 = lengthof $stack15, 1354)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack18 = (long) $stack16,1354,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack18 = (long) $stack16, 1354)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.String: int length()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l5 = virtualinvoke l0.<java.lang.String: int length()>(), 557)) => Node(<java.lang.String: int length()>,$stack1 = l0.<java.lang.String: char[] value>,623,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l5 = virtualinvoke l0.<java.lang.String: int length()>(), 557) => (<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)) => Node(<java.lang.String: int length()>,$stack2 = lengthof $stack1,623,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l5 = virtualinvoke l0.<java.lang.String: int length()>(), 557))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.String: int length()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l5 = virtualinvoke l0.<java.lang.String: int length()>(), 557)) => Node(<java.lang.String: int length()>,$stack1 = l0.<java.lang.String: char[] value>,623,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l5 = virtualinvoke l0.<java.lang.String: int length()>(), 557) => (<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("url", null),139,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('url', null), 139)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,Url := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack61 = new java.lang.StringBuilder,116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, specialinvoke $stack61.<java.lang.StringBuilder: void <init>()>(), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Url),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Url), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/services/collector/raw"),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('/services/collector/raw'), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.String toString()>(),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.String toString()>(), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack65 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($stack64),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack65 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($stack64), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack66 = virtualinvoke $stack65.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>(),117,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack66 = virtualinvoke $stack65.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>(), 117))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("url", null),139,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('url', null), 139)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,Url := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Url),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Url), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/services/collector/raw"),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('/services/collector/raw'), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.String toString()>(),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.String toString()>(), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack65 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($stack64),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack65 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($stack64), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack66 = virtualinvoke $stack65.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>(),117,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack66 = virtualinvoke $stack65.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>(), 117)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = l1 + -1,2876,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack11 = l1 - 1, 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3),2351,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3),2351,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,token = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("token", null),142,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, token = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('token', null), 142)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,token := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,this.<com.splunk.logging.HttpEventCollectorSender: java.lang.String token> = token,105,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, this.<com.splunk.logging.HttpEventCollectorSender: java.lang.String token> = token, 105))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,token = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("token", null),142,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, token = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('token', null), 142)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,token := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,this.<com.splunk.logging.HttpEventCollectorSender: java.lang.String token> = token,105,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, this.<com.splunk.logging.HttpEventCollectorSender: java.lang.String token> = token, 105)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: void <init>(char[],int,int)>,l3 := @parameter2: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack6 = l2 + l3,207,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, $stack6 = l2 + l3, 207))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = l1 + -1,2876,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack11 = l1 - 1, 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: void <init>(char[],int,int)>,l3 := @parameter2: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack6 = l2 + l3,207,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, $stack6 = l2 + l3, 207)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("type", null),148,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('type', null), 148)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,type := @parameter3: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,this.<com.splunk.logging.HttpEventCollectorSender: java.lang.String type> = type,107,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, this.<com.splunk.logging.HttpEventCollectorSender: java.lang.String type> = type, 107))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("type", null),148,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('type', null), 148)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,type := @parameter3: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,this.<com.splunk.logging.HttpEventCollectorSender: java.lang.String type> = type,107,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, this.<com.splunk.logging.HttpEventCollectorSender: java.lang.String type> = type, 107)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("type", null),148,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('type', null), 148)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,type := @parameter3: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack20 = virtualinvoke $stack19.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(type),112,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack20 = virtualinvoke $stack19.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(type), 112))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("type", null),148,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('type', null), 148)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,type := @parameter3: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack20 = virtualinvoke $stack19.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(type),112,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack20 = virtualinvoke $stack19.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(type), 112)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3),2351,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3),2351,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.String: char charAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.String: char charAt(int)>,$stack5 = l0.<java.lang.String: char[] value>,660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563) => (<java.lang.String: char charAt(int)>, $stack5 = l0.<java.lang.String: char[] value>, 660)) => Node(<java.lang.String: char charAt(int)>,$stack6 = $stack5[l1],660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack9 = virtualinvoke l1#4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack8),442,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack9 = virtualinvoke l1#4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack8),442,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,$stack8 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),848,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,$stack8 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),848,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("send_mode", "sequential"),155,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('send_mode', 'sequential'), 155)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,sendModeStr := @parameter7: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack33 = virtualinvoke sendModeStr.<java.lang.String: boolean equals(java.lang.Object)>("sequential"),141,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack33 = virtualinvoke sendModeStr.<java.lang.String: boolean equals(java.lang.Object)>('sequential'), 141))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("send_mode", "sequential"),155,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('send_mode', 'sequential'), 155)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,sendModeStr := @parameter7: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack33 = virtualinvoke sendModeStr.<java.lang.String: boolean equals(java.lang.Object)>("sequential"),141,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack33 = virtualinvoke sendModeStr.<java.lang.String: boolean equals(java.lang.Object)>('sequential'), 141)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3),2351,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3),2351,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("disableCertificateValidation", "false"),205,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('disableCertificateValidation', 'false'), 205)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,$stack7 = l0.<java.lang.String: char[] value>,1106,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack7 = l0.<java.lang.String: char[] value>, 1106)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,$stack8 = lengthof $stack7,1109,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack8 = lengthof $stack7, 1109))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)) => Node(<java.lang.Boolean: boolean parseBoolean(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,$stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8),1109,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(),2497,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(), 2497)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack10 = (java.lang.Class$ReflectionData) $stack9,2497,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack10 = (java.lang.Class$ReflectionData) $stack9, 2497))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(),2497,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(), 2497)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2493,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l2 = l0.<java.lang.Class: int classRedefinedCount>, 2493))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2493,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l2 = l0.<java.lang.Class: int classRedefinedCount>, 2493)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("type", null),148,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('type', null), 148)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,type := @parameter3: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,this.<com.splunk.logging.HttpEventCollectorSender: java.lang.String type> = type,107,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, this.<com.splunk.logging.HttpEventCollectorSender: java.lang.String type> = type, 107))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("type", null),148,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('type', null), 148)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,type := @parameter3: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,this.<com.splunk.logging.HttpEventCollectorSender: java.lang.String type> = type,107,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, this.<com.splunk.logging.HttpEventCollectorSender: java.lang.String type> = type, 107)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("url", null),139,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('url', null), 139)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,Url := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack61 = new java.lang.StringBuilder,116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, specialinvoke $stack61.<java.lang.StringBuilder: void <init>()>(), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Url),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Url), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/services/collector/raw"),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('/services/collector/raw'), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.String toString()>(),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.String toString()>(), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack65 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($stack64),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack65 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($stack64), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack66 = virtualinvoke $stack65.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>(),117,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack66 = virtualinvoke $stack65.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>(), 117)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,urlBuilder = virtualinvoke $stack66.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>("channel", channel),118,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, urlBuilder = virtualinvoke $stack66.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>('channel', channel), 118))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,urlBuilder = virtualinvoke $stack66.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>("channel", channel),118,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, urlBuilder = virtualinvoke $stack66.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>('channel', channel), 118)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),2660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>,2666,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>, 2666))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,$stack6 = virtualinvoke l0.<java.lang.Class: boolean isInterface()>(),2666,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, $stack6 = virtualinvoke l0.<java.lang.Class: boolean isInterface()>(), 2666)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_interval", 10000L),151,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = neg l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_interval", 10000L),151,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = l1 + -1,2876,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack11 = l1 - 1, 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack11 = l0.<java.lang.Class: java.lang.Class newInstanceCallerCache>,435,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack11 = l0.<java.lang.Class: java.lang.Class newInstanceCallerCache>, 435))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack11 = l0.<java.lang.Class: java.lang.Class newInstanceCallerCache>,435,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack11 = l0.<java.lang.Class: java.lang.Class newInstanceCallerCache>, 435)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2381,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2381))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2381,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2381)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack21 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0),583,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack21 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0), 583))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack21 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0),583,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack21 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0), 583)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: java.lang.String substring(int,int)>,specialinvoke $stack13.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3),1967,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack13.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3), 1967))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = l1 + -1,2876,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack11 = l1 - 1, 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: java.lang.String substring(int,int)>,specialinvoke $stack13.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3),1967,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack13.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3), 1967)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,batchCount = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_size_count", 10L),152,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, batchCount = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_size_count', 10L), 152)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,maxEventsBatchCount := @parameter5: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,this.<com.splunk.logging.HttpEventCollectorSender: long maxEventsBatchCount> = maxEventsBatchCount,132,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, this.<com.splunk.logging.HttpEventCollectorSender: long maxEventsBatchCount> = maxEventsBatchCount, 132))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = neg l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,batchCount = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_size_count", 10L),152,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, batchCount = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_size_count', 10L), 152)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,maxEventsBatchCount := @parameter5: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,this.<com.splunk.logging.HttpEventCollectorSender: long maxEventsBatchCount> = maxEventsBatchCount,132,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, this.<com.splunk.logging.HttpEventCollectorSender: long maxEventsBatchCount> = maxEventsBatchCount, 132)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,return $stack11,260,SinkNode, path: )
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = neg l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,return $stack11,260,SinkNode, path: ), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack5 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,404,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack5 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 404))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack5 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,404,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack5 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 404)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack22 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0),580,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack22 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0), 580))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack22 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0),580,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack22 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0), 580)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack9 = virtualinvoke l1#4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack8),442,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack9 = virtualinvoke l1#4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack8),442,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2363,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2363))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2363,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2363)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4),266,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack49 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>("include_thread_name", 1),161,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack49 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_thread_name', 1), 161)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean includeThreadName> = $stack49,161,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean includeThreadName> = $stack49, 161))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4),266,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack49 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>("include_thread_name", 1),161,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack49 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_thread_name', 1), 161)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean includeThreadName> = $stack49,161,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean includeThreadName> = $stack49, 161)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack9 = virtualinvoke l1#4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack8),442,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack9 = virtualinvoke l1#4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack8),442,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_size_bytes", 10240L),153,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_size_bytes', 10240L), 153)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,maxEventsBatchSize := @parameter6: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack27 = maxEventsBatchSize cmp 0L,129,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack27 = maxEventsBatchSize cmp 0L, 129))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = neg l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_size_bytes", 10240L),153,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_size_bytes', 10240L), 153)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,maxEventsBatchSize := @parameter6: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack27 = maxEventsBatchSize cmp 0L,129,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack27 = maxEventsBatchSize cmp 0L, 129)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,staticinvoke <sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(l3, l0, null, l2#5),436,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, staticinvoke <sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(l3, l0, null, l2#5), 436))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,staticinvoke <sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(l3, l0, null, l2#5),436,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, staticinvoke <sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(l3, l0, null, l2#5), 436)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,$stack1 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>,689,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,$stack1 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>,689,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("disableCertificateValidation", "false"),205,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('disableCertificateValidation', 'false'), 205)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,$stack3 = l0.<java.lang.String: char[] value>,1106,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack3 = l0.<java.lang.String: char[] value>, 1106)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,$stack4 = lengthof $stack3,1106,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack4 = lengthof $stack3, 1106))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("type", null),148,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('type', null), 148)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,type := @parameter3: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack2 = l1.<java.lang.String: char[] value>, 1106)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,$stack2 = l1.<java.lang.String: char[] value>,1106,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack2 = l1.<java.lang.String: char[] value>, 1106)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,staticinvoke <sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(l3, l0, null, l2#5),436,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, staticinvoke <sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(l3, l0, null, l2#5), 436))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,staticinvoke <sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(l3, l0, null, l2#5),436,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, staticinvoke <sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(l3, l0, null, l2#5), 436)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),2660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>,2666,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>, 2666))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,$stack6 = virtualinvoke l0.<java.lang.Class: boolean isInterface()>(),2666,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, $stack6 = virtualinvoke l0.<java.lang.Class: boolean isInterface()>(), 2666)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack31 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("sourcetype", null),132,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack31 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('sourcetype', null), 132)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sourcetype", $stack31),131,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>('sourcetype', $stack31), 131))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack31 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("sourcetype", null),132,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack31 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('sourcetype', null), 132)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sourcetype", $stack31),131,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>('sourcetype', $stack31), 131)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2381,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2381))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2381,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2381)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2493,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l2 = l0.<java.lang.Class: int classRedefinedCount>, 2493))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2493,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l2 = l0.<java.lang.Class: int classRedefinedCount>, 2493)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,token = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("token", null),142,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, token = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('token', null), 142)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,token := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,this.<com.splunk.logging.HttpEventCollectorSender: java.lang.String token> = token,105,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, this.<com.splunk.logging.HttpEventCollectorSender: java.lang.String token> = token, 105))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,token = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("token", null),142,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, token = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('token', null), 142)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,token := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,this.<com.splunk.logging.HttpEventCollectorSender: java.lang.String token> = token,105,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, this.<com.splunk.logging.HttpEventCollectorSender: java.lang.String token> = token, 105)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack4 = newarray (java.lang.Object)[1],260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('%d', $stack4), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%d", $stack4),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('%d', $stack4), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack26 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0),572,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack26 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0), 572))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack26 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0),572,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack26 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0), 572)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor> = l2,424,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor> = l2, 424))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor> = l2,424,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor> = l2, 424)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("url", null),139,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('url', null), 139)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,Url := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack61 = new java.lang.StringBuilder,116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, specialinvoke $stack61.<java.lang.StringBuilder: void <init>()>(), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Url),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Url), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/services/collector/raw"),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('/services/collector/raw'), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.String toString()>(),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.String toString()>(), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack65 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($stack64),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack65 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($stack64), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack66 = virtualinvoke $stack65.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>(),117,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack66 = virtualinvoke $stack65.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>(), 117)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,urlBuilder = virtualinvoke $stack66.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>("channel", channel),118,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, urlBuilder = virtualinvoke $stack66.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>('channel', channel), 118))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,urlBuilder = virtualinvoke $stack66.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>("channel", channel),118,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, urlBuilder = virtualinvoke $stack66.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>('channel', channel), 118)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2363,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2363)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4),2365,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4), 2365))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2363,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2363)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4),2365,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4), 2365)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,urlBuilder = virtualinvoke $stack66.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>("channel", channel),118,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, urlBuilder = virtualinvoke $stack66.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>('channel', channel), 118)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack70 = virtualinvoke urlBuilder.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>(),120,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack70 = virtualinvoke urlBuilder.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>(), 120))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,urlBuilder = virtualinvoke $stack66.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>("channel", channel),118,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, urlBuilder = virtualinvoke $stack66.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>('channel', channel), 118)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack70 = virtualinvoke urlBuilder.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>(),120,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack70 = virtualinvoke urlBuilder.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>(), 120)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack9 = virtualinvoke l1#4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack8),442,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(), 184)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack79 = (com.splunk.logging.EventBodySerializer) $stack78,184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack79 = (com.splunk.logging.EventBodySerializer) $stack78, 184)) => Node(<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,eventBodySerializer := @parameter0: com.splunk.logging.EventBodySerializer,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184)) => Node(<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,eventBodySerializer := @parameter0: com.splunk.logging.EventBodySerializer,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184) => (<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>, virtualinvoke $stack2.<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>(eventBodySerializer), 241)) => Node(<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,this.<com.splunk.logging.serialization.HecJsonSerializer: com.splunk.logging.EventBodySerializer eventBodySerializer> = eventBodySerializer,70,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184) => (<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>, virtualinvoke $stack2.<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>(eventBodySerializer), 241) => (<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>, this.<com.splunk.logging.serialization.HecJsonSerializer: com.splunk.logging.EventBodySerializer eventBodySerializer> = eventBodySerializer, 70))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack9 = virtualinvoke l1#4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack8),442,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(), 184)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack79 = (com.splunk.logging.EventBodySerializer) $stack78,184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack79 = (com.splunk.logging.EventBodySerializer) $stack78, 184)) => Node(<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,eventBodySerializer := @parameter0: com.splunk.logging.EventBodySerializer,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184)) => Node(<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,eventBodySerializer := @parameter0: com.splunk.logging.EventBodySerializer,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184) => (<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>, virtualinvoke $stack2.<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>(eventBodySerializer), 241)) => Node(<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,this.<com.splunk.logging.serialization.HecJsonSerializer: com.splunk.logging.EventBodySerializer eventBodySerializer> = eventBodySerializer,70,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184) => (<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>, virtualinvoke $stack2.<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>(eventBodySerializer), 241) => (<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>, this.<com.splunk.logging.serialization.HecJsonSerializer: com.splunk.logging.EventBodySerializer eventBodySerializer> = eventBodySerializer, 70)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings),172,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,token = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("token", null),142,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, token = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('token', null), 142)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings),172,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,staticinvoke <sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(l3, l0, null, l2#5),436,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, staticinvoke <sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(l3, l0, null, l2#5), 436))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,staticinvoke <sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(l3, l0, null, l2#5),436,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, staticinvoke <sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(l3, l0, null, l2#5), 436)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l0.<java.lang.Class: java.lang.String name> = $stack2,642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250) => (<java.lang.Class: java.lang.String getName()>, l0.<java.lang.Class: java.lang.String name> = $stack2, 642))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack4 = newarray (java.lang.Object)[1],260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('%d', $stack4), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%d", $stack4),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('%d', $stack4), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack27 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0),569,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack27 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0), 569))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack27 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0),569,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack27 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0), 569)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2363,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2363))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2363,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2363)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("disableCertificateValidation", "false"),205,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('disableCertificateValidation', 'false'), 205)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l6 = l0.<java.lang.String: char[] value>,1346,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l6 = l0.<java.lang.String: char[] value>, 1346)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l10 = l6[$stack30],1357,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l10 = l6[$stack30], 1357))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)) => Node(<java.lang.Boolean: boolean parseBoolean(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l6 = l0.<java.lang.String: char[] value>,1346,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l6 = l0.<java.lang.String: char[] value>, 1346)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l10 = l6[$stack30],1357,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l10 = l6[$stack30], 1357)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(),432,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(), 432))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(),432,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(), 432)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,retriesOnError = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("retries_on_error", 0L),154,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, retriesOnError = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('retries_on_error', 0L), 154)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,specialinvoke $stack61.<com.splunk.logging.HttpEventCollectorResendMiddleware: void <init>(long)>(retriesOnError),202,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack61.<com.splunk.logging.HttpEventCollectorResendMiddleware: void <init>(long)>(retriesOnError), 202))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = neg l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,retriesOnError = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("retries_on_error", 0L),154,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, retriesOnError = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('retries_on_error', 0L), 154)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,specialinvoke $stack61.<com.splunk.logging.HttpEventCollectorResendMiddleware: void <init>(long)>(retriesOnError),202,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack61.<com.splunk.logging.HttpEventCollectorResendMiddleware: void <init>(long)>(retriesOnError), 202)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack28 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("source", null),129,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack28 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('source', null), 129)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("source", $stack28),128,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>('source', $stack28), 128))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack28 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("source", null),129,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack28 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('source', null), 129)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("source", $stack28),128,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>('source', $stack28), 128)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0),2377,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0), 2377))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0),2377,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0), 2377)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack11 = l0.<java.lang.Class: java.lang.Class newInstanceCallerCache>,435,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack11 = l0.<java.lang.Class: java.lang.Class newInstanceCallerCache>, 435))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack11 = l0.<java.lang.Class: java.lang.Class newInstanceCallerCache>,435,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack11 = l0.<java.lang.Class: java.lang.Class newInstanceCallerCache>, 435)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0.<java.lang.Class: java.lang.Class newInstanceCallerCache> = l3,437,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l0.<java.lang.Class: java.lang.Class newInstanceCallerCache> = l3, 437))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0.<java.lang.Class: java.lang.Class newInstanceCallerCache> = l3,437,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l0.<java.lang.Class: java.lang.Class newInstanceCallerCache> = l3, 437)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: void <init>(char[],int,int)>,l3 := @parameter2: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,specialinvoke $stack16.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3),196,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, specialinvoke $stack16.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3), 196))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = l1 + -1,2876,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack11 = l1 - 1, 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: void <init>(char[],int,int)>,l3 := @parameter2: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,specialinvoke $stack16.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3),196,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, specialinvoke $stack16.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3), 196)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("send_mode", "sequential"),155,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('send_mode', 'sequential'), 155)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,sendModeStr := @parameter7: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack37 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown send mode: "),146,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack37 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Unknown send mode: '), 146))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("send_mode", "sequential"),155,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('send_mode', 'sequential'), 155)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,sendModeStr := @parameter7: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack37 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown send mode: "),146,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack37 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Unknown send mode: '), 146)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack38 = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(sendModeStr),146,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack38 = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(sendModeStr), 146)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack39 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.String toString()>(),146,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack39 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.String toString()>(), 146)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,specialinvoke $stack35.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack39),146,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, specialinvoke $stack35.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack39), 146)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack11 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0),592,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack11 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0), 592))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack11 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0),592,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack11 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0), 592)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("middleware", null),157,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('middleware', null), 157)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,if middleware == null goto (branch),176,SinkNode, path: )
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("middleware", null),157,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('middleware', null), 157)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,if middleware == null goto (branch),176,SinkNode, path: ), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack28 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),427,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack28 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 427))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack31 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),427,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack31 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 427)) => Node(<java.lang.Class: java.lang.Object newInstance()>,specialinvoke tmp$1234659364.<java.lang.InstantiationException: void <init>(java.lang.String)>($stack31),427,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke tmp$1234659364.<java.lang.InstantiationException: void <init>(java.lang.String)>($stack31), 427)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,retriesOnError = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("retries_on_error", 0L),154,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, retriesOnError = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('retries_on_error', 0L), 154)) => Node(<com.splunk.logging.HttpEventCollectorResendMiddleware: void <init>(long)>,retriesOnError := @parameter0: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack61.<com.splunk.logging.HttpEventCollectorResendMiddleware: void <init>(long)>(retriesOnError), 202)) => Node(<com.splunk.logging.HttpEventCollectorResendMiddleware: void <init>(long)>,this.<com.splunk.logging.HttpEventCollectorResendMiddleware: long retriesOnError> = retriesOnError,40,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack61.<com.splunk.logging.HttpEventCollectorResendMiddleware: void <init>(long)>(retriesOnError), 202) => (<com.splunk.logging.HttpEventCollectorResendMiddleware: void <init>(long)>, this.<com.splunk.logging.HttpEventCollectorResendMiddleware: long retriesOnError> = retriesOnError, 40))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = neg l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,retriesOnError = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("retries_on_error", 0L),154,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, retriesOnError = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('retries_on_error', 0L), 154)) => Node(<com.splunk.logging.HttpEventCollectorResendMiddleware: void <init>(long)>,retriesOnError := @parameter0: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack61.<com.splunk.logging.HttpEventCollectorResendMiddleware: void <init>(long)>(retriesOnError), 202)) => Node(<com.splunk.logging.HttpEventCollectorResendMiddleware: void <init>(long)>,this.<com.splunk.logging.HttpEventCollectorResendMiddleware: long retriesOnError> = retriesOnError,40,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack61.<com.splunk.logging.HttpEventCollectorResendMiddleware: void <init>(long)>(retriesOnError), 202) => (<com.splunk.logging.HttpEventCollectorResendMiddleware: void <init>(long)>, this.<com.splunk.logging.HttpEventCollectorResendMiddleware: long retriesOnError> = retriesOnError, 40)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack5 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,404,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack5 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 404))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack5 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,404,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack5 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 404)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2493,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l2 = l0.<java.lang.Class: int classRedefinedCount>, 2493)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,$stack8 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),848,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,$stack8 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),848,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2371,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2371))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2371,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2371)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,$stack8 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),848,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,$stack8 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),848,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("disableCertificateValidation", "false"),205,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('disableCertificateValidation', 'false'), 205))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack67 = virtualinvoke eventHeaderSerializer.<java.lang.String: boolean isEmpty()>(),205,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack67 = virtualinvoke eventHeaderSerializer.<java.lang.String: boolean isEmpty()>(), 205)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,if $stack67 != 0 goto $stack57 = retriesOnError cmp 0L,205,SinkNode, path: ), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2493,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l2 = l0.<java.lang.Class: int classRedefinedCount>, 2493)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("disableCertificateValidation", "false"),205,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('disableCertificateValidation', 'false'), 205)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,$stack7 = l0.<java.lang.String: char[] value>,1106,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack7 = l0.<java.lang.String: char[] value>, 1106)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,$stack8 = lengthof $stack7,1109,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack8 = lengthof $stack7, 1109))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)) => Node(<java.lang.Boolean: boolean parseBoolean(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,$stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8),1109,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack9 = virtualinvoke l1#4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack8),442,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(), 184))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack9 = virtualinvoke l1#4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack8),442,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(), 184)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("url", null),139,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('url', null), 139))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("url", null),139,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('url', null), 139)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2493,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l2 = l0.<java.lang.Class: int classRedefinedCount>, 2493))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2493,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l2 = l0.<java.lang.Class: int classRedefinedCount>, 2493)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(),432,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(), 432)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack7 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>(l0, l2#5),433,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack7 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>(l0, l2#5), 433))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack7 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>(l0, l2#5),433,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack7 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>(l0, l2#5), 433)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack9 = virtualinvoke l1#4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack8),442,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack9 = virtualinvoke l1#4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack8),442,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.String: char charAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.String: char charAt(int)>,$stack3 = l0.<java.lang.String: char[] value>,658,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563) => (<java.lang.String: char charAt(int)>, $stack3 = l0.<java.lang.String: char[] value>, 658)) => Node(<java.lang.String: char charAt(int)>,$stack4 = lengthof $stack3,658,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563) => (<java.lang.String: char charAt(int)>, $stack4 = lengthof $stack3, 658))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.String: char charAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.String: char charAt(int)>,$stack3 = l0.<java.lang.String: char[] value>,658,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563) => (<java.lang.String: char charAt(int)>, $stack3 = l0.<java.lang.String: char[] value>, 658)) => Node(<java.lang.String: char charAt(int)>,$stack4 = lengthof $stack3,658,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563) => (<java.lang.String: char charAt(int)>, $stack4 = lengthof $stack3, 658)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4),266,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>("include_logger_name", 1),160,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4),266,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>("include_logger_name", 1),160,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean includeLoggerName> = $stack48,160,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean includeLoggerName> = $stack48, 160)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack22 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0),580,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack22 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0), 580))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack22 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0),580,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack22 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0), 580)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack4 = newarray (java.lang.Object)[1],260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('%d', $stack4), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%d", $stack4),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('%d', $stack4), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack26 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0),572,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack26 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0), 572))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack26 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0),572,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack26 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0), 572)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors0(boolean)>(l1),2671,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors0(boolean)>(l1),2671,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("url", null),139,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('url', null), 139)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,Url := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack61 = new java.lang.StringBuilder,116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, specialinvoke $stack61.<java.lang.StringBuilder: void <init>()>(), 116))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("url", null),139,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('url', null), 139)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,Url := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Url),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Url), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/services/collector/raw"),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('/services/collector/raw'), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.String toString()>(),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.String toString()>(), 116)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack28 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),427,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack28 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 427))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack31 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),427,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack31 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 427)) => Node(<java.lang.Class: java.lang.Object newInstance()>,specialinvoke tmp$1234659364.<java.lang.InstantiationException: void <init>(java.lang.String)>($stack31),427,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke tmp$1234659364.<java.lang.InstantiationException: void <init>(java.lang.String)>($stack31), 427)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack28 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("source", null),129,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack28 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('source', null), 129)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("source", $stack28),128,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>('source', $stack28), 128))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack28 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("source", null),129,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack28 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('source', null), 129)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("source", $stack28),128,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>('source', $stack28), 128)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack5 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,404,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack5 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 404))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack5 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,404,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack5 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 404)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors0(boolean)>(l1),2671,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors0(boolean)>(l1),2671,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,batchCount = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_size_count", 10L),152,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, batchCount = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_size_count', 10L), 152)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,maxEventsBatchCount := @parameter5: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,this.<com.splunk.logging.HttpEventCollectorSender: long maxEventsBatchCount> = maxEventsBatchCount,132,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, this.<com.splunk.logging.HttpEventCollectorSender: long maxEventsBatchCount> = maxEventsBatchCount, 132))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = neg l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,batchCount = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_size_count", 10L),152,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, batchCount = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_size_count', 10L), 152)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,maxEventsBatchCount := @parameter5: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,this.<com.splunk.logging.HttpEventCollectorSender: long maxEventsBatchCount> = maxEventsBatchCount,132,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, this.<com.splunk.logging.HttpEventCollectorSender: long maxEventsBatchCount> = maxEventsBatchCount, 132)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("url", null),139,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('url', null), 139))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("url", null),139,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('url', null), 139)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,urlBuilder = virtualinvoke $stack66.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>("channel", channel),118,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, urlBuilder = virtualinvoke $stack66.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>('channel', channel), 118)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack70 = virtualinvoke urlBuilder.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>(),120,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack70 = virtualinvoke urlBuilder.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>(), 120))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,urlBuilder = virtualinvoke $stack66.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>("channel", channel),118,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, urlBuilder = virtualinvoke $stack66.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>('channel', channel), 118)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack70 = virtualinvoke urlBuilder.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>(),120,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack70 = virtualinvoke urlBuilder.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>(), 120)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack34 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("messageFormat", null),136,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack34 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('messageFormat', null), 136)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("messageFormat", $stack34),135,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>('messageFormat', $stack34), 135))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack34 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("messageFormat", null),136,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack34 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('messageFormat', null), 136)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("messageFormat", $stack34),135,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>('messageFormat', $stack34), 135)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack5 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,404,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack5 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 404))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack5 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,404,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack5 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 404)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack20 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0),587,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack20 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0), 587))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack20 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0),587,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack20 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0), 587)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<java.lang.Class: java.lang.Class forName(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack83 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(middleware), 178)) => Node(<java.lang.Class: java.lang.Class forName(java.lang.String)>,$stack5 = staticinvoke <java.lang.Class: java.lang.Class forName0(java.lang.String,boolean,java.lang.ClassLoader,java.lang.Class)>(l0, 1, $stack4, l1),264,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack83 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(middleware), 178))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<java.lang.Class: java.lang.Class forName(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack83 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(middleware), 178)) => Node(<java.lang.Class: java.lang.Class forName(java.lang.String)>,$stack5 = staticinvoke <java.lang.Class: java.lang.Class forName0(java.lang.String,boolean,java.lang.ClassLoader,java.lang.Class)>(l0, 1, $stack4, l1),264,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack83 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(middleware), 178)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),2660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>,2666,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>, 2666))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,$stack6 = virtualinvoke l0.<java.lang.Class: boolean isInterface()>(),2666,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, $stack6 = virtualinvoke l0.<java.lang.Class: boolean isInterface()>(), 2666)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("disableCertificateValidation", "false"),205,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('disableCertificateValidation', 'false'), 205)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l6 = l0.<java.lang.String: char[] value>,1346,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l6 = l0.<java.lang.String: char[] value>, 1346))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)) => Node(<java.lang.Boolean: boolean parseBoolean(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l6 = l0.<java.lang.String: char[] value>,1346,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l6 = l0.<java.lang.String: char[] value>, 1346)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,$stack1 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>,689,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,$stack1 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>,689,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack31 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("sourcetype", null),132,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack31 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('sourcetype', null), 132)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sourcetype", $stack31),131,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>('sourcetype', $stack31), 131))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack31 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("sourcetype", null),132,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack31 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('sourcetype', null), 132)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sourcetype", $stack31),131,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>('sourcetype', $stack31), 131)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack74 = virtualinvoke eventBodySerializer.<java.lang.String: boolean isEmpty()>(),201,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack74 = virtualinvoke eventBodySerializer.<java.lang.String: boolean isEmpty()>(), 201))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack74 = virtualinvoke eventBodySerializer.<java.lang.String: boolean isEmpty()>(),201,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack74 = virtualinvoke eventBodySerializer.<java.lang.String: boolean isEmpty()>(), 201)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,if $stack74 != 0 goto (branch),201,SinkNode, path: ), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0),397,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0),397,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2493,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l2 = l0.<java.lang.Class: int classRedefinedCount>, 2493))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2493,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l2 = l0.<java.lang.Class: int classRedefinedCount>, 2493)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2371,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2371))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2371,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2371)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.String: char charAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.String: char charAt(int)>,$stack5 = l0.<java.lang.String: char[] value>,660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563) => (<java.lang.String: char charAt(int)>, $stack5 = l0.<java.lang.String: char[] value>, 660)) => Node(<java.lang.String: char charAt(int)>,$stack6 = $stack5[l1],660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 * l1,585,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 * l1,585,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack4 = newarray (java.lang.Object)[1],260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('%d', $stack4), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%d", $stack4),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('%d', $stack4), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack27 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0),569,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack27 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0), 569))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack27 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0),569,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack27 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0), 569)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<java.lang.String: boolean isEmpty()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack80 = virtualinvoke middleware.<java.lang.String: boolean isEmpty()>(), 191)) => Node(<java.lang.String: boolean isEmpty()>,$stack1 = l0.<java.lang.String: char[] value>,635,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack80 = virtualinvoke middleware.<java.lang.String: boolean isEmpty()>(), 191) => (<java.lang.String: boolean isEmpty()>, $stack1 = l0.<java.lang.String: char[] value>, 635)) => Node(<java.lang.String: boolean isEmpty()>,$stack2 = lengthof $stack1,635,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack80 = virtualinvoke middleware.<java.lang.String: boolean isEmpty()>(), 191) => (<java.lang.String: boolean isEmpty()>, $stack2 = lengthof $stack1, 635))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<java.lang.String: boolean isEmpty()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack80 = virtualinvoke middleware.<java.lang.String: boolean isEmpty()>(), 191)) => Node(<java.lang.String: boolean isEmpty()>,$stack1 = l0.<java.lang.String: char[] value>,635,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack80 = virtualinvoke middleware.<java.lang.String: boolean isEmpty()>(), 191) => (<java.lang.String: boolean isEmpty()>, $stack1 = l0.<java.lang.String: char[] value>, 635)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("send_mode", "sequential"),155,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('send_mode', 'sequential'), 155))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("send_mode", "sequential"),155,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('send_mode', 'sequential'), 155)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,this.<com.splunk.logging.HttpEventCollectorSender: java.lang.String channel> = channel,106,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, this.<com.splunk.logging.HttpEventCollectorSender: java.lang.String channel> = channel, 106))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,this.<com.splunk.logging.HttpEventCollectorSender: java.lang.String channel> = channel,106,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, this.<com.splunk.logging.HttpEventCollectorSender: java.lang.String channel> = channel, 106)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,token = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("token", null),142,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, token = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('token', null), 142))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,token = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("token", null),142,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, token = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('token', null), 142)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<java.lang.String: boolean isEmpty()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack80 = virtualinvoke middleware.<java.lang.String: boolean isEmpty()>(), 191)) => Node(<java.lang.String: boolean isEmpty()>,$stack1 = l0.<java.lang.String: char[] value>,635,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack80 = virtualinvoke middleware.<java.lang.String: boolean isEmpty()>(), 191) => (<java.lang.String: boolean isEmpty()>, $stack1 = l0.<java.lang.String: char[] value>, 635)) => Node(<java.lang.String: boolean isEmpty()>,$stack2 = lengthof $stack1,635,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack80 = virtualinvoke middleware.<java.lang.String: boolean isEmpty()>(), 191) => (<java.lang.String: boolean isEmpty()>, $stack2 = lengthof $stack1, 635))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<java.lang.String: boolean isEmpty()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack80 = virtualinvoke middleware.<java.lang.String: boolean isEmpty()>(), 191)) => Node(<java.lang.String: boolean isEmpty()>,$stack1 = l0.<java.lang.String: char[] value>,635,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack80 = virtualinvoke middleware.<java.lang.String: boolean isEmpty()>(), 191) => (<java.lang.String: boolean isEmpty()>, $stack1 = l0.<java.lang.String: char[] value>, 635)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,$stack8 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),848,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,$stack8 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),848,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0.<java.lang.Class: java.lang.Class newInstanceCallerCache> = l3,437,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l0.<java.lang.Class: java.lang.Class newInstanceCallerCache> = l3, 437))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0.<java.lang.Class: java.lang.Class newInstanceCallerCache> = l3,437,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l0.<java.lang.Class: java.lang.Class newInstanceCallerCache> = l3, 437)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.String: char charAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.String: char charAt(int)>,$stack5 = l0.<java.lang.String: char[] value>,660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563) => (<java.lang.String: char charAt(int)>, $stack5 = l0.<java.lang.String: char[] value>, 660)) => Node(<java.lang.String: char charAt(int)>,$stack6 = $stack5[l1],660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2493,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l2 = l0.<java.lang.Class: int classRedefinedCount>, 2493)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack9 = virtualinvoke l1#4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack8),442,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(), 184)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack79 = (com.splunk.logging.EventBodySerializer) $stack78,184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack79 = (com.splunk.logging.EventBodySerializer) $stack78, 184)) => Node(<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,eventBodySerializer := @parameter0: com.splunk.logging.EventBodySerializer,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184)) => Node(<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,eventBodySerializer := @parameter0: com.splunk.logging.EventBodySerializer,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184) => (<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>, virtualinvoke $stack2.<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>(eventBodySerializer), 241)) => Node(<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,this.<com.splunk.logging.serialization.HecJsonSerializer: com.splunk.logging.EventBodySerializer eventBodySerializer> = eventBodySerializer,70,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184) => (<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>, virtualinvoke $stack2.<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>(eventBodySerializer), 241) => (<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>, this.<com.splunk.logging.serialization.HecJsonSerializer: com.splunk.logging.EventBodySerializer eventBodySerializer> = eventBodySerializer, 70))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack9 = virtualinvoke l1#4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack8),442,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(), 184)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack79 = (com.splunk.logging.EventBodySerializer) $stack78,184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack79 = (com.splunk.logging.EventBodySerializer) $stack78, 184)) => Node(<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,eventBodySerializer := @parameter0: com.splunk.logging.EventBodySerializer,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184)) => Node(<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,eventBodySerializer := @parameter0: com.splunk.logging.EventBodySerializer,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184) => (<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>, virtualinvoke $stack2.<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>(eventBodySerializer), 241)) => Node(<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,this.<com.splunk.logging.serialization.HecJsonSerializer: com.splunk.logging.EventBodySerializer eventBodySerializer> = eventBodySerializer,70,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184) => (<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>, virtualinvoke $stack2.<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>(eventBodySerializer), 241) => (<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>, this.<com.splunk.logging.serialization.HecJsonSerializer: com.splunk.logging.EventBodySerializer eventBodySerializer> = eventBodySerializer, 70)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,if eventBodySerializer == null goto (branch),182,SinkNode, path: )
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,if eventBodySerializer == null goto (branch),182,SinkNode, path: ), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_size_bytes", 10240L),153,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_size_bytes', 10240L), 153)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,maxEventsBatchSize := @parameter6: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack55 = maxEventsBatchSize cmp 0L,140,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack55 = maxEventsBatchSize cmp 0L, 140))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = neg l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_size_bytes", 10240L),153,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_size_bytes', 10240L), 153)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,maxEventsBatchSize := @parameter6: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack55 = maxEventsBatchSize cmp 0L,140,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack55 = maxEventsBatchSize cmp 0L, 140)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("disableCertificateValidation", "false"),205,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('disableCertificateValidation', 'false'), 205)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l6 = l0.<java.lang.String: char[] value>,1346,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l6 = l0.<java.lang.String: char[] value>, 1346)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l10 = l6[$stack30],1357,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l10 = l6[$stack30], 1357)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10),1367,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10), 1367)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack34 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l12),1376,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack34 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l12), 1376))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)) => Node(<java.lang.Boolean: boolean parseBoolean(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l6 = l0.<java.lang.String: char[] value>,1346,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l6 = l0.<java.lang.String: char[] value>, 1346)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l10 = l6[$stack30],1357,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l10 = l6[$stack30], 1357)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10),1367,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10), 1367)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack34 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l12),1376,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack34 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l12), 1376)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("disableCertificateValidation", "false"),205,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('disableCertificateValidation', 'false'), 205)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l6 = l0.<java.lang.String: char[] value>,1346,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l6 = l0.<java.lang.String: char[] value>, 1346)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l10 = l6[$stack30],1357,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l10 = l6[$stack30], 1357))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)) => Node(<java.lang.Boolean: boolean parseBoolean(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l6 = l0.<java.lang.String: char[] value>,1346,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l6 = l0.<java.lang.String: char[] value>, 1346)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l10 = l6[$stack30],1357,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l10 = l6[$stack30], 1357)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("disableCertificateValidation", "false"),205,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('disableCertificateValidation', 'false'), 205)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,$stack3 = l0.<java.lang.String: char[] value>,1106,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack3 = l0.<java.lang.String: char[] value>, 1106)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,$stack4 = lengthof $stack3,1106,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack4 = lengthof $stack3, 1106))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("type", null),148,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('type', null), 148)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,type := @parameter3: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack2 = l1.<java.lang.String: char[] value>, 1106)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,$stack2 = l1.<java.lang.String: char[] value>,1106,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack2 = l1.<java.lang.String: char[] value>, 1106)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l0.<java.lang.Class: java.lang.String name> = $stack2,642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250) => (<java.lang.Class: java.lang.String getName()>, l0.<java.lang.Class: java.lang.String name> = $stack2, 642))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = neg l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(),432,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(), 432)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack7 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>(l0, l2#5),433,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack7 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>(l0, l2#5), 433))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack7 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>(l0, l2#5),433,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack7 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>(l0, l2#5), 433)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2363,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2363)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4),2365,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4), 2365))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2363,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2363)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4),2365,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4), 2365)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4),266,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4),266,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("disableCertificateValidation", "false"),205,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('disableCertificateValidation', 'false'), 205)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l6 = l0.<java.lang.String: char[] value>,1346,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l6 = l0.<java.lang.String: char[] value>, 1346)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l10 = l6[$stack30],1357,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l10 = l6[$stack30], 1357)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10),1367,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10), 1367)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack34 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l12),1376,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack34 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l12), 1376))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)) => Node(<java.lang.Boolean: boolean parseBoolean(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l6 = l0.<java.lang.String: char[] value>,1346,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l6 = l0.<java.lang.String: char[] value>, 1346)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l10 = l6[$stack30],1357,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l10 = l6[$stack30], 1357)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10),1367,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10), 1367)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack34 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l12),1376,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack34 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l12), 1376)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2381,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2381))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2381,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2381)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack9 = virtualinvoke l1#4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack8),442,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(), 184))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack9 = virtualinvoke l1#4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack8),442,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(), 184)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0),2377,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0), 2377))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0),2377,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0), 2377)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings),172,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("send_mode", "sequential"),155,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('send_mode', 'sequential'), 155)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings),172,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.String: char charAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.String: char charAt(int)>,$stack3 = l0.<java.lang.String: char[] value>,658,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563) => (<java.lang.String: char charAt(int)>, $stack3 = l0.<java.lang.String: char[] value>, 658)) => Node(<java.lang.String: char charAt(int)>,$stack4 = lengthof $stack3,658,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563) => (<java.lang.String: char charAt(int)>, $stack4 = lengthof $stack3, 658))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.String: char charAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.String: char charAt(int)>,$stack3 = l0.<java.lang.String: char[] value>,658,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563) => (<java.lang.String: char charAt(int)>, $stack3 = l0.<java.lang.String: char[] value>, 658)) => Node(<java.lang.String: char charAt(int)>,$stack4 = lengthof $stack3,658,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563) => (<java.lang.String: char charAt(int)>, $stack4 = lengthof $stack3, 658)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack6 = l0.<java.lang.String: char[] value>,2878,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack6 = l0.<java.lang.String: char[] value>, 2878))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,l3 = l0.<java.lang.String: char[] value>,2870,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l3 = l0.<java.lang.String: char[] value>, 2870)) => Node(<java.lang.String: java.lang.String trim()>,$stack12 = l3[$stack11],2878,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack12 = l3[$stack11], 2878)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(),2497,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(), 2497)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack10 = (java.lang.Class$ReflectionData) $stack9,2497,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack10 = (java.lang.Class$ReflectionData) $stack9, 2497))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(),2497,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(), 2497)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,specialinvoke $stack14.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2),1963,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack14.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2), 1963))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = l1 + -1,2876,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack11 = l1 - 1, 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,specialinvoke $stack14.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2),1963,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack14.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2), 1963)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l0.<java.lang.Class: java.lang.String name> = $stack2,642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250) => (<java.lang.Class: java.lang.String getName()>, l0.<java.lang.Class: java.lang.String name> = $stack2, 642))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4),266,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>("include_logger_name", 1),160,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4),266,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>("include_logger_name", 1),160,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean includeLoggerName> = $stack48,160,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean includeLoggerName> = $stack48, 160)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack21 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0),583,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack21 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0), 583))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack21 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0),583,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack21 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0), 583)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l0.<java.lang.Class: java.lang.String name> = $stack2,642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250) => (<java.lang.Class: java.lang.String getName()>, l0.<java.lang.Class: java.lang.String name> = $stack2, 642))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,l3 = l0.<java.lang.String: char[] value>,2870,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l3 = l0.<java.lang.String: char[] value>, 2870)) => Node(<java.lang.String: java.lang.String trim()>,$stack16 = l3[l2],2875,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack16 = l3[l2], 2875))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,l3 = l0.<java.lang.String: char[] value>,2870,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l3 = l0.<java.lang.String: char[] value>, 2870)) => Node(<java.lang.String: java.lang.String trim()>,$stack16 = l3[l2],2875,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack16 = l3[l2], 2875)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0),397,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0),397,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("send_mode", "sequential"),155,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('send_mode', 'sequential'), 155)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,sendModeStr := @parameter7: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack34 = virtualinvoke sendModeStr.<java.lang.String: boolean equals(java.lang.Object)>("parallel"),143,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack34 = virtualinvoke sendModeStr.<java.lang.String: boolean equals(java.lang.Object)>('parallel'), 143))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("send_mode", "sequential"),155,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('send_mode', 'sequential'), 155)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,sendModeStr := @parameter7: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack34 = virtualinvoke sendModeStr.<java.lang.String: boolean equals(java.lang.Object)>("parallel"),143,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack34 = virtualinvoke sendModeStr.<java.lang.String: boolean equals(java.lang.Object)>('parallel'), 143)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = l1 + -1,2876,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack11 = l1 - 1, 2878))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = l1 + -1,2876,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack11 = l1 - 1, 2878)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.String: char charAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.String: char charAt(int)>,$stack5 = l0.<java.lang.String: char[] value>,660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563) => (<java.lang.String: char charAt(int)>, $stack5 = l0.<java.lang.String: char[] value>, 660)) => Node(<java.lang.String: char charAt(int)>,$stack6 = $stack5[l1],660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0.<java.lang.Class: java.lang.Class newInstanceCallerCache> = l3,437,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l0.<java.lang.Class: java.lang.Class newInstanceCallerCache> = l3, 437))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0.<java.lang.Class: java.lang.Class newInstanceCallerCache> = l3,437,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l0.<java.lang.Class: java.lang.Class newInstanceCallerCache> = l3, 437)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(),2497,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(), 2497)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack10 = (java.lang.Class$ReflectionData) $stack9,2497,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack10 = (java.lang.Class$ReflectionData) $stack9, 2497))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(),2497,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(), 2497)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("disableCertificateValidation", "false"),205,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('disableCertificateValidation', 'false'), 205)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l6 = l0.<java.lang.String: char[] value>,1346,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l6 = l0.<java.lang.String: char[] value>, 1346)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l10 = l6[$stack30],1357,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l10 = l6[$stack30], 1357)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10),1367,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10), 1367))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)) => Node(<java.lang.Boolean: boolean parseBoolean(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l6 = l0.<java.lang.String: char[] value>,1346,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l6 = l0.<java.lang.String: char[] value>, 1346)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l10 = l6[$stack30],1357,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l10 = l6[$stack30], 1357)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10),1367,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10), 1367)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack6 = l0.<java.lang.String: char[] value>,2878,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack6 = l0.<java.lang.String: char[] value>, 2878))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,l3 = l0.<java.lang.String: char[] value>,2870,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l3 = l0.<java.lang.String: char[] value>, 2870)) => Node(<java.lang.String: java.lang.String trim()>,$stack12 = l3[$stack11],2878,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack12 = l3[$stack11], 2878)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,l3 = l0.<java.lang.String: char[] value>,2870,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l3 = l0.<java.lang.String: char[] value>, 2870))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,l3 = l0.<java.lang.String: char[] value>,2870,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l3 = l0.<java.lang.String: char[] value>, 2870)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack74 = virtualinvoke eventBodySerializer.<java.lang.String: boolean isEmpty()>(),201,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack74 = virtualinvoke eventBodySerializer.<java.lang.String: boolean isEmpty()>(), 201))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack74 = virtualinvoke eventBodySerializer.<java.lang.String: boolean isEmpty()>(),201,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack74 = virtualinvoke eventBodySerializer.<java.lang.String: boolean isEmpty()>(), 201)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,if $stack74 != 0 goto (branch),201,SinkNode, path: ), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2381,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2381))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2381,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2381)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3),2351,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3),2351,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2363,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2363))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2363,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2363)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.String: char charAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.String: char charAt(int)>,$stack5 = l0.<java.lang.String: char[] value>,660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563) => (<java.lang.String: char charAt(int)>, $stack5 = l0.<java.lang.String: char[] value>, 660))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.String: char charAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.String: char charAt(int)>,$stack5 = l0.<java.lang.String: char[] value>,660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563) => (<java.lang.String: char charAt(int)>, $stack5 = l0.<java.lang.String: char[] value>, 660)) => Node(<java.lang.String: char charAt(int)>,$stack6 = $stack5[l1],660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: void <init>(char[],int,int)>,l3 := @parameter2: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack6 = l2 + l3,207,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, $stack6 = l2 + l3, 207))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = l1 + -1,2876,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack11 = l1 - 1, 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: void <init>(char[],int,int)>,l3 := @parameter2: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack6 = l2 + l3,207,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, $stack6 = l2 + l3, 207)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack9 = virtualinvoke l1#4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack8),442,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack9 = virtualinvoke l1#4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack8),442,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(),432,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(), 432))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(),432,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(), 432)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,this.<com.splunk.logging.HttpEventCollectorSender: java.lang.String channel> = channel,106,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, this.<com.splunk.logging.HttpEventCollectorSender: java.lang.String channel> = channel, 106))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,this.<com.splunk.logging.HttpEventCollectorSender: java.lang.String channel> = channel,106,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, this.<com.splunk.logging.HttpEventCollectorSender: java.lang.String channel> = channel, 106)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),852,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(), 852))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),852,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(), 852)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(),2497,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(), 2497)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack10 = (java.lang.Class$ReflectionData) $stack9,2497,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack10 = (java.lang.Class$ReflectionData) $stack9, 2497))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(),2497,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(), 2497)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_interval", 10000L),151,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = neg l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_interval", 10000L),151,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_size_bytes", 10240L),153,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_size_bytes', 10240L), 153)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,maxEventsBatchSize := @parameter6: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,this.<com.splunk.logging.HttpEventCollectorSender: long maxEventsBatchSize> = maxEventsBatchSize,133,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, this.<com.splunk.logging.HttpEventCollectorSender: long maxEventsBatchSize> = maxEventsBatchSize, 133))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = neg l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_size_bytes", 10240L),153,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_size_bytes', 10240L), 153)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,maxEventsBatchSize := @parameter6: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,this.<com.splunk.logging.HttpEventCollectorSender: long maxEventsBatchSize> = maxEventsBatchSize,133,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, this.<com.splunk.logging.HttpEventCollectorSender: long maxEventsBatchSize> = maxEventsBatchSize, 133)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack9 = virtualinvoke l1#4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack8),442,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(), 184)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack79 = (com.splunk.logging.EventBodySerializer) $stack78,184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack79 = (com.splunk.logging.EventBodySerializer) $stack78, 184)) => Node(<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,eventBodySerializer := @parameter0: com.splunk.logging.EventBodySerializer,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184)) => Node(<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,eventBodySerializer := @parameter0: com.splunk.logging.EventBodySerializer,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184) => (<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>, virtualinvoke $stack2.<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>(eventBodySerializer), 241)) => Node(<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,this.<com.splunk.logging.serialization.HecJsonSerializer: com.splunk.logging.EventBodySerializer eventBodySerializer> = eventBodySerializer,70,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184) => (<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>, virtualinvoke $stack2.<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>(eventBodySerializer), 241) => (<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>, this.<com.splunk.logging.serialization.HecJsonSerializer: com.splunk.logging.EventBodySerializer eventBodySerializer> = eventBodySerializer, 70))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack9 = virtualinvoke l1#4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack8),442,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(), 184)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack79 = (com.splunk.logging.EventBodySerializer) $stack78,184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack79 = (com.splunk.logging.EventBodySerializer) $stack78, 184)) => Node(<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,eventBodySerializer := @parameter0: com.splunk.logging.EventBodySerializer,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184)) => Node(<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,eventBodySerializer := @parameter0: com.splunk.logging.EventBodySerializer,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184) => (<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>, virtualinvoke $stack2.<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>(eventBodySerializer), 241)) => Node(<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,this.<com.splunk.logging.serialization.HecJsonSerializer: com.splunk.logging.EventBodySerializer eventBodySerializer> = eventBodySerializer,70,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184) => (<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>, virtualinvoke $stack2.<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>(eventBodySerializer), 241) => (<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>, this.<com.splunk.logging.serialization.HecJsonSerializer: com.splunk.logging.EventBodySerializer eventBodySerializer> = eventBodySerializer, 70)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,$stack1 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>,689,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,$stack1 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>,689,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(),432,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(), 432)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack7 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>(l0, l2#5),433,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack7 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>(l0, l2#5), 433))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack7 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>(l0, l2#5),433,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack7 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>(l0, l2#5), 433)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.String: int length()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l5 = virtualinvoke l0.<java.lang.String: int length()>(), 557)) => Node(<java.lang.String: int length()>,$stack1 = l0.<java.lang.String: char[] value>,623,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l5 = virtualinvoke l0.<java.lang.String: int length()>(), 557) => (<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)) => Node(<java.lang.String: int length()>,$stack2 = lengthof $stack1,623,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l5 = virtualinvoke l0.<java.lang.String: int length()>(), 557))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.String: int length()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l5 = virtualinvoke l0.<java.lang.String: int length()>(), 557)) => Node(<java.lang.String: int length()>,$stack1 = l0.<java.lang.String: char[] value>,623,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l5 = virtualinvoke l0.<java.lang.String: int length()>(), 557) => (<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack9 = virtualinvoke l1#4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack8),442,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(), 184))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack9 = virtualinvoke l1#4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack8),442,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(), 184)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(),432,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(), 432)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack7 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>(l0, l2#5),433,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack7 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>(l0, l2#5), 433))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack7 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>(l0, l2#5),433,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack7 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>(l0, l2#5), 433)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,batchCount = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_size_count", 10L),152,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, batchCount = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_size_count', 10L), 152)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,maxEventsBatchCount := @parameter5: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack44 = maxEventsBatchCount cmp 0L,149,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack44 = maxEventsBatchCount cmp 0L, 149))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = neg l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_interval", 10000L),151,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,delay := @parameter4: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack30 = delay cmp 0L,149,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack30 = delay cmp 0L, 149)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack4 = newarray (java.lang.Object)[1],260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('%d', $stack4), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%d", $stack4),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('%d', $stack4), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l5 = virtualinvoke l0.<java.lang.String: int length()>(),557,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l5 = virtualinvoke l0.<java.lang.String: int length()>(), 557))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l5 = virtualinvoke l0.<java.lang.String: int length()>(),557,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l5 = virtualinvoke l0.<java.lang.String: int length()>(), 557)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,retriesOnError = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("retries_on_error", 0L),154,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, retriesOnError = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('retries_on_error', 0L), 154))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = neg l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,retriesOnError = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("retries_on_error", 0L),154,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, retriesOnError = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('retries_on_error', 0L), 154)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.String: char charAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.String: char charAt(int)>,$stack5 = l0.<java.lang.String: char[] value>,660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563) => (<java.lang.String: char charAt(int)>, $stack5 = l0.<java.lang.String: char[] value>, 660)) => Node(<java.lang.String: char charAt(int)>,$stack6 = $stack5[l1],660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = neg l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.String: char charAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.String: char charAt(int)>,$stack5 = l0.<java.lang.String: char[] value>,660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563) => (<java.lang.String: char charAt(int)>, $stack5 = l0.<java.lang.String: char[] value>, 660)) => Node(<java.lang.String: char charAt(int)>,$stack6 = $stack5[l1],660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack17 = l6 + l8,586,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack17 = l6 + l8, 586))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack17 = l6 + l8,586,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack17 = l6 + l8, 586)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("url", null),139,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('url', null), 139)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,Url := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack21 = new java.lang.StringBuilder,122,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, specialinvoke $stack21.<java.lang.StringBuilder: void <init>()>(), 122))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("url", null),139,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('url', null), 139)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,Url := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack21 = new java.lang.StringBuilder,122,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, specialinvoke $stack21.<java.lang.StringBuilder: void <init>()>(), 122)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Url),122,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Url), 122)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/services/collector/event/1.0"),122,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('/services/collector/event/1.0'), 122)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(),122,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(), 122)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.String: char charAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.String: char charAt(int)>,$stack5 = l0.<java.lang.String: char[] value>,660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563) => (<java.lang.String: char charAt(int)>, $stack5 = l0.<java.lang.String: char[] value>, 660)) => Node(<java.lang.String: char charAt(int)>,$stack6 = $stack5[l1],660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 * l1,585,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 * l1,585,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack11 = l0.<java.lang.Class: java.lang.Class newInstanceCallerCache>,435,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack11 = l0.<java.lang.Class: java.lang.Class newInstanceCallerCache>, 435))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack11 = l0.<java.lang.Class: java.lang.Class newInstanceCallerCache>,435,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack11 = l0.<java.lang.Class: java.lang.Class newInstanceCallerCache>, 435)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,return $stack11,260,SinkNode, path: )
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = neg l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,return $stack11,260,SinkNode, path: ), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,batchCount = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_size_count", 10L),152,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, batchCount = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_size_count', 10L), 152)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,maxEventsBatchCount := @parameter5: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack44 = maxEventsBatchCount cmp 0L,149,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack44 = maxEventsBatchCount cmp 0L, 149))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = neg l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_interval", 10000L),151,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,delay := @parameter4: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack30 = delay cmp 0L,149,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack30 = delay cmp 0L, 149)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),852,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(), 852))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),852,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(), 852)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,l3 = l0.<java.lang.String: char[] value>,2870,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l3 = l0.<java.lang.String: char[] value>, 2870))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,l3 = l0.<java.lang.String: char[] value>,2870,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l3 = l0.<java.lang.String: char[] value>, 2870)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack11 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0),592,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack11 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0), 592))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack11 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0),592,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack11 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0), 592)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("url", null),139,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('url', null), 139)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,Url := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack61 = new java.lang.StringBuilder,116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, specialinvoke $stack61.<java.lang.StringBuilder: void <init>()>(), 116))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("url", null),139,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('url', null), 139)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,Url := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Url),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Url), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/services/collector/raw"),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('/services/collector/raw'), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.String toString()>(),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.String toString()>(), 116)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor> = l2,424,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor> = l2, 424))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor> = l2,424,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor> = l2, 424)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(),432,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(), 432))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(),432,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(), 432)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),852,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(), 852))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),852,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(), 852)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(),432,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(), 432))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(),432,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(), 432)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2363,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2363))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2363,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2363)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4),266,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack49 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>("include_thread_name", 1),161,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack49 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_thread_name', 1), 161)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean includeThreadName> = $stack49,161,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean includeThreadName> = $stack49, 161))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4),266,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack49 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>("include_thread_name", 1),161,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack49 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_thread_name', 1), 161)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean includeThreadName> = $stack49,161,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean includeThreadName> = $stack49, 161)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("disableCertificateValidation", "false"),205,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('disableCertificateValidation', 'false'), 205))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("disableCertificateValidation", "false"),205,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('disableCertificateValidation', 'false'), 205)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack25 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("index", null),126,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack25 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('index', null), 126)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("index", $stack25),125,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>('index', $stack25), 125))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack25 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("index", null),126,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack25 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('index', null), 126)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("index", $stack25),125,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>('index', $stack25), 125)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2371,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2371))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2371,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2371)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0),397,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0),397,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,token = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("token", null),142,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, token = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('token', null), 142))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,token = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("token", null),142,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, token = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('token', null), 142)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,batchCount = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_size_count", 10L),152,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, batchCount = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_size_count', 10L), 152)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,maxEventsBatchCount := @parameter5: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack26 = maxEventsBatchCount cmp 0L,127,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack26 = maxEventsBatchCount cmp 0L, 127))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = neg l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,batchCount = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_size_count", 10L),152,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, batchCount = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_size_count', 10L), 152)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,maxEventsBatchCount := @parameter5: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack26 = maxEventsBatchCount cmp 0L,127,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack26 = maxEventsBatchCount cmp 0L, 127)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2493,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l2 = l0.<java.lang.Class: int classRedefinedCount>, 2493)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0),397,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0),397,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("type", null),148,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('type', null), 148)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,type := @parameter3: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack20 = virtualinvoke $stack19.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(type),112,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack20 = virtualinvoke $stack19.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(type), 112))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("type", null),148,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('type', null), 148)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,type := @parameter3: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack20 = virtualinvoke $stack19.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(type),112,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack20 = virtualinvoke $stack19.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(type), 112)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_size_bytes", 10240L),153,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_size_bytes', 10240L), 153)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,maxEventsBatchSize := @parameter6: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,this.<com.splunk.logging.HttpEventCollectorSender: long maxEventsBatchSize> = maxEventsBatchSize,133,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, this.<com.splunk.logging.HttpEventCollectorSender: long maxEventsBatchSize> = maxEventsBatchSize, 133))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = neg l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_size_bytes", 10240L),153,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_size_bytes', 10240L), 153)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,maxEventsBatchSize := @parameter6: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,this.<com.splunk.logging.HttpEventCollectorSender: long maxEventsBatchSize> = maxEventsBatchSize,133,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, this.<com.splunk.logging.HttpEventCollectorSender: long maxEventsBatchSize> = maxEventsBatchSize, 133)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack11 = l0.<java.lang.Class: java.lang.Class newInstanceCallerCache>,435,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack11 = l0.<java.lang.Class: java.lang.Class newInstanceCallerCache>, 435))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack11 = l0.<java.lang.Class: java.lang.Class newInstanceCallerCache>,435,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack11 = l0.<java.lang.Class: java.lang.Class newInstanceCallerCache>, 435)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2363,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2363))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2363,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2363)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(),432,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(), 432)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack7 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>(l0, l2#5),433,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack7 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>(l0, l2#5), 433))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack7 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>(l0, l2#5),433,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack7 = staticinvoke <sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>(l0, l2#5), 433)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors0(boolean)>(l1),2671,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors0(boolean)>(l1),2671,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: void <init>(char[],int,int)>,l3 := @parameter2: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack9 = l2 + l3,205,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, $stack9 = l2 + l3, 205)) => Node(<java.lang.String: void <init>(char[],int,int)>,specialinvoke $stack8.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>($stack9),205,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, specialinvoke $stack8.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>($stack9), 205))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = l1 + -1,2876,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack11 = l1 - 1, 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: void <init>(char[],int,int)>,l3 := @parameter2: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack9 = l2 + l3,205,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, $stack9 = l2 + l3, 205)) => Node(<java.lang.String: void <init>(char[],int,int)>,specialinvoke $stack8.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>($stack9),205,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, specialinvoke $stack8.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>($stack9), 205)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("disableCertificateValidation", "false"),205,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('disableCertificateValidation', 'false'), 205)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l6 = l0.<java.lang.String: char[] value>,1346,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l6 = l0.<java.lang.String: char[] value>, 1346)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l10 = l6[$stack30],1357,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l10 = l6[$stack30], 1357)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10),1367,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10), 1367))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)) => Node(<java.lang.Boolean: boolean parseBoolean(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l6 = l0.<java.lang.String: char[] value>,1346,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l6 = l0.<java.lang.String: char[] value>, 1346)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l10 = l6[$stack30],1357,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l10 = l6[$stack30], 1357)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10),1367,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10), 1367)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0),397,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0),397,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor> = l2,424,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor> = l2, 424))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor> = l2,424,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor> = l2, 424)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack4 = newarray (java.lang.Object)[1],260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('%d', $stack4), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%d", $stack4),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('%d', $stack4), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l5 = virtualinvoke l0.<java.lang.String: int length()>(),557,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l5 = virtualinvoke l0.<java.lang.String: int length()>(), 557))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l5 = virtualinvoke l0.<java.lang.String: int length()>(),557,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l5 = virtualinvoke l0.<java.lang.String: int length()>(), 557)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: void <init>(char[],int,int)>,l3 := @parameter2: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,specialinvoke $stack16.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3),196,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, specialinvoke $stack16.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3), 196))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = l1 + -1,2876,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack11 = l1 - 1, 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: void <init>(char[],int,int)>,l3 := @parameter2: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,specialinvoke $stack16.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3),196,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, specialinvoke $stack16.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3), 196)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.String: char charAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.String: char charAt(int)>,$stack5 = l0.<java.lang.String: char[] value>,660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563) => (<java.lang.String: char charAt(int)>, $stack5 = l0.<java.lang.String: char[] value>, 660)) => Node(<java.lang.String: char charAt(int)>,$stack6 = $stack5[l1],660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("url", null),139,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('url', null), 139)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,Url := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack61 = new java.lang.StringBuilder,116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, specialinvoke $stack61.<java.lang.StringBuilder: void <init>()>(), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Url),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Url), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/services/collector/raw"),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('/services/collector/raw'), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.String toString()>(),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.String toString()>(), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack65 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($stack64),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack65 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($stack64), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack66 = virtualinvoke $stack65.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>(),117,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack66 = virtualinvoke $stack65.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>(), 117))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("url", null),139,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('url', null), 139)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,Url := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Url),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Url), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/services/collector/raw"),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('/services/collector/raw'), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.String toString()>(),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.String toString()>(), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack65 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($stack64),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack65 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($stack64), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack66 = virtualinvoke $stack65.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>(),117,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack66 = virtualinvoke $stack65.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>(), 117)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0),2377,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0), 2377))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0),2377,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0), 2377)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,$stack1 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>,689,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,$stack1 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>,689,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.String: char charAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.String: char charAt(int)>,$stack5 = l0.<java.lang.String: char[] value>,660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563) => (<java.lang.String: char charAt(int)>, $stack5 = l0.<java.lang.String: char[] value>, 660)) => Node(<java.lang.String: char charAt(int)>,$stack6 = $stack5[l1],660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,l3 = l0.<java.lang.String: char[] value>,2870,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l3 = l0.<java.lang.String: char[] value>, 2870)) => Node(<java.lang.String: java.lang.String trim()>,$stack16 = l3[l2],2875,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack16 = l3[l2], 2875))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,l3 = l0.<java.lang.String: char[] value>,2870,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l3 = l0.<java.lang.String: char[] value>, 2870)) => Node(<java.lang.String: java.lang.String trim()>,$stack16 = l3[l2],2875,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack16 = l3[l2], 2875)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0),2377,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0), 2377))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0),2377,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0), 2377)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2493,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l2 = l0.<java.lang.Class: int classRedefinedCount>, 2493))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2493,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l2 = l0.<java.lang.Class: int classRedefinedCount>, 2493)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2363,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2363)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4),2365,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4), 2365))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2363,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2363)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4),2365,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4), 2365)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.String: char charAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.String: char charAt(int)>,$stack5 = l0.<java.lang.String: char[] value>,660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563) => (<java.lang.String: char charAt(int)>, $stack5 = l0.<java.lang.String: char[] value>, 660)) => Node(<java.lang.String: char charAt(int)>,$stack6 = $stack5[l1],660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = neg l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor> = l2,424,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor> = l2, 424))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor> = l2,424,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor> = l2, 424)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),852,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(), 852))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),852,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(), 852)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack11 = l0.<java.lang.Class: java.lang.Class newInstanceCallerCache>,435,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack11 = l0.<java.lang.Class: java.lang.Class newInstanceCallerCache>, 435))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack11 = l0.<java.lang.Class: java.lang.Class newInstanceCallerCache>,435,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack11 = l0.<java.lang.Class: java.lang.Class newInstanceCallerCache>, 435)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4),266,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack50 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>("include_exception", 1),162,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack50 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_exception', 1), 162))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4),266,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack50 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>("include_exception", 1),162,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack50 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_exception', 1), 162)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("middleware", null),157,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('middleware', null), 157)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,if middleware == null goto (branch),176,SinkNode, path: )
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("middleware", null),157,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('middleware', null), 157)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,if middleware == null goto (branch),176,SinkNode, path: ), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(),432,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(), 432))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(),432,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2#5 = virtualinvoke l1#4.<java.lang.reflect.Constructor: int getModifiers()>(), 432)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("send_mode", "sequential"),155,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('send_mode', 'sequential'), 155))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("send_mode", "sequential"),155,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('send_mode', 'sequential'), 155)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,if eventBodySerializer == null goto (branch),182,SinkNode, path: )
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,if eventBodySerializer == null goto (branch),182,SinkNode, path: ), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("url", null),139,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('url', null), 139)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,Url := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack61 = new java.lang.StringBuilder,116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, specialinvoke $stack61.<java.lang.StringBuilder: void <init>()>(), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Url),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Url), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/services/collector/raw"),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('/services/collector/raw'), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.String toString()>(),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.String toString()>(), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack65 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($stack64),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack65 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($stack64), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack66 = virtualinvoke $stack65.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>(),117,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack66 = virtualinvoke $stack65.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>(), 117)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,urlBuilder = virtualinvoke $stack66.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>("channel", channel),118,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, urlBuilder = virtualinvoke $stack66.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>('channel', channel), 118)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack69 = staticinvoke <com.splunk.logging.HttpEventCollectorSender$addQueryParameter__1: java.util.function.BiConsumer bootstrap$(okhttp3.HttpUrl$Builder)>(urlBuilder),119,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack69 = staticinvoke <com.splunk.logging.HttpEventCollectorSender$addQueryParameter__1: java.util.function.BiConsumer bootstrap$(okhttp3.HttpUrl$Builder)>(urlBuilder), 119)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,interfaceinvoke metadata.<java.util.Map: void forEach(java.util.function.BiConsumer)>($stack69),119,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, interfaceinvoke metadata.<java.util.Map: void forEach(java.util.function.BiConsumer)>($stack69), 119))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,urlBuilder = virtualinvoke $stack66.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>("channel", channel),118,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, urlBuilder = virtualinvoke $stack66.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>('channel', channel), 118)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,virtualinvoke urlBuilder.<java.lang.Object: java.lang.Class getClass()>(),119,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, virtualinvoke urlBuilder.<java.lang.Object: java.lang.Class getClass()>(), 119)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack25 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("index", null),126,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack25 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('index', null), 126)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("index", $stack25),125,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>('index', $stack25), 125))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack25 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("index", null),126,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack25 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('index', null), 126)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("index", $stack25),125,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>('index', $stack25), 125)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("send_mode", "sequential"),155,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('send_mode', 'sequential'), 155))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("send_mode", "sequential"),155,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('send_mode', 'sequential'), 155)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,staticinvoke <sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(l3, l0, null, l2#5),436,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, staticinvoke <sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(l3, l0, null, l2#5), 436))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,staticinvoke <sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(l3, l0, null, l2#5),436,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, staticinvoke <sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(l3, l0, null, l2#5), 436)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor> = l2,424,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor> = l2, 424))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor> = l2,424,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor> = l2, 424)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack9 = virtualinvoke l1#4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack8),442,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(), 184)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack79 = (com.splunk.logging.EventBodySerializer) $stack78,184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack79 = (com.splunk.logging.EventBodySerializer) $stack78, 184)) => Node(<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,eventBodySerializer := @parameter0: com.splunk.logging.EventBodySerializer,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184)) => Node(<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,virtualinvoke $stack2.<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>(eventBodySerializer),241,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184) => (<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>, virtualinvoke $stack2.<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>(eventBodySerializer), 241))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack9 = virtualinvoke l1#4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack8),442,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(), 184)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack79 = (com.splunk.logging.EventBodySerializer) $stack78,184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack79 = (com.splunk.logging.EventBodySerializer) $stack78, 184)) => Node(<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,eventBodySerializer := @parameter0: com.splunk.logging.EventBodySerializer,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184)) => Node(<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,virtualinvoke $stack2.<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>(eventBodySerializer),241,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184) => (<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>, virtualinvoke $stack2.<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>(eventBodySerializer), 241)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,$stack8 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),848,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,$stack8 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),848,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings),172,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("send_mode", "sequential"),155,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('send_mode', 'sequential'), 155)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings),172,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack34 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("messageFormat", null),136,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack34 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('messageFormat', null), 136)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("messageFormat", $stack34),135,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>('messageFormat', $stack34), 135))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack34 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("messageFormat", null),136,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack34 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('messageFormat', null), 136)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("messageFormat", $stack34),135,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, interfaceinvoke metadata.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>('messageFormat', $stack34), 135)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("send_mode", "sequential"),155,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('send_mode', 'sequential'), 155)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,sendModeStr := @parameter7: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack34 = virtualinvoke sendModeStr.<java.lang.String: boolean equals(java.lang.Object)>("parallel"),143,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack34 = virtualinvoke sendModeStr.<java.lang.String: boolean equals(java.lang.Object)>('parallel'), 143))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("send_mode", "sequential"),155,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('send_mode', 'sequential'), 155)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,sendModeStr := @parameter7: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack34 = virtualinvoke sendModeStr.<java.lang.String: boolean equals(java.lang.Object)>("parallel"),143,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack34 = virtualinvoke sendModeStr.<java.lang.String: boolean equals(java.lang.Object)>('parallel'), 143)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2493,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l2 = l0.<java.lang.Class: int classRedefinedCount>, 2493)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,$stack1 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>,689,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,$stack1 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>,689,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2371,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2371))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2371,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2371)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0.<java.lang.Class: java.lang.Class newInstanceCallerCache> = l3,437,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l0.<java.lang.Class: java.lang.Class newInstanceCallerCache> = l3, 437))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0.<java.lang.Class: java.lang.Class newInstanceCallerCache> = l3,437,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l0.<java.lang.Class: java.lang.Class newInstanceCallerCache> = l3, 437)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,retriesOnError = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("retries_on_error", 0L),154,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, retriesOnError = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('retries_on_error', 0L), 154)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,specialinvoke $stack61.<com.splunk.logging.HttpEventCollectorResendMiddleware: void <init>(long)>(retriesOnError),202,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack61.<com.splunk.logging.HttpEventCollectorResendMiddleware: void <init>(long)>(retriesOnError), 202))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = neg l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,retriesOnError = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("retries_on_error", 0L),154,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, retriesOnError = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('retries_on_error', 0L), 154)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,specialinvoke $stack61.<com.splunk.logging.HttpEventCollectorResendMiddleware: void <init>(long)>(retriesOnError),202,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack61.<com.splunk.logging.HttpEventCollectorResendMiddleware: void <init>(long)>(retriesOnError), 202)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.String: char charAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.String: char charAt(int)>,$stack5 = l0.<java.lang.String: char[] value>,660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563) => (<java.lang.String: char charAt(int)>, $stack5 = l0.<java.lang.String: char[] value>, 660))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.String: char charAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.String: char charAt(int)>,$stack5 = l0.<java.lang.String: char[] value>,660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563) => (<java.lang.String: char charAt(int)>, $stack5 = l0.<java.lang.String: char[] value>, 660)) => Node(<java.lang.String: char charAt(int)>,$stack6 = $stack5[l1],660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack28 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),427,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack28 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 427))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack31 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),427,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack31 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 427)) => Node(<java.lang.Class: java.lang.Object newInstance()>,specialinvoke tmp$1234659364.<java.lang.InstantiationException: void <init>(java.lang.String)>($stack31),427,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke tmp$1234659364.<java.lang.InstantiationException: void <init>(java.lang.String)>($stack31), 427)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = l1 + -1,2876,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack11 = l1 - 1, 2878))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = l1 + -1,2876,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack11 = l1 - 1, 2878)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack28 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),427,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack28 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 427))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack31 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),427,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack31 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 427)) => Node(<java.lang.Class: java.lang.Object newInstance()>,specialinvoke tmp$1234659364.<java.lang.InstantiationException: void <init>(java.lang.String)>($stack31),427,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke tmp$1234659364.<java.lang.InstantiationException: void <init>(java.lang.String)>($stack31), 427)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_size_bytes", 10240L),153,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_size_bytes', 10240L), 153)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,maxEventsBatchSize := @parameter6: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack55 = maxEventsBatchSize cmp 0L,140,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack55 = maxEventsBatchSize cmp 0L, 140))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = neg l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_size_bytes", 10240L),153,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_size_bytes', 10240L), 153)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,maxEventsBatchSize := @parameter6: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack55 = maxEventsBatchSize cmp 0L,140,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack55 = maxEventsBatchSize cmp 0L, 140)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0),2377,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0), 2377))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0),2377,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0), 2377)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3),2351,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3),2351,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2363,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2363)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4),2365,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4), 2365))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2363,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2363)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4),2365,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4), 2365)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<java.lang.Class: java.lang.Class forName(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack83 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(middleware), 178)) => Node(<java.lang.Class: java.lang.Class forName(java.lang.String)>,$stack5 = staticinvoke <java.lang.Class: java.lang.Class forName0(java.lang.String,boolean,java.lang.ClassLoader,java.lang.Class)>(l0, 1, $stack4, l1),264,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack83 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(middleware), 178))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<java.lang.Class: java.lang.Class forName(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack83 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(middleware), 178)) => Node(<java.lang.Class: java.lang.Class forName(java.lang.String)>,$stack5 = staticinvoke <java.lang.Class: java.lang.Class forName0(java.lang.String,boolean,java.lang.ClassLoader,java.lang.Class)>(l0, 1, $stack4, l1),264,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack83 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(middleware), 178)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("url", null),139,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('url', null), 139))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("url", null),139,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('url', null), 139)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l0.<java.lang.Class: java.lang.String name> = $stack2,642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250) => (<java.lang.Class: java.lang.String getName()>, l0.<java.lang.Class: java.lang.String name> = $stack2, 642))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,token = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("token", null),142,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, token = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('token', null), 142))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,token = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("token", null),142,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, token = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('token', null), 142)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack28 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),427,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack28 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 427))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer),193,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack31 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),427,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack31 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 427)) => Node(<java.lang.Class: java.lang.Object newInstance()>,specialinvoke tmp$1234659364.<java.lang.InstantiationException: void <init>(java.lang.String)>($stack31),427,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke tmp$1234659364.<java.lang.InstantiationException: void <init>(java.lang.String)>($stack31), 427)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_size_bytes", 10240L),153,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_size_bytes', 10240L), 153))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = neg l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_size_bytes", 10240L),153,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_size_bytes', 10240L), 153)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,batchCount = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_size_count", 10L),152,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, batchCount = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_size_count', 10L), 152)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,maxEventsBatchCount := @parameter5: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack26 = maxEventsBatchCount cmp 0L,127,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack26 = maxEventsBatchCount cmp 0L, 127))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = neg l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,batchCount = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_size_count", 10L),152,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, batchCount = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_size_count', 10L), 152)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,maxEventsBatchCount := @parameter5: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack26 = maxEventsBatchCount cmp 0L,127,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack26 = maxEventsBatchCount cmp 0L, 127)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("url", null),139,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('url', null), 139)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,Url := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack61 = new java.lang.StringBuilder,116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, specialinvoke $stack61.<java.lang.StringBuilder: void <init>()>(), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Url),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Url), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/services/collector/raw"),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('/services/collector/raw'), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.String toString()>(),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.String toString()>(), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack65 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($stack64),116,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack65 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($stack64), 116)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack66 = virtualinvoke $stack65.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>(),117,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack66 = virtualinvoke $stack65.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>(), 117)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,urlBuilder = virtualinvoke $stack66.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>("channel", channel),118,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, urlBuilder = virtualinvoke $stack66.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>('channel', channel), 118)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack69 = staticinvoke <com.splunk.logging.HttpEventCollectorSender$addQueryParameter__1: java.util.function.BiConsumer bootstrap$(okhttp3.HttpUrl$Builder)>(urlBuilder),119,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack69 = staticinvoke <com.splunk.logging.HttpEventCollectorSender$addQueryParameter__1: java.util.function.BiConsumer bootstrap$(okhttp3.HttpUrl$Builder)>(urlBuilder), 119)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,interfaceinvoke metadata.<java.util.Map: void forEach(java.util.function.BiConsumer)>($stack69),119,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, interfaceinvoke metadata.<java.util.Map: void forEach(java.util.function.BiConsumer)>($stack69), 119))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,urlBuilder = virtualinvoke $stack66.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>("channel", channel),118,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, urlBuilder = virtualinvoke $stack66.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>('channel', channel), 118)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,virtualinvoke urlBuilder.<java.lang.Object: java.lang.Class getClass()>(),119,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, virtualinvoke urlBuilder.<java.lang.Object: java.lang.Class getClass()>(), 119)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("send_mode", "sequential"),155,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('send_mode', 'sequential'), 155)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,sendModeStr := @parameter7: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack37 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown send mode: "),146,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack37 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Unknown send mode: '), 146))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("send_mode", "sequential"),155,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('send_mode', 'sequential'), 155)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,sendModeStr := @parameter7: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack37 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown send mode: "),146,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack37 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Unknown send mode: '), 146)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack38 = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(sendModeStr),146,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack38 = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(sendModeStr), 146)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack39 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.String toString()>(),146,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack39 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.String toString()>(), 146)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,specialinvoke $stack35.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack39),146,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, specialinvoke $stack35.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack39), 146)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,specialinvoke $stack14.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2),1963,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack14.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2), 1963))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = l1 + -1,2876,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack11 = l1 - 1, 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,specialinvoke $stack14.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2),1963,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack14.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2), 1963)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("url", null),139,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('url', null), 139)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,Url := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack21 = new java.lang.StringBuilder,122,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, specialinvoke $stack21.<java.lang.StringBuilder: void <init>()>(), 122))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("url", null),139,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, url = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('url', null), 139)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,Url := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack21 = new java.lang.StringBuilder,122,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, specialinvoke $stack21.<java.lang.StringBuilder: void <init>()>(), 122)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Url),122,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(Url), 122)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/services/collector/event/1.0"),122,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('/services/collector/event/1.0'), 122)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(),122,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(), 122)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4),266,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4),266,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.String: char charAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.String: char charAt(int)>,$stack5 = l0.<java.lang.String: char[] value>,660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563) => (<java.lang.String: char charAt(int)>, $stack5 = l0.<java.lang.String: char[] value>, 660)) => Node(<java.lang.String: char charAt(int)>,$stack6 = $stack5[l1],660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("disableCertificateValidation", "false"),205,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack58 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('disableCertificateValidation', 'false'), 205)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l6 = l0.<java.lang.String: char[] value>,1346,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l6 = l0.<java.lang.String: char[] value>, 1346))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)) => Node(<java.lang.Boolean: boolean parseBoolean(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l6 = l0.<java.lang.String: char[] value>,1346,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l6 = l0.<java.lang.String: char[] value>, 1346)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2363,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2363)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4),2365,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4), 2365))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2363,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2363)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4),2365,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4), 2365)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,retriesOnError = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("retries_on_error", 0L),154,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, retriesOnError = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('retries_on_error', 0L), 154))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = neg l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,retriesOnError = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("retries_on_error", 0L),154,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, retriesOnError = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('retries_on_error', 0L), 154)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,staticinvoke <sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(l3, l0, null, l2#5),436,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, staticinvoke <sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(l3, l0, null, l2#5), 436))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,staticinvoke <sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(l3, l0, null, l2#5),436,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, staticinvoke <sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(l3, l0, null, l2#5), 436)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: void <init>(char[],int,int)>,l3 := @parameter2: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack9 = l2 + l3,205,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, $stack9 = l2 + l3, 205)) => Node(<java.lang.String: void <init>(char[],int,int)>,specialinvoke $stack8.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>($stack9),205,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, specialinvoke $stack8.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>($stack9), 205))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,channel := @parameter2: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = l1 + -1,2876,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack11 = l1 - 1, 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: void <init>(char[],int,int)>,l3 := @parameter2: int,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack9 = l2 + l3,205,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, $stack9 = l2 + l3, 205)) => Node(<java.lang.String: void <init>(char[],int,int)>,specialinvoke $stack8.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>($stack9),205,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, specialinvoke $stack8.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>($stack9), 205)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = neg l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2371,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2371))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2371,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2371)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),2660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2660)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>,2666,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>, 2666))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,$stack6 = virtualinvoke l0.<java.lang.Class: boolean isInterface()>(),2666,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075) => (<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>, $stack6 = virtualinvoke l0.<java.lang.Class: boolean isInterface()>(), 2666)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors0(boolean)>(l1),2671,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)) => Node(<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>,l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors0(boolean)>(l1),2671,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1), 412) => (<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($stack23), 3075)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.String: char charAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.String: char charAt(int)>,$stack5 = l0.<java.lang.String: char[] value>,660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563) => (<java.lang.String: char charAt(int)>, $stack5 = l0.<java.lang.String: char[] value>, 660)) => Node(<java.lang.String: char charAt(int)>,$stack6 = $stack5[l1],660,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l9 = virtualinvoke l0.<java.lang.String: char charAt(int)>(0), 563)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack17 = l6 + l8,586,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack17 = l6 + l8, 586))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack17 = l6 + l8,586,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack17 = l6 + l8, 586)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4),266,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack50 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>("include_exception", 1),162,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack50 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_exception', 1), 162))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3),267,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack4 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack3), 267)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>,$stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4),266,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack50 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>("include_exception", 1),162,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack50 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_exception', 1), 162)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,if eventBodySerializer == null goto (branch),182,SinkNode, path: )
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,if eventBodySerializer == null goto (branch),182,SinkNode, path: ), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack9 = virtualinvoke l1#4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack8),442,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(), 184)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack79 = (com.splunk.logging.EventBodySerializer) $stack78,184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack79 = (com.splunk.logging.EventBodySerializer) $stack78, 184)) => Node(<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,eventBodySerializer := @parameter0: com.splunk.logging.EventBodySerializer,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184)) => Node(<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,virtualinvoke $stack2.<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>(eventBodySerializer),241,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184) => (<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>, virtualinvoke $stack2.<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>(eventBodySerializer), 241))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>,430,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, l1#4 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 430)) => Node(<java.lang.Class: java.lang.Object newInstance()>,$stack9 = virtualinvoke l1#4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($stack8),442,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Object newInstance()>(), 184)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack79 = (com.splunk.logging.EventBodySerializer) $stack78,184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack79 = (com.splunk.logging.EventBodySerializer) $stack78, 184)) => Node(<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,eventBodySerializer := @parameter0: com.splunk.logging.EventBodySerializer,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184)) => Node(<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>,virtualinvoke $stack2.<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>(eventBodySerializer),241,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184) => (<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>, virtualinvoke $stack2.<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>(eventBodySerializer), 241)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer),184,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack77 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventBodySerializer), 184)) => Node(<java.lang.Class: java.lang.Object newInstance()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("send_mode", "sequential"),155,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('send_mode', 'sequential'), 155)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,sendModeStr := @parameter7: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack33 = virtualinvoke sendModeStr.<java.lang.String: boolean equals(java.lang.Object)>("sequential"),141,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack33 = virtualinvoke sendModeStr.<java.lang.String: boolean equals(java.lang.Object)>('sequential'), 141))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("send_mode", "sequential"),155,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, sendMode = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('send_mode', 'sequential'), 155)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,sendModeStr := @parameter7: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172)) => Node(<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>,$stack33 = virtualinvoke sendModeStr.<java.lang.String: boolean equals(java.lang.Object)>("sequential"),141,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack33 = virtualinvoke sendModeStr.<java.lang.String: boolean equals(java.lang.Object)>('sequential'), 141)), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack74 = virtualinvoke eventBodySerializer.<java.lang.String: boolean isEmpty()>(),201,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack74 = virtualinvoke eventBodySerializer.<java.lang.String: boolean isEmpty()>(), 201))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack74 = virtualinvoke eventBodySerializer.<java.lang.String: boolean isEmpty()>(),201,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack74 = virtualinvoke eventBodySerializer.<java.lang.String: boolean isEmpty()>(), 201)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,if $stack74 != 0 goto (branch),201,SinkNode, path: ), SOURCE=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,retriesOnError = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("retries_on_error", 0L),154,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, retriesOnError = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('retries_on_error', 0L), 154)) => Node(<com.splunk.logging.HttpEventCollectorResendMiddleware: void <init>(long)>,retriesOnError := @parameter0: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack61.<com.splunk.logging.HttpEventCollectorResendMiddleware: void <init>(long)>(retriesOnError), 202)) => Node(<com.splunk.logging.HttpEventCollectorResendMiddleware: void <init>(long)>,this.<com.splunk.logging.HttpEventCollectorResendMiddleware: long retriesOnError> = retriesOnError,40,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack61.<com.splunk.logging.HttpEventCollectorResendMiddleware: void <init>(long)>(retriesOnError), 202) => (<com.splunk.logging.HttpEventCollectorResendMiddleware: void <init>(long)>, this.<com.splunk.logging.HttpEventCollectorResendMiddleware: long retriesOnError> = retriesOnError, 40))
SINK=>BASE: Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack15 = virtualinvoke l0.<java.lang.String: char charAt(int)>($stack14), 578)) => Node(<java.lang.Character: int digit(char,int)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Character: int digit(char,int)>,$stack2 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1),6511,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1),578,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l8 = staticinvoke <java.lang.Character: int digit(char,int)>($stack15, l1), 578)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,l2 = l2 - l8,589,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, l2 = l2 * l1, 585)) => Node(<java.lang.Integer: int parseInt(java.lang.String,int)>,$stack13 = neg l2,594,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615)) => Node(<java.lang.Integer: int parseInt(java.lang.String)>,$stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10),615,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,retriesOnError = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("retries_on_error", 0L),154,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, retriesOnError = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('retries_on_error', 0L), 154)) => Node(<com.splunk.logging.HttpEventCollectorResendMiddleware: void <init>(long)>,retriesOnError := @parameter0: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack61.<com.splunk.logging.HttpEventCollectorResendMiddleware: void <init>(long)>(retriesOnError), 202)) => Node(<com.splunk.logging.HttpEventCollectorResendMiddleware: void <init>(long)>,this.<com.splunk.logging.HttpEventCollectorResendMiddleware: long retriesOnError> = retriesOnError,40,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack61.<com.splunk.logging.HttpEventCollectorResendMiddleware: void <init>(long)>(retriesOnError), 202) => (<com.splunk.logging.HttpEventCollectorResendMiddleware: void <init>(long)>, this.<com.splunk.logging.HttpEventCollectorResendMiddleware: long retriesOnError> = retriesOnError, 40))]
Confluence interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Confluence flows from execution of lines 123 and 156 to line 178, defined in $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("host", null) and eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", "") and used in $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>()
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)
Caused by line 156 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)
Caused by line 178 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(), 852)
Confluence interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Confluence flows from execution of lines 151 and 123 to line 172, defined in delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_interval", 10000L) and $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("host", null) and used in specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings)
Caused by line 151 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)
Caused by line 172 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack27 = maxEventsBatchSize cmp 0L, 129)
Confluence interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Confluence flows from execution of lines 151 and 123 to line 151, defined in delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_interval", 10000L) and $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("host", null) and used in delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_interval", 10000L)
Caused by line 151 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)
Caused by line 151 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260) => (<java.lang.Integer: int parseInt(java.lang.String)>, $stack1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(l0, 10), 615) => (<java.lang.Integer: int parseInt(java.lang.String,int)>, $stack20 = staticinvoke <java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>(l0), 587)
Confluence interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Confluence flows from execution of lines 123 and 123 to line 153, defined in $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("host", null) and $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("host", null) and used in batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("batch_size_bytes", 10240L)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)
Caused by line 153 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, batchSize = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_size_bytes', 10240L), 153)
Confluence interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Confluence flows from execution of lines 123 and 123 to line 184, defined in $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("host", null) and $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("host", null) and used in virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)
Caused by line 184 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, virtualinvoke $stack76.<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>($stack79), 184) => (<com.splunk.logging.HttpEventCollectorSender: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>, virtualinvoke $stack2.<com.splunk.logging.serialization.HecJsonSerializer: void setEventBodySerializer(com.splunk.logging.EventBodySerializer)>(eventBodySerializer), 241)
Confluence interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Confluence flows from execution of lines 123 and 193 to line 178, defined in $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("host", null) and $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer) and used in $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>()
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)
Caused by line 193 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack71 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(eventHeaderSerializer), 193)
Caused by line 178 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, $stack5 = l0.<java.lang.Class: java.lang.reflect.Constructor cachedConstructor>, 404)
Confluence interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Confluence flows from execution of lines 123 and 123 to line 160, defined in $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("host", null) and $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("host", null) and used in $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>("include_logger_name", 1)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)
Caused by line 160 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack48 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>('include_logger_name', 1), 160) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: boolean getConfigurationBooleanProperty(java.lang.String,boolean)>, $stack5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($stack4), 266) => (<java.lang.Boolean: boolean parseBoolean(java.lang.String)>, $stack1 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>('true'), 122) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack18 = (long) $stack16, 1354)
Confluence interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Confluence flows from execution of lines 158 and 123 to line 178, defined in eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null) and $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("host", null) and used in $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>()
Caused by line 158 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)
Caused by line 178 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Object newInstance()>(), 178) => (<java.lang.Class: java.lang.Object newInstance()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $stack24, 0), 397) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2381)
Confluence interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Confluence flows from execution of lines 145 and 123 to line 172, defined in channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null) and $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("host", null) and used in specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings)
Caused by line 145 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)
Caused by line 172 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack56.<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>(url, token, channel, type, delay, batchCount, batchSize, sendMode, metadata, timeoutSettings), 172) => (<com.splunk.logging.HttpEventCollectorSender: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,long,long,java.lang.String,java.util.Map,com.splunk.logging.HttpEventCollectorSender$TimeoutSettings)>, $stack59 = virtualinvoke channel.<java.lang.String: java.lang.String trim()>(), 114) => (<java.lang.String: java.lang.String trim()>, $stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1), 2878) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)
java.util.NoSuchElementException: head of empty list
	at scala.collection.immutable.Nil$.head(List.scala:430)
	at scala.collection.immutable.Nil$.head(List.scala:427)
	at scala.collection.generic.TraversableForwarder.head(TraversableForwarder.scala:59)
	at scala.collection.generic.TraversableForwarder.head$(TraversableForwarder.scala:59)
	at scala.collection.mutable.ListBuffer.head(ListBuffer.scala:47)
	at br.unb.cic.analysis.svfa.confluence.DFPConfluenceAnalysis.reportConflictsConfluence(DFPConfluenceAnalysis.java:181)
	at br.unb.cic.analysis.Main.runDFPConfluenceAnalysis(Main.java:566)
	at br.unb.cic.analysis.Main.runAnalysis(Main.java:243)
	at br.unb.cic.analysis.Main.main(Main.java:80)
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/splunk-library-javalogging/f80bc59f417077de739ae23c10be9b1658219bed/original-without-dependencies/splunk-library-javalogging-1.8.0.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,75500
Runtime: 0.027s
Time to perform OA Inter 0,88900
OA Inter Visited methods: 44
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/splunk-library-javalogging/f80bc59f417077de739ae23c10be9b1658219bed/original-without-dependencies/splunk-library-javalogging-1.8.0.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,43200
Time to perform DFP Inter 1,45700
Depth limit: 5
CONFLICTS: DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 123, defined in $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>() and propagated in specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>()
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>(), 249)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 156, defined in $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7) and propagated in eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", "")
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)
Caused by line 156 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 156, defined in value = defaultValue and propagated in eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", "")
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)
Caused by line 156 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 156, defined in $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>() and propagated in eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", "")
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)
Caused by line 156 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 123, defined in $stack5 = new java.lang.StringBuilder and propagated in specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>()
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>(), 249)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>(), 249)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Empty list for reporting data flow! Error: head of empty list
[List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("middleware", null),157,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('middleware', null), 157)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack80 = virtualinvoke middleware.<java.lang.String: boolean isEmpty()>(),191,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack80 = virtualinvoke middleware.<java.lang.String: boolean isEmpty()>(), 191)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,if $stack80 != 0 goto (branch),191,SinkNode, path: )), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,return value,255,SinkNode, path: )), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,return value,255,SinkNode, path: )), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,if value != null goto return value,252,SinkNode, path: )), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack5 = new java.lang.StringBuilder,249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>(),249,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>(), 249))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("middleware", null),157,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('middleware', null), 157)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack80 = virtualinvoke middleware.<java.lang.String: boolean isEmpty()>(),191,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack80 = virtualinvoke middleware.<java.lang.String: boolean isEmpty()>(), 191)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,if $stack80 != 0 goto (branch),191,SinkNode, path: )), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("middleware", null),157,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('middleware', null), 157)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack80 = virtualinvoke middleware.<java.lang.String: boolean isEmpty()>(),191,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack80 = virtualinvoke middleware.<java.lang.String: boolean isEmpty()>(), 191)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,if $stack80 != 0 goto (branch),191,SinkNode, path: )), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,return value,255,SinkNode, path: )), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%d", $stack4),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('%d', $stack4), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,defaultValue := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, value = defaultValue, 253)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,return value,255,SinkNode, path: )), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("middleware", null),157,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('middleware', null), 157)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack80 = virtualinvoke middleware.<java.lang.String: boolean isEmpty()>(),191,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack80 = virtualinvoke middleware.<java.lang.String: boolean isEmpty()>(), 191)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,if $stack80 != 0 goto (branch),191,SinkNode, path: )), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,if value != null goto return value,252,SinkNode, path: )), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventHeaderSerializer", ""),156,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventHeaderSerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventHeaderSerializer', ''), 156))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack4 = newarray (java.lang.Object)[1],260,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('%d', $stack4), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%d", $stack4),261,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('%d', $stack4), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,defaultValue := @parameter1: java.lang.String,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, value = defaultValue, 253)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,return value,255,SinkNode, path: )), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack5 = new java.lang.StringBuilder,249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>(),249,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>(), 249)))]
Visited methods: 56
 Analysis results
----------------------------
 Number of conflicts: 16
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/splunk-library-javalogging/f80bc59f417077de739ae23c10be9b1658219bed/original-without-dependencies/splunk-library-javalogging-1.8.0.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,65500
Time to perform DFP Inter 1,35400
Depth limit: 5
CONFLICTS: DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 123, defined in $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>() and propagated in $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("host", null)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 167, defined in $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7) and propagated in $stack54 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("read_timeout", 0L)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)
Caused by line 167 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack54 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('read_timeout', 0L), 167)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 145, defined in value = defaultValue and propagated in channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)
Caused by line 145 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 168, defined in $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>() and propagated in this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long callTimeout> = callTimeout
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)
Caused by line 168 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55), 168) => (<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>, this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long callTimeout> = callTimeout, 401)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 148, defined in $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>() and propagated in type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("type", null)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)
Caused by line 148 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('type', null), 148)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 157, defined in $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>() and propagated in middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("middleware", null)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)
Caused by line 157 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('middleware', null), 157)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 126, defined in $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>() and propagated in $stack25 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("index", null)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)
Caused by line 126 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack25 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('index', null), 126)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 132, defined in $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>() and propagated in $stack31 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("sourcetype", null)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)
Caused by line 132 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack31 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('sourcetype', null), 132)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 151, defined in $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7) and propagated in $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)
Caused by line 151 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 132, defined in value = defaultValue and propagated in $stack31 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("sourcetype", null)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)
Caused by line 132 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack31 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('sourcetype', null), 132)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 129, defined in $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>() and propagated in $stack28 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("source", null)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)
Caused by line 129 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack28 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('source', null), 129)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 158, defined in $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7) and propagated in eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)
Caused by line 158 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 167, defined in $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>() and propagated in $stack54 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("read_timeout", 0L)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)
Caused by line 167 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack54 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('read_timeout', 0L), 167)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 148, defined in value = defaultValue and propagated in type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("type", null)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)
Caused by line 148 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('type', null), 148)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 151, defined in $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>() and propagated in $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)
Caused by line 151 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 132, defined in $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7) and propagated in $stack31 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("sourcetype", null)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)
Caused by line 132 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack31 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('sourcetype', null), 132)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 165, defined in $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7) and propagated in $stack52 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("connect_timeout", 30000L)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)
Caused by line 165 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack52 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('connect_timeout', 30000L), 165)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 151, defined in value = defaultValue and propagated in $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)
Caused by line 151 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 129, defined in $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7) and propagated in $stack28 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("source", null)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)
Caused by line 129 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack28 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('source', null), 129)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 158, defined in $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>() and propagated in eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)
Caused by line 158 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 168, defined in $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>() and propagated in this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long connectTimeout> = connectTimeout
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)
Caused by line 168 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55), 168) => (<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>, this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long connectTimeout> = connectTimeout, 400)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 158, defined in value = defaultValue and propagated in eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)
Caused by line 158 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 148, defined in $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7) and propagated in type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("type", null)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)
Caused by line 148 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('type', null), 148)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 145, defined in $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7) and propagated in channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)
Caused by line 145 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 166, defined in $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>() and propagated in $stack53 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("call_timeout", 0L)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)
Caused by line 166 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack53 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('call_timeout', 0L), 166)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 123, defined in value = defaultValue and propagated in $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("host", null)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 157, defined in value = defaultValue and propagated in middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("middleware", null)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)
Caused by line 157 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('middleware', null), 157)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 165, defined in $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>() and propagated in $stack52 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("connect_timeout", 30000L)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)
Caused by line 165 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack52 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('connect_timeout', 30000L), 165)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 168, defined in $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7) and propagated in this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long connectTimeout> = connectTimeout
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)
Caused by line 168 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55), 168) => (<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>, this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long connectTimeout> = connectTimeout, 400)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 168, defined in $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7) and propagated in specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)
Caused by line 168 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55), 168)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 145, defined in $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>() and propagated in channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)
Caused by line 145 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 129, defined in value = defaultValue and propagated in $stack28 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("source", null)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)
Caused by line 129 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack28 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('source', null), 129)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 126, defined in value = defaultValue and propagated in $stack25 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("index", null)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)
Caused by line 126 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack25 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('index', null), 126)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 168, defined in $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7) and propagated in this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long callTimeout> = callTimeout
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)
Caused by line 168 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55), 168) => (<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>, this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long callTimeout> = callTimeout, 401)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 123, defined in $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7) and propagated in $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("host", null)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 123, defined in $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>() and propagated in specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>()
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>(), 249)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 168, defined in $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>() and propagated in this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long readTimeout> = readTimeout
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)
Caused by line 168 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55), 168) => (<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>, this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long readTimeout> = readTimeout, 402)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 136, defined in $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>() and propagated in $stack34 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("messageFormat", null)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)
Caused by line 136 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack34 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('messageFormat', null), 136)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 151, defined in $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>() and propagated in $stack11 = (long) $stack10
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)
Caused by line 151 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 136, defined in value = defaultValue and propagated in $stack34 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("messageFormat", null)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)
Caused by line 136 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack34 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('messageFormat', null), 136)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 168, defined in $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7) and propagated in this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long readTimeout> = readTimeout
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)
Caused by line 168 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55), 168) => (<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>, this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long readTimeout> = readTimeout, 402)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 168, defined in $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7) and propagated in this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long writeTimeout> = writeTimeout
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)
Caused by line 168 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55), 168) => (<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>, this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long writeTimeout> = writeTimeout, 403)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 157, defined in $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7) and propagated in middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("middleware", null)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)
Caused by line 157 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('middleware', null), 157)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 136, defined in $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7) and propagated in $stack34 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("messageFormat", null)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)
Caused by line 136 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack34 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('messageFormat', null), 136)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 123, defined in $stack5 = new java.lang.StringBuilder and propagated in specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>()
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>(), 249)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>(), 249)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 168, defined in $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>() and propagated in this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long writeTimeout> = writeTimeout
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)
Caused by line 168 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55), 168) => (<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>, this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long writeTimeout> = writeTimeout, 403)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 151, defined in $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7) and propagated in $stack11 = (long) $stack10
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)
Caused by line 151 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 126, defined in $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7) and propagated in $stack25 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("index", null)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)
Caused by line 126 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack25 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('index', null), 126)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 166, defined in $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7) and propagated in $stack53 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("call_timeout", 0L)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)
Caused by line 166 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack53 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('call_timeout', 0L), 166)
DF interference in <com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>
Data flows from execution of line 123 to 168, defined in $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>() and propagated in specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55)
Caused by line 123 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)
Caused by line 168 flow: path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55), 168)
[List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack53 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("call_timeout", 0L),166,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack53 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('call_timeout', 0L), 166)) => Node(<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>,callTimeout := @parameter1: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55), 168)) => Node(<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>,this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long callTimeout> = callTimeout,401,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55), 168) => (<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>, this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long callTimeout> = callTimeout, 401))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("middleware", null),157,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('middleware', null), 157))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack34 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("messageFormat", null),136,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack34 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('messageFormat', null), 136))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack54 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("read_timeout", 0L),167,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack54 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('read_timeout', 0L), 167))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack25 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("index", null),126,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack25 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('index', null), 126))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack53 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("call_timeout", 0L),166,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack53 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('call_timeout', 0L), 166))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,return value,255,SinkNode, path: )), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack54 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("read_timeout", 0L),167,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack54 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('read_timeout', 0L), 167))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,return value,255,SinkNode, path: )), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,if value != null goto return value,252,SinkNode, path: )), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("type", null),148,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('type', null), 148))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack34 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("messageFormat", null),136,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack34 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('messageFormat', null), 136))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack53 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("call_timeout", 0L),166,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack53 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('call_timeout', 0L), 166)) => Node(<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>,callTimeout := @parameter1: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55), 168)) => Node(<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>,this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long callTimeout> = callTimeout,401,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55), 168) => (<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>, this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long callTimeout> = callTimeout, 401))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack28 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("source", null),129,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack28 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('source', null), 129))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("middleware", null),157,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('middleware', null), 157))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack52 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("connect_timeout", 30000L),165,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack52 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('connect_timeout', 30000L), 165))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack5 = new java.lang.StringBuilder,249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>(),249,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>(), 249))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("type", null),148,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('type', null), 148))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack54 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("read_timeout", 0L),167,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack54 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('read_timeout', 0L), 167)) => Node(<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>,readTimeout := @parameter2: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55), 168)) => Node(<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>,this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long readTimeout> = readTimeout,402,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55), 168) => (<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>, this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long readTimeout> = readTimeout, 402))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack31 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("sourcetype", null),132,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack31 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('sourcetype', null), 132))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack55 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("write_timeout", 0L),168,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack55 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('write_timeout', 0L), 168)) => Node(<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>,writeTimeout := @parameter3: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55), 168)) => Node(<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>,this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long writeTimeout> = writeTimeout,403,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55), 168) => (<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>, this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long writeTimeout> = writeTimeout, 403))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack28 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("source", null),129,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack28 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('source', null), 129))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("host", null),123,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack28 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("source", null),129,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack28 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('source', null), 129))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack52 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("connect_timeout", 30000L),165,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack52 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('connect_timeout', 30000L), 165)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55),168,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55), 168))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("middleware", null),157,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('middleware', null), 157))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack31 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("sourcetype", null),132,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack31 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('sourcetype', null), 132))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack54 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("read_timeout", 0L),167,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack54 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('read_timeout', 0L), 167)) => Node(<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>,readTimeout := @parameter2: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55), 168)) => Node(<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>,this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long readTimeout> = readTimeout,402,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55), 168) => (<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>, this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long readTimeout> = readTimeout, 402))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack52 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("connect_timeout", 30000L),165,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack52 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('connect_timeout', 30000L), 165)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55),168,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55), 168))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack53 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("call_timeout", 0L),166,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack53 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('call_timeout', 0L), 166))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack34 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("messageFormat", null),136,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack34 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('messageFormat', null), 136))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack52 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("connect_timeout", 30000L),165,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack52 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('connect_timeout', 30000L), 165))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack25 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("index", null),126,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack25 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('index', null), 126))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,return value,255,SinkNode, path: )), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack52 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("connect_timeout", 30000L),165,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack52 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('connect_timeout', 30000L), 165)) => Node(<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>,connectTimeout := @parameter0: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55), 168)) => Node(<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>,this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long connectTimeout> = connectTimeout,400,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55), 168) => (<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>, this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long connectTimeout> = connectTimeout, 400))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack55 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("write_timeout", 0L),168,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack55 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('write_timeout', 0L), 168)) => Node(<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>,writeTimeout := @parameter3: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55), 168)) => Node(<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>,this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long writeTimeout> = writeTimeout,403,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55), 168) => (<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>, this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long writeTimeout> = writeTimeout, 403))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack31 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("sourcetype", null),132,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack31 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('sourcetype', null), 132))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("channel", null),145,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, channel = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('channel', null), 145))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("eventBodySerializer", null),158,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, eventBodySerializer = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('eventBodySerializer', null), 158))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8),261,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack9 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>(property, $stack8), 261)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9),260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>, $stack10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($stack9), 260)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>,$stack11 = (long) $stack10,260,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, delay = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('batch_interval', 10000L), 151)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack52 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>("connect_timeout", 30000L),165,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack52 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: long getConfigurationNumericProperty(java.lang.String,long)>('connect_timeout', 30000L), 165)) => Node(<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>,connectTimeout := @parameter0: long,-1,SimpleNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55), 168)) => Node(<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>,this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long connectTimeout> = connectTimeout,400,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, specialinvoke $stack51.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>($stack52, $stack53, $stack54, $stack55), 168) => (<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: void <init>(long,long,long,long)>, this.<com.splunk.logging.HttpEventCollectorSender$TimeoutSettings: long connectTimeout> = connectTimeout, 400))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack25 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("index", null),126,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack25 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('index', null), 126))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,if value != null goto return value,252,SinkNode, path: )), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("type", null),148,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, type = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('type', null), 148))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack8 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(property), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(),250,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>(), 250)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = virtualinvoke $stack4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($stack11),249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("host", null),123,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,$stack5 = new java.lang.StringBuilder,249,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>(), 249)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>(),249,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123) => (<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>, specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>(), 249))), List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>,value = defaultValue,253,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("host", null),123,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack22 = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('host', null), 123)))]
Visited methods: 56
 Analysis results
----------------------------
 Number of conflicts: 55
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/splunk-library-javalogging/f80bc59f417077de739ae23c10be9b1658219bed/original-without-dependencies/splunk-library-javalogging-1.8.0.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,59700
Time to perform PDG 0,75200
CONFLICTS: [List(Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>("middleware", null),157,SourceNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, middleware = specialinvoke this.<com.splunk.logging.HttpEventCollectorLoggingHandler: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)>('middleware', null), 157)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,if middleware == null goto (branch),176,SimpleNode, path: ) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,$stack80 = virtualinvoke middleware.<java.lang.String: boolean isEmpty()>(),191,SinkNode, path: (<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>, $stack80 = virtualinvoke middleware.<java.lang.String: boolean isEmpty()>(), 191)) => Node(<com.splunk.logging.HttpEventCollectorLoggingHandler: void <init>()>,if $stack80 != 0 goto (branch),191,SinkNode, path: ))]
 Analysis results
----------------------------
 Number of conflicts: 1
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/splunk-library-javalogging/f80bc59f417077de739ae23c10be9b1658219bed/original-without-dependencies/splunk-library-javalogging-1.8.0.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,55300
Time to perform PDG 0,63800
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
