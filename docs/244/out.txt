SOURCE=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack136 = new de.congrace.exp4j.UnparsableExpressionException,75,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.String detailMessage> = l1,266,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.String detailMessage> = l1, 266))
SINK=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack23 = i + 1,109,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack23 = i + 1, 109)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,pos := @parameter2: int,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(pos),36,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(pos), 36)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in expression \'"),36,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' in expression \''), 36)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(expression),36,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(expression), 36)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'"),36,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\''), 36)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,$stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(),36,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>, $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(), 36)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.String detailMessage> = l1,266,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.String detailMessage> = l1, 266))

SOURCE=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack136 = new de.congrace.exp4j.UnparsableExpressionException,75,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3,784,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3, 784))
SINK=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack22 = new de.congrace.exp4j.UnparsableExpressionException,109,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3,784,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3, 784))

SOURCE=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack136 = new de.congrace.exp4j.UnparsableExpressionException,75,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(),265,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265))
SINK=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack22 = new de.congrace.exp4j.UnparsableExpressionException,109,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(),265,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265))

SOURCE=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack136 = new de.congrace.exp4j.UnparsableExpressionException,75,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1),66,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66))
SINK=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack71 = i + 1,129,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack71 = i + 1, 129)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,pos := @parameter2: int,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(pos),36,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(pos), 36)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in expression \'"),36,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' in expression \''), 36)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(expression),36,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(expression), 36)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'"),36,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\''), 36)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,$stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(),36,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>, $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(), 36)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1),66,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66))

SOURCE=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack136 = new de.congrace.exp4j.UnparsableExpressionException,75,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2,210,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2, 210))
SINK=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack22 = new de.congrace.exp4j.UnparsableExpressionException,109,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2,210,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2, 210))

SOURCE=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack136 = new de.congrace.exp4j.UnparsableExpressionException,75,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1),66,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66))
SINK=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack23 = i + 1,109,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack23 = i + 1, 109)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,pos := @parameter2: int,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(pos),36,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(pos), 36)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in expression \'"),36,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' in expression \''), 36)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(expression),36,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(expression), 36)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'"),36,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\''), 36)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,$stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(),36,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>, $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(), 36)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1),66,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66))

SOURCE=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack136 = new de.congrace.exp4j.UnparsableExpressionException,75,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0),783,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0), 783))
SINK=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack70 = new de.congrace.exp4j.UnparsableExpressionException,129,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71), 129)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0),783,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0), 783))

SOURCE=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack136 = new de.congrace.exp4j.UnparsableExpressionException,75,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,$stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>,786,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, $stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>, 786))
SINK=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack22 = new de.congrace.exp4j.UnparsableExpressionException,109,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,$stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>,786,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, $stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>, 786))

SOURCE=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack136 = new de.congrace.exp4j.UnparsableExpressionException,75,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2,210,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2, 210))
SINK=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack70 = new de.congrace.exp4j.UnparsableExpressionException,129,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71), 129)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2,210,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2, 210))

SOURCE=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack136 = new de.congrace.exp4j.UnparsableExpressionException,75,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1),66,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66))
SINK=>BASE: Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,$stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(),36,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>, $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(), 36)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1),66,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66))

SOURCE=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack136 = new de.congrace.exp4j.UnparsableExpressionException,75,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Object: void <init>()>(),264,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Object: void <init>()>(), 264))
SINK=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack22 = new de.congrace.exp4j.UnparsableExpressionException,109,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Object: void <init>()>(),264,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Object: void <init>()>(), 264))

SOURCE=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack136 = new de.congrace.exp4j.UnparsableExpressionException,75,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3,227,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3, 227))
SINK=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack22 = new de.congrace.exp4j.UnparsableExpressionException,109,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3,227,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3, 227))

SOURCE=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack136 = new de.congrace.exp4j.UnparsableExpressionException,75,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3,784,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3, 784))
SINK=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack70 = new de.congrace.exp4j.UnparsableExpressionException,129,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71), 129)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3,784,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3, 784))

SOURCE=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack136 = new de.congrace.exp4j.UnparsableExpressionException,75,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(),265,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265))
SINK=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack70 = new de.congrace.exp4j.UnparsableExpressionException,129,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71), 129)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(),265,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265))

SOURCE=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack136 = new de.congrace.exp4j.UnparsableExpressionException,75,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Object: void <init>()>(),264,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Object: void <init>()>(), 264))
SINK=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack70 = new de.congrace.exp4j.UnparsableExpressionException,129,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71), 129)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Object: void <init>()>(),264,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Object: void <init>()>(), 264))

SOURCE=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack136 = new de.congrace.exp4j.UnparsableExpressionException,75,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.String detailMessage> = l1,266,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.String detailMessage> = l1, 266))
SINK=>BASE: Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,$stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(),36,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>, $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(), 36)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.String detailMessage> = l1,266,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.String detailMessage> = l1, 266))

SOURCE=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack136 = new de.congrace.exp4j.UnparsableExpressionException,75,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0),783,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0), 783))
SINK=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack22 = new de.congrace.exp4j.UnparsableExpressionException,109,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0),783,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0), 783))

SOURCE=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack136 = new de.congrace.exp4j.UnparsableExpressionException,75,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.Throwable cause> = l0,197,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.Throwable cause> = l0, 197))
SINK=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack70 = new de.congrace.exp4j.UnparsableExpressionException,129,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71), 129)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.Throwable cause> = l0,197,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.Throwable cause> = l0, 197))

SOURCE=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack136 = new de.congrace.exp4j.UnparsableExpressionException,75,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.Throwable cause> = l0,197,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.Throwable cause> = l0, 197))
SINK=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack22 = new de.congrace.exp4j.UnparsableExpressionException,109,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.Throwable cause> = l0,197,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.Throwable cause> = l0, 197))

SOURCE=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack136 = new de.congrace.exp4j.UnparsableExpressionException,75,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,$stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>,786,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, $stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>, 786))
SINK=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack70 = new de.congrace.exp4j.UnparsableExpressionException,129,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71), 129)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,$stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>,786,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, $stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>, 786))

SOURCE=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack136 = new de.congrace.exp4j.UnparsableExpressionException,75,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,$stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>,781,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, $stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>, 781))
SINK=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack22 = new de.congrace.exp4j.UnparsableExpressionException,109,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,$stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>,781,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, $stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>, 781))

SOURCE=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack136 = new de.congrace.exp4j.UnparsableExpressionException,75,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3,227,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3, 227))
SINK=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack70 = new de.congrace.exp4j.UnparsableExpressionException,129,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71), 129)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3,227,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3, 227))

SOURCE=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack136 = new de.congrace.exp4j.UnparsableExpressionException,75,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,$stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>,781,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, $stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>, 781))
SINK=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack70 = new de.congrace.exp4j.UnparsableExpressionException,129,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71), 129)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,$stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>,781,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, $stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>, 781))

SOURCE=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack136 = new de.congrace.exp4j.UnparsableExpressionException,75,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>,this := @this: de.congrace.exp4j.UnparsableExpressionException,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.String detailMessage> = l1,266,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.String detailMessage> = l1, 266))
SINK=>BASE: Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack71 = i + 1,129,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack71 = i + 1, 129)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,pos := @parameter2: int,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,$stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(pos),36,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>, $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(pos), 36)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,$stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in expression \'"),36,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>, $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' in expression \''), 36)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,$stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(expression),36,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>, $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(expression), 36)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'"),36,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('\''), 36)) => Node(<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>,$stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(),36,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>, $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>(), 36)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.String detailMessage> = l1,266,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack136.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>('Expression can have only one notation separator'), 75) => (<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(msg), 46) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.String detailMessage> = l1, 266))

List(Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,lastCharNotationSeparator = 0,69,SourceNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,lastCharNotationSeparator = 1,78,SourceNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if lastCharNotationSeparator == 0 goto $stack105 = numberLen - 1,79,SourceNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,i = i + 1,60,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack103 = i + numberLen, 70)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack17 = i + numberLen,93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack17 = i + numberLen, 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack18 <= $stack17 goto lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),93,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack36 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack35),94,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack36 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack35), 94)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack36 != 0 goto $stack37 = numberLen,94,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack45 = chars[$stack44],93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack45 = chars[$stack44], 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack46 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack45),93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack46 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack45), 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack46 != 0 goto $stack37 = numberLen,93,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack51 = chars[$stack50],96,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack51 = chars[$stack50], 96)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack51 != 95 goto lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),96,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack39 = chars[$stack38],96,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack39 = chars[$stack38], 96)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,valueBuilder = $stack15,90,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, valueBuilder = $stack15, 90)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),98,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(), 98)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack20 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isVariable(java.lang.String)>(lastCharNotationSeparator#47),99,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack20 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isVariable(java.lang.String)>(lastCharNotationSeparator#47), 99)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack20 == 0 goto $stack21 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isFunction(java.lang.String)>(lastCharNotationSeparator#47),99,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack21 == 0 goto $stack22 = new de.congrace.exp4j.UnparsableExpressionException,103,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack22 = new de.congrace.exp4j.UnparsableExpressionException,109,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)))

List(Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,lastCharNotationSeparator = 0,69,SourceNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,lastCharNotationSeparator = 1,78,SourceNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if lastCharNotationSeparator == 0 goto $stack105 = numberLen - 1,79,SourceNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,i = i + 1,60,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack103 = i + numberLen, 70)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack17 = i + numberLen,93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack17 = i + numberLen, 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack18 <= $stack17 goto lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),93,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack36 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack35),94,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack36 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack35), 94)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack36 != 0 goto $stack37 = numberLen,94,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack45 = chars[$stack44],93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack45 = chars[$stack44], 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack46 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack45),93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack46 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack45), 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack46 != 0 goto $stack37 = numberLen,93,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack51 = chars[$stack50],96,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack51 = chars[$stack50], 96)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack51 != 95 goto lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),96,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack39 = chars[$stack38],96,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack39 = chars[$stack38], 96)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,valueBuilder = $stack15,90,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, valueBuilder = $stack15, 90)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),98,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(), 98)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack20 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isVariable(java.lang.String)>(lastCharNotationSeparator#47),99,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack20 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isVariable(java.lang.String)>(lastCharNotationSeparator#47), 99)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack20 == 0 goto $stack21 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isFunction(java.lang.String)>(lastCharNotationSeparator#47),99,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack21 == 0 goto $stack22 = new de.congrace.exp4j.UnparsableExpressionException,103,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if i >= $stack12 goto return tokens,60,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,c = chars[i],61,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, c = chars[i], 61)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack13 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c),64,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack13 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c), 64)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack13 == 0 goto $stack14 = staticinvoke <java.lang.Character: boolean isLetter(char)>(c),64,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack14 != 0 goto $stack15 = new java.lang.StringBuilder,64,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if c != 95 goto (branch),96,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if c != 44 goto $stack55 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isOperatorCharacter(char)>(c),96,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack55 == 0 goto (branch),114,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack69 = interfaceinvoke $stack68.<java.util.Map: boolean containsKey(java.lang.Object)>(lastCharNotationSeparator#47),125,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack69 = interfaceinvoke $stack68.<java.util.Map: boolean containsKey(java.lang.Object)>(lastCharNotationSeparator#47), 125)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack69 == 0 goto $stack70 = new de.congrace.exp4j.UnparsableExpressionException,125,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack70 = new de.congrace.exp4j.UnparsableExpressionException,129,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71), 129)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71),129,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71), 129)))

List(Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,lastCharNotationSeparator = 1,78,SourceNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if lastCharNotationSeparator == 0 goto $stack105 = numberLen - 1,79,SourceNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,i = i + 1,60,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack103 = i + numberLen, 70)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack17 = i + numberLen,93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack17 = i + numberLen, 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack18 <= $stack17 goto lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),93,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack36 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack35),94,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack36 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack35), 94)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack36 != 0 goto $stack37 = numberLen,94,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack45 = chars[$stack44],93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack45 = chars[$stack44], 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack46 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack45),93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack46 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack45), 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack46 != 0 goto $stack37 = numberLen,93,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack51 = chars[$stack50],96,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack51 = chars[$stack50], 96)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack51 != 95 goto lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),96,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack39 = chars[$stack38],96,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack39 = chars[$stack38], 96)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,valueBuilder = $stack15,90,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, valueBuilder = $stack15, 90)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),98,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(), 98)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack20 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isVariable(java.lang.String)>(lastCharNotationSeparator#47),99,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack20 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isVariable(java.lang.String)>(lastCharNotationSeparator#47), 99)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack20 == 0 goto $stack21 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isFunction(java.lang.String)>(lastCharNotationSeparator#47),99,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack21 == 0 goto $stack22 = new de.congrace.exp4j.UnparsableExpressionException,103,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack22 = new de.congrace.exp4j.UnparsableExpressionException,109,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)))

List(Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if lastCharNotationSeparator == 0 goto $stack105 = numberLen - 1,79,SourceNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,i = i + 1,60,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack103 = i + numberLen, 70)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack17 = i + numberLen,93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack17 = i + numberLen, 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack18 <= $stack17 goto lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),93,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack36 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack35),94,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack36 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack35), 94)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack36 != 0 goto $stack37 = numberLen,94,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack45 = chars[$stack44],93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack45 = chars[$stack44], 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack46 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack45),93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack46 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack45), 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack46 != 0 goto $stack37 = numberLen,93,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack51 = chars[$stack50],96,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack51 = chars[$stack50], 96)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack51 != 95 goto lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),96,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack39 = chars[$stack38],96,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack39 = chars[$stack38], 96)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,valueBuilder = $stack15,90,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, valueBuilder = $stack15, 90)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),98,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(), 98)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack20 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isVariable(java.lang.String)>(lastCharNotationSeparator#47),99,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack20 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isVariable(java.lang.String)>(lastCharNotationSeparator#47), 99)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack20 == 0 goto $stack21 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isFunction(java.lang.String)>(lastCharNotationSeparator#47),99,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack21 == 0 goto $stack22 = new de.congrace.exp4j.UnparsableExpressionException,103,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack22 = new de.congrace.exp4j.UnparsableExpressionException,109,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)))

List(Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack109 = chars[$stack108],71,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack109 = chars[$stack108], 71)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack110 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isDigitOrDecimalSeparator(char)>($stack109),71,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack110 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isDigitOrDecimalSeparator(char)>($stack109), 71)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack110 == 0 goto $stack111 = i + numberLen,71,SourceNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack112 = chars[$stack111],73,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack112 = chars[$stack111], 73)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack113 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isNotationSeparator(char)>($stack112),73,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack113 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isNotationSeparator(char)>($stack112), 73)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack113 == 0 goto (branch),73,SourceNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if lastCharNotationSeparator != 1 goto $stack133 = i + numberLen,74,SourceNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,numberLen = numberLen + 1,84,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack103 = i + numberLen, 70)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack105 = numberLen - 1,86,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack105 = numberLen - 1, 86)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,i = i + $stack105,86,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, i = i + $stack105, 86)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,i = i + 1,60,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack103 = i + numberLen, 70)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack17 = i + numberLen,93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack17 = i + numberLen, 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack18 <= $stack17 goto lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),93,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack36 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack35),94,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack36 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack35), 94)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack36 != 0 goto $stack37 = numberLen,94,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack45 = chars[$stack44],93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack45 = chars[$stack44], 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack46 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack45),93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack46 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack45), 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack46 != 0 goto $stack37 = numberLen,93,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack51 = chars[$stack50],96,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack51 = chars[$stack50], 96)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack51 != 95 goto lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),96,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack39 = chars[$stack38],96,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack39 = chars[$stack38], 96)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,valueBuilder = $stack15,90,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, valueBuilder = $stack15, 90)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),98,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(), 98)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack20 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isVariable(java.lang.String)>(lastCharNotationSeparator#47),99,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack20 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isVariable(java.lang.String)>(lastCharNotationSeparator#47), 99)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack20 == 0 goto $stack21 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isFunction(java.lang.String)>(lastCharNotationSeparator#47),99,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack21 == 0 goto $stack22 = new de.congrace.exp4j.UnparsableExpressionException,103,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack22 = new de.congrace.exp4j.UnparsableExpressionException,109,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)))

List(Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack113 == 0 goto (branch),73,SourceNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if lastCharNotationSeparator != 1 goto $stack133 = i + numberLen,74,SourceNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,numberLen = numberLen + 1,84,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack103 = i + numberLen, 70)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack105 = numberLen - 1,86,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack105 = numberLen - 1, 86)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,i = i + $stack105,86,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, i = i + $stack105, 86)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,i = i + 1,60,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack103 = i + numberLen, 70)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack17 = i + numberLen,93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack17 = i + numberLen, 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack18 <= $stack17 goto lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),93,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack36 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack35),94,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack36 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack35), 94)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack36 != 0 goto $stack37 = numberLen,94,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack45 = chars[$stack44],93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack45 = chars[$stack44], 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack46 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack45),93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack46 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack45), 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack46 != 0 goto $stack37 = numberLen,93,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack51 = chars[$stack50],96,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack51 = chars[$stack50], 96)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack51 != 95 goto lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),96,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack39 = chars[$stack38],96,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack39 = chars[$stack38], 96)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,valueBuilder = $stack15,90,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, valueBuilder = $stack15, 90)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),98,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(), 98)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack20 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isVariable(java.lang.String)>(lastCharNotationSeparator#47),99,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack20 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isVariable(java.lang.String)>(lastCharNotationSeparator#47), 99)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack20 == 0 goto $stack21 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isFunction(java.lang.String)>(lastCharNotationSeparator#47),99,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack21 == 0 goto $stack22 = new de.congrace.exp4j.UnparsableExpressionException,103,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack22 = new de.congrace.exp4j.UnparsableExpressionException,109,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)))

List(Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if lastCharNotationSeparator != 1 goto $stack133 = i + numberLen,74,SourceNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,numberLen = numberLen + 1,84,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack103 = i + numberLen, 70)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack105 = numberLen - 1,86,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack105 = numberLen - 1, 86)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,i = i + $stack105,86,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, i = i + $stack105, 86)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,i = i + 1,60,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack103 = i + numberLen, 70)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack17 = i + numberLen,93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack17 = i + numberLen, 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack18 <= $stack17 goto lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),93,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack36 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack35),94,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack36 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack35), 94)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack36 != 0 goto $stack37 = numberLen,94,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack45 = chars[$stack44],93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack45 = chars[$stack44], 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack46 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack45),93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack46 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack45), 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack46 != 0 goto $stack37 = numberLen,93,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack51 = chars[$stack50],96,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack51 = chars[$stack50], 96)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack51 != 95 goto lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),96,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack39 = chars[$stack38],96,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack39 = chars[$stack38], 96)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,valueBuilder = $stack15,90,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, valueBuilder = $stack15, 90)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),98,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(), 98)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack20 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isVariable(java.lang.String)>(lastCharNotationSeparator#47),99,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack20 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isVariable(java.lang.String)>(lastCharNotationSeparator#47), 99)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack20 == 0 goto $stack21 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isFunction(java.lang.String)>(lastCharNotationSeparator#47),99,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack21 == 0 goto $stack22 = new de.congrace.exp4j.UnparsableExpressionException,103,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack22 = new de.congrace.exp4j.UnparsableExpressionException,109,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)))

List(Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack104 <= $stack103 goto $stack105 = numberLen - 1,70,SourceNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,i = i + 1,60,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack103 = i + numberLen, 70)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack17 = i + numberLen,93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack17 = i + numberLen, 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack18 <= $stack17 goto lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),93,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack36 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack35),94,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack36 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack35), 94)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack36 != 0 goto $stack37 = numberLen,94,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack45 = chars[$stack44],93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack45 = chars[$stack44], 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack46 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack45),93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack46 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack45), 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack46 != 0 goto $stack37 = numberLen,93,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack51 = chars[$stack50],96,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack51 = chars[$stack50], 96)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack51 != 95 goto lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),96,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack39 = chars[$stack38],96,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack39 = chars[$stack38], 96)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,valueBuilder = $stack15,90,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, valueBuilder = $stack15, 90)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),98,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(), 98)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack20 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isVariable(java.lang.String)>(lastCharNotationSeparator#47),99,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack20 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isVariable(java.lang.String)>(lastCharNotationSeparator#47), 99)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack20 == 0 goto $stack21 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isFunction(java.lang.String)>(lastCharNotationSeparator#47),99,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack21 == 0 goto $stack22 = new de.congrace.exp4j.UnparsableExpressionException,103,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if i >= $stack12 goto return tokens,60,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,c = chars[i],61,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, c = chars[i], 61)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack13 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c),64,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack13 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c), 64)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack13 == 0 goto $stack14 = staticinvoke <java.lang.Character: boolean isLetter(char)>(c),64,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack14 != 0 goto $stack15 = new java.lang.StringBuilder,64,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if c != 95 goto (branch),96,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if c != 44 goto $stack55 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isOperatorCharacter(char)>(c),96,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack55 == 0 goto (branch),114,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack69 = interfaceinvoke $stack68.<java.util.Map: boolean containsKey(java.lang.Object)>(lastCharNotationSeparator#47),125,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack69 = interfaceinvoke $stack68.<java.util.Map: boolean containsKey(java.lang.Object)>(lastCharNotationSeparator#47), 125)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack69 == 0 goto $stack70 = new de.congrace.exp4j.UnparsableExpressionException,125,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack70 = new de.congrace.exp4j.UnparsableExpressionException,129,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71), 129)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71),129,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71), 129)))

List(Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack104 <= $stack103 goto $stack105 = numberLen - 1,70,SourceNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,i = i + 1,60,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack103 = i + numberLen, 70)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack17 = i + numberLen,93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack17 = i + numberLen, 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack18 <= $stack17 goto lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),93,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack36 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack35),94,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack36 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack35), 94)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack36 != 0 goto $stack37 = numberLen,94,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack45 = chars[$stack44],93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack45 = chars[$stack44], 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack46 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack45),93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack46 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack45), 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack46 != 0 goto $stack37 = numberLen,93,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack51 = chars[$stack50],96,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack51 = chars[$stack50], 96)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack51 != 95 goto lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),96,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack39 = chars[$stack38],96,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack39 = chars[$stack38], 96)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,valueBuilder = $stack15,90,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, valueBuilder = $stack15, 90)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),98,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(), 98)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack20 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isVariable(java.lang.String)>(lastCharNotationSeparator#47),99,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack20 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isVariable(java.lang.String)>(lastCharNotationSeparator#47), 99)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack20 == 0 goto $stack21 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isFunction(java.lang.String)>(lastCharNotationSeparator#47),99,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack21 == 0 goto $stack22 = new de.congrace.exp4j.UnparsableExpressionException,103,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack22 = new de.congrace.exp4j.UnparsableExpressionException,109,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack22.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack23), 109)))

List(Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,lastCharNotationSeparator = 1,78,SourceNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if lastCharNotationSeparator == 0 goto $stack105 = numberLen - 1,79,SourceNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,i = i + 1,60,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack103 = i + numberLen, 70)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack17 = i + numberLen,93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack17 = i + numberLen, 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack18 <= $stack17 goto lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),93,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack36 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack35),94,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack36 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack35), 94)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack36 != 0 goto $stack37 = numberLen,94,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack45 = chars[$stack44],93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack45 = chars[$stack44], 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack46 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack45),93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack46 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack45), 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack46 != 0 goto $stack37 = numberLen,93,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack51 = chars[$stack50],96,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack51 = chars[$stack50], 96)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack51 != 95 goto lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),96,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack39 = chars[$stack38],96,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack39 = chars[$stack38], 96)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,valueBuilder = $stack15,90,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, valueBuilder = $stack15, 90)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),98,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(), 98)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack20 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isVariable(java.lang.String)>(lastCharNotationSeparator#47),99,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack20 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isVariable(java.lang.String)>(lastCharNotationSeparator#47), 99)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack20 == 0 goto $stack21 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isFunction(java.lang.String)>(lastCharNotationSeparator#47),99,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack21 == 0 goto $stack22 = new de.congrace.exp4j.UnparsableExpressionException,103,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if i >= $stack12 goto return tokens,60,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,c = chars[i],61,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, c = chars[i], 61)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack13 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c),64,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack13 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c), 64)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack13 == 0 goto $stack14 = staticinvoke <java.lang.Character: boolean isLetter(char)>(c),64,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack14 != 0 goto $stack15 = new java.lang.StringBuilder,64,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if c != 95 goto (branch),96,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if c != 44 goto $stack55 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isOperatorCharacter(char)>(c),96,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack55 == 0 goto (branch),114,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack69 = interfaceinvoke $stack68.<java.util.Map: boolean containsKey(java.lang.Object)>(lastCharNotationSeparator#47),125,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack69 = interfaceinvoke $stack68.<java.util.Map: boolean containsKey(java.lang.Object)>(lastCharNotationSeparator#47), 125)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack69 == 0 goto $stack70 = new de.congrace.exp4j.UnparsableExpressionException,125,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack70 = new de.congrace.exp4j.UnparsableExpressionException,129,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71), 129)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71),129,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71), 129)))

List(Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack113 == 0 goto (branch),73,SourceNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if lastCharNotationSeparator != 1 goto $stack133 = i + numberLen,74,SourceNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,numberLen = numberLen + 1,84,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack103 = i + numberLen, 70)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack105 = numberLen - 1,86,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack105 = numberLen - 1, 86)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,i = i + $stack105,86,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, i = i + $stack105, 86)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,i = i + 1,60,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack103 = i + numberLen, 70)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack17 = i + numberLen,93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack17 = i + numberLen, 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack18 <= $stack17 goto lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),93,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack36 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack35),94,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack36 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack35), 94)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack36 != 0 goto $stack37 = numberLen,94,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack45 = chars[$stack44],93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack45 = chars[$stack44], 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack46 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack45),93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack46 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack45), 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack46 != 0 goto $stack37 = numberLen,93,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack51 = chars[$stack50],96,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack51 = chars[$stack50], 96)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack51 != 95 goto lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),96,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack39 = chars[$stack38],96,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack39 = chars[$stack38], 96)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,valueBuilder = $stack15,90,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, valueBuilder = $stack15, 90)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),98,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(), 98)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack20 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isVariable(java.lang.String)>(lastCharNotationSeparator#47),99,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack20 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isVariable(java.lang.String)>(lastCharNotationSeparator#47), 99)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack20 == 0 goto $stack21 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isFunction(java.lang.String)>(lastCharNotationSeparator#47),99,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack21 == 0 goto $stack22 = new de.congrace.exp4j.UnparsableExpressionException,103,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if i >= $stack12 goto return tokens,60,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,c = chars[i],61,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, c = chars[i], 61)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack13 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c),64,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack13 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c), 64)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack13 == 0 goto $stack14 = staticinvoke <java.lang.Character: boolean isLetter(char)>(c),64,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack14 != 0 goto $stack15 = new java.lang.StringBuilder,64,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if c != 95 goto (branch),96,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if c != 44 goto $stack55 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isOperatorCharacter(char)>(c),96,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack55 == 0 goto (branch),114,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack69 = interfaceinvoke $stack68.<java.util.Map: boolean containsKey(java.lang.Object)>(lastCharNotationSeparator#47),125,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack69 = interfaceinvoke $stack68.<java.util.Map: boolean containsKey(java.lang.Object)>(lastCharNotationSeparator#47), 125)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack69 == 0 goto $stack70 = new de.congrace.exp4j.UnparsableExpressionException,125,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack70 = new de.congrace.exp4j.UnparsableExpressionException,129,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71), 129)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71),129,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71), 129)))

List(Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if lastCharNotationSeparator == 0 goto $stack105 = numberLen - 1,79,SourceNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,i = i + 1,60,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack103 = i + numberLen, 70)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack17 = i + numberLen,93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack17 = i + numberLen, 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack18 <= $stack17 goto lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),93,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack36 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack35),94,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack36 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack35), 94)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack36 != 0 goto $stack37 = numberLen,94,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack45 = chars[$stack44],93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack45 = chars[$stack44], 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack46 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack45),93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack46 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack45), 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack46 != 0 goto $stack37 = numberLen,93,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack51 = chars[$stack50],96,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack51 = chars[$stack50], 96)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack51 != 95 goto lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),96,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack39 = chars[$stack38],96,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack39 = chars[$stack38], 96)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,valueBuilder = $stack15,90,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, valueBuilder = $stack15, 90)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),98,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(), 98)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack20 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isVariable(java.lang.String)>(lastCharNotationSeparator#47),99,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack20 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isVariable(java.lang.String)>(lastCharNotationSeparator#47), 99)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack20 == 0 goto $stack21 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isFunction(java.lang.String)>(lastCharNotationSeparator#47),99,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack21 == 0 goto $stack22 = new de.congrace.exp4j.UnparsableExpressionException,103,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if i >= $stack12 goto return tokens,60,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,c = chars[i],61,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, c = chars[i], 61)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack13 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c),64,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack13 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c), 64)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack13 == 0 goto $stack14 = staticinvoke <java.lang.Character: boolean isLetter(char)>(c),64,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack14 != 0 goto $stack15 = new java.lang.StringBuilder,64,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if c != 95 goto (branch),96,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if c != 44 goto $stack55 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isOperatorCharacter(char)>(c),96,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack55 == 0 goto (branch),114,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack69 = interfaceinvoke $stack68.<java.util.Map: boolean containsKey(java.lang.Object)>(lastCharNotationSeparator#47),125,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack69 = interfaceinvoke $stack68.<java.util.Map: boolean containsKey(java.lang.Object)>(lastCharNotationSeparator#47), 125)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack69 == 0 goto $stack70 = new de.congrace.exp4j.UnparsableExpressionException,125,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack70 = new de.congrace.exp4j.UnparsableExpressionException,129,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71), 129)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71),129,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71), 129)))

List(Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if lastCharNotationSeparator != 1 goto $stack133 = i + numberLen,74,SourceNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,numberLen = numberLen + 1,84,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack103 = i + numberLen, 70)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack105 = numberLen - 1,86,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack105 = numberLen - 1, 86)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,i = i + $stack105,86,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, i = i + $stack105, 86)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,i = i + 1,60,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack103 = i + numberLen, 70)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack17 = i + numberLen,93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack17 = i + numberLen, 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack18 <= $stack17 goto lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),93,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack36 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack35),94,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack36 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack35), 94)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack36 != 0 goto $stack37 = numberLen,94,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack45 = chars[$stack44],93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack45 = chars[$stack44], 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack46 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack45),93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack46 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack45), 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack46 != 0 goto $stack37 = numberLen,93,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack51 = chars[$stack50],96,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack51 = chars[$stack50], 96)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack51 != 95 goto lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),96,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack39 = chars[$stack38],96,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack39 = chars[$stack38], 96)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,valueBuilder = $stack15,90,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, valueBuilder = $stack15, 90)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),98,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(), 98)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack20 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isVariable(java.lang.String)>(lastCharNotationSeparator#47),99,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack20 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isVariable(java.lang.String)>(lastCharNotationSeparator#47), 99)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack20 == 0 goto $stack21 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isFunction(java.lang.String)>(lastCharNotationSeparator#47),99,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack21 == 0 goto $stack22 = new de.congrace.exp4j.UnparsableExpressionException,103,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if i >= $stack12 goto return tokens,60,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,c = chars[i],61,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, c = chars[i], 61)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack13 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c),64,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack13 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c), 64)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack13 == 0 goto $stack14 = staticinvoke <java.lang.Character: boolean isLetter(char)>(c),64,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack14 != 0 goto $stack15 = new java.lang.StringBuilder,64,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if c != 95 goto (branch),96,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if c != 44 goto $stack55 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isOperatorCharacter(char)>(c),96,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack55 == 0 goto (branch),114,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack69 = interfaceinvoke $stack68.<java.util.Map: boolean containsKey(java.lang.Object)>(lastCharNotationSeparator#47),125,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack69 = interfaceinvoke $stack68.<java.util.Map: boolean containsKey(java.lang.Object)>(lastCharNotationSeparator#47), 125)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack69 == 0 goto $stack70 = new de.congrace.exp4j.UnparsableExpressionException,125,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack70 = new de.congrace.exp4j.UnparsableExpressionException,129,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71), 129)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71),129,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71), 129)))

List(Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack109 = chars[$stack108],71,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack109 = chars[$stack108], 71)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack110 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isDigitOrDecimalSeparator(char)>($stack109),71,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack110 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isDigitOrDecimalSeparator(char)>($stack109), 71)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack110 == 0 goto $stack111 = i + numberLen,71,SourceNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack112 = chars[$stack111],73,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack112 = chars[$stack111], 73)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack113 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isNotationSeparator(char)>($stack112),73,SourceNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack113 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isNotationSeparator(char)>($stack112), 73)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack113 == 0 goto (branch),73,SourceNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if lastCharNotationSeparator != 1 goto $stack133 = i + numberLen,74,SourceNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,numberLen = numberLen + 1,84,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack103 = i + numberLen, 70)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack105 = numberLen - 1,86,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack105 = numberLen - 1, 86)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,i = i + $stack105,86,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, i = i + $stack105, 86)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,i = i + 1,60,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack103 = i + numberLen, 70)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack17 = i + numberLen,93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack17 = i + numberLen, 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack18 <= $stack17 goto lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),93,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack36 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack35),94,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack36 = staticinvoke <java.lang.Character: boolean isLetter(char)>($stack35), 94)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack36 != 0 goto $stack37 = numberLen,94,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack45 = chars[$stack44],93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack45 = chars[$stack44], 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack46 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack45),93,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack46 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack45), 93)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack46 != 0 goto $stack37 = numberLen,93,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack51 = chars[$stack50],96,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack51 = chars[$stack50], 96)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack51 != 95 goto lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),96,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack39 = chars[$stack38],96,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack39 = chars[$stack38], 96)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,valueBuilder = $stack15,90,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, valueBuilder = $stack15, 90)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(),98,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, lastCharNotationSeparator#47 = virtualinvoke valueBuilder.<java.lang.StringBuilder: java.lang.String toString()>(), 98)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack20 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isVariable(java.lang.String)>(lastCharNotationSeparator#47),99,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack20 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isVariable(java.lang.String)>(lastCharNotationSeparator#47), 99)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack20 == 0 goto $stack21 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isFunction(java.lang.String)>(lastCharNotationSeparator#47),99,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack21 == 0 goto $stack22 = new de.congrace.exp4j.UnparsableExpressionException,103,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if i >= $stack12 goto return tokens,60,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,c = chars[i],61,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, c = chars[i], 61)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack13 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c),64,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack13 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c), 64)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack13 == 0 goto $stack14 = staticinvoke <java.lang.Character: boolean isLetter(char)>(c),64,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack14 != 0 goto $stack15 = new java.lang.StringBuilder,64,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if c != 95 goto (branch),96,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if c != 44 goto $stack55 = specialinvoke this.<de.congrace.exp4j.Tokenizer: boolean isOperatorCharacter(char)>(c),96,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack55 == 0 goto (branch),114,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack69 = interfaceinvoke $stack68.<java.util.Map: boolean containsKey(java.lang.Object)>(lastCharNotationSeparator#47),125,SimpleNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, $stack69 = interfaceinvoke $stack68.<java.util.Map: boolean containsKey(java.lang.Object)>(lastCharNotationSeparator#47), 125)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,if $stack69 == 0 goto $stack70 = new de.congrace.exp4j.UnparsableExpressionException,125,SimpleNode, path: ) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,$stack70 = new de.congrace.exp4j.UnparsableExpressionException,129,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71), 129)) => Node(<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>,specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71),129,SinkNode, path: (<de.congrace.exp4j.Tokenizer: java.util.List getTokens(java.lang.String)>, specialinvoke $stack70.<de.congrace.exp4j.UnparsableExpressionException: void <init>(java.lang.String,char,int)>(expression, c, $stack71), 129)))

