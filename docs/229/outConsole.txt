Running soot scenario auto-matter;io.norberg.automatter.processor.AutoMatterProcessor;collectionType(ExecutableElement);5739d194fb360dde65820538263efddba683785f
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/auto-matter/5739d194fb360dde65820538263efddba683785f/original-without-dependencies/auto-matter-0.15.1-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,52400
Time to perform Confluence 1 Inter 0,36300
Configure Soot Confluence 2 Inter 0,31600
Time to perform Confluence 2 Inter 0,13400
Visited methods: 16
Depth limit: 5
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/auto-matter/5739d194fb360dde65820538263efddba683785f/original-without-dependencies/auto-matter-0.15.1-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,64200
Runtime: 0.007s
Time to perform OA Inter 0,70100
OA Inter Visited methods: 2
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/auto-matter/5739d194fb360dde65820538263efddba683785f/original-without-dependencies/auto-matter-0.15.1-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,48500
Time to perform DFP Inter 0,36000
Depth limit: 5
CONFLICTS: []
Visited methods: 8
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/auto-matter/5739d194fb360dde65820538263efddba683785f/original-without-dependencies/auto-matter-0.15.1-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,49000
Time to perform DFP Inter 0,31900
Depth limit: 5
CONFLICTS: []
Visited methods: 8
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/auto-matter/5739d194fb360dde65820538263efddba683785f/original-without-dependencies/auto-matter-0.15.1-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,68100
Time to perform PDG 0,36400
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/auto-matter/5739d194fb360dde65820538263efddba683785f/original-without-dependencies/auto-matter-0.15.1-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,53100
Time to perform PDG 0,32900
CONFLICTS: [List(Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,$stack8 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.NavigableSet<"),1286,SourceNode, path: (<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>, $stack8 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>('java.util.NavigableSet<'), 1286)) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack8 == 0 goto $stack9 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.Map<"),1286,SourceNode, path: ) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack9 == 0 goto $stack10 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.SortedMap<"),1288,SimpleNode, path: ) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,$stack10 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.SortedMap<"),1290,SourceNode, path: (<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>, $stack10 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>('java.util.SortedMap<'), 1290)) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack10 == 0 goto $stack11 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.NavigableMap<"),1290,SourceNode, path: ) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack11 == 0 goto $stack12 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.Collection<"),1292,SourceNode, path: ) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,$stack12 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.Collection<"),1294,SinkNode, path: (<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>, $stack12 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>('java.util.Collection<'), 1294)) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack12 == 0 goto $stack13 = new java.lang.AssertionError,1294,SinkNode, path: ) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,return "Collection",1295,SinkNode, path: )), List(Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,$stack10 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.SortedMap<"),1290,SourceNode, path: (<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>, $stack10 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>('java.util.SortedMap<'), 1290)) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack10 == 0 goto $stack11 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.NavigableMap<"),1290,SourceNode, path: ) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack11 == 0 goto $stack12 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.Collection<"),1292,SourceNode, path: ) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,$stack12 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.Collection<"),1294,SinkNode, path: (<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>, $stack12 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>('java.util.Collection<'), 1294)) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack12 == 0 goto $stack13 = new java.lang.AssertionError,1294,SinkNode, path: )), List(Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,$stack7 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.SortedSet<"),1284,SourceNode, path: (<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>, $stack7 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>('java.util.SortedSet<'), 1284)) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack7 == 0 goto $stack8 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.NavigableSet<"),1284,SourceNode, path: ) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack8 == 0 goto $stack9 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.Map<"),1286,SourceNode, path: ) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack9 == 0 goto $stack10 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.SortedMap<"),1288,SimpleNode, path: ) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,$stack10 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.SortedMap<"),1290,SourceNode, path: (<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>, $stack10 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>('java.util.SortedMap<'), 1290)) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack10 == 0 goto $stack11 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.NavigableMap<"),1290,SourceNode, path: ) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack11 == 0 goto $stack12 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.Collection<"),1292,SourceNode, path: ) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,$stack12 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.Collection<"),1294,SinkNode, path: (<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>, $stack12 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>('java.util.Collection<'), 1294)) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack12 == 0 goto $stack13 = new java.lang.AssertionError,1294,SinkNode, path: ) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,return "Collection",1295,SinkNode, path: )), List(Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,$stack8 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.NavigableSet<"),1286,SourceNode, path: (<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>, $stack8 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>('java.util.NavigableSet<'), 1286)) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack8 == 0 goto $stack9 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.Map<"),1286,SourceNode, path: ) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack9 == 0 goto $stack10 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.SortedMap<"),1288,SimpleNode, path: ) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,$stack10 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.SortedMap<"),1290,SourceNode, path: (<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>, $stack10 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>('java.util.SortedMap<'), 1290)) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack10 == 0 goto $stack11 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.NavigableMap<"),1290,SourceNode, path: ) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack11 == 0 goto $stack12 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.Collection<"),1292,SourceNode, path: ) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,$stack12 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.Collection<"),1294,SinkNode, path: (<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>, $stack12 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>('java.util.Collection<'), 1294)) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack12 == 0 goto $stack13 = new java.lang.AssertionError,1294,SinkNode, path: )), List(Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,$stack7 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.SortedSet<"),1284,SourceNode, path: (<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>, $stack7 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>('java.util.SortedSet<'), 1284)) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack7 == 0 goto $stack8 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.NavigableSet<"),1284,SourceNode, path: ) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack8 == 0 goto $stack9 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.Map<"),1286,SourceNode, path: ) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack9 == 0 goto $stack10 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.SortedMap<"),1288,SimpleNode, path: ) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,$stack10 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.SortedMap<"),1290,SourceNode, path: (<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>, $stack10 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>('java.util.SortedMap<'), 1290)) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack10 == 0 goto $stack11 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.NavigableMap<"),1290,SourceNode, path: ) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack11 == 0 goto $stack12 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.Collection<"),1292,SourceNode, path: ) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,$stack12 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.Collection<"),1294,SinkNode, path: (<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>, $stack12 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>('java.util.Collection<'), 1294)) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack12 == 0 goto $stack13 = new java.lang.AssertionError,1294,SinkNode, path: )), List(Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack11 == 0 goto $stack12 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.Collection<"),1292,SourceNode, path: ) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,$stack12 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.Collection<"),1294,SinkNode, path: (<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>, $stack12 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>('java.util.Collection<'), 1294)) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack12 == 0 goto $stack13 = new java.lang.AssertionError,1294,SinkNode, path: )), List(Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,$stack10 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.SortedMap<"),1290,SourceNode, path: (<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>, $stack10 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>('java.util.SortedMap<'), 1290)) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack10 == 0 goto $stack11 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.NavigableMap<"),1290,SourceNode, path: ) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack11 == 0 goto $stack12 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.Collection<"),1292,SourceNode, path: ) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,$stack12 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.Collection<"),1294,SinkNode, path: (<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>, $stack12 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>('java.util.Collection<'), 1294)) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack12 == 0 goto $stack13 = new java.lang.AssertionError,1294,SinkNode, path: ) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,return "Collection",1295,SinkNode, path: )), List(Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack11 == 0 goto $stack12 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.Collection<"),1292,SourceNode, path: ) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,$stack12 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>("java.util.Collection<"),1294,SinkNode, path: (<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>, $stack12 = virtualinvoke returnType.<java.lang.String: boolean startsWith(java.lang.String)>('java.util.Collection<'), 1294)) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,if $stack12 == 0 goto $stack13 = new java.lang.AssertionError,1294,SinkNode, path: ) => Node(<io.norberg.automatter.processor.AutoMatterProcessor: java.lang.String collectionType(javax.lang.model.element.ExecutableElement)>,return "Collection",1295,SinkNode, path: ))]
 Analysis results
----------------------------
 Number of conflicts: 8
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
